<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Café de Lyon</title><link href="http://www.lyon0804.com/" rel="alternate"></link><link href="http://www.lyon0804.com/feeds/all.atom.xml" rel="self"></link><id>http://www.lyon0804.com/</id><updated>2016-03-03T00:00:00+08:00</updated><entry><title>Linux进程状态</title><link href="http://www.lyon0804.com/linuxjin-cheng-zhuang-tai.html" rel="alternate"></link><updated>2016-03-03T00:00:00+08:00</updated><author><name>lyon</name></author><id>tag:www.lyon0804.com,2016-03-03:linuxjin-cheng-zhuang-tai.html</id><summary type="html">&lt;h2&gt;查看当前运行进程&lt;/h2&gt;
&lt;p&gt;有许多方式可以查看当前linux系统中的运行进程, 常用的有&lt;code&gt;top&lt;/code&gt;, &lt;code&gt;htop&lt;/code&gt; 以及 &lt;code&gt;ps&lt;/code&gt; 三个命令;&lt;/p&gt;
&lt;p&gt;其中&lt;code&gt;htop&lt;/code&gt;比&lt;code&gt;top&lt;/code&gt;工具具备更好的显示方式:&lt;/p&gt;
&lt;p&gt;&lt;img alt="htop示例" src="http://ww4.sinaimg.cn/large/95202659gw1f1jo6zewr9j21z0168nbf.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;其中上方的CPU和内存信息可以帮助更好地监控整个机器的运行状态, 还提供了一些常用操作的快捷键, 如&lt;code&gt;F5&lt;/code&gt;树形结构展示进程树等等;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;htop&lt;/code&gt;命令的缺点是显示的内容是在一个独立页面中的, 无法通过linux管道做更多的操作, 而且如果进程数量太多的话, 进程的查看就不是那么直观;&lt;/p&gt;
&lt;p&gt;使用&lt;code&gt;ps&lt;/code&gt;命令可以得到标准输出的格式, &lt;code&gt;ps&lt;/code&gt;命令提供了一系列参数以调整输出内容, 具体参数可以通过&lt;code&gt;man ps&lt;/code&gt;了解;&lt;/p&gt;
&lt;p&gt;为了便于观察, 我经常使用的命令参数为: &lt;code&gt;ps px&lt;/code&gt;, 此时会显示5列信息, 依次为:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;PID&lt;/strong&gt;: 进程号;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;TTY&lt;/strong&gt;: 登陆者编号, 其中tty表示本地登陆者, pts表示远程登陆者;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;STAT&lt;/strong&gt;: 进程状态;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;TIME&lt;/strong&gt;: 进程运行时间;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;COMMAND&lt;/strong&gt;: 树形结构展示的进程对应命令;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;除了&lt;strong&gt;STAT&lt;/strong&gt;用不知名字符表示之外(下面讲), 其他列的内容都非常容易理解;&lt;/p&gt;
&lt;h2&gt;进程状态&lt;/h2&gt;
&lt;p&gt;linux下的常见状态有: &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;R&lt;/strong&gt;: 正在运行状态或者在排队中的可运行状态, 如果用ps命令的话一般很难捕获到该状态;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;S&lt;/strong&gt;: 睡眠状态, 并且可以被中断;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;D&lt;/strong&gt;: 睡眠状态, 并且不能被中断, 该状态通常是由于IO堵塞造成;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;T&lt;/strong&gt;: 停止状态, 该状态下, 进程被暂停挂起;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Z&lt;/strong&gt;: 僵尸状态, 该状态的进程已经结束, 但是由于父进程没有回收, 所以显示状态;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;除了这些主要状态之外, 通常会发现后面还有一个标识状态, 如某个进程状态为&lt;strong&gt;Ss&lt;/strong&gt;, 主要常见下列标识:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&amp;lt;&lt;/strong&gt;: 高优先级;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;N&lt;/strong&gt;: 低优先级;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;L&lt;/strong&gt;: 页面锁定在内存;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;s&lt;/strong&gt;: 信息头;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;l&lt;/strong&gt;: 多线程状态;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;+&lt;/strong&gt;: 前台运行组;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在实际应用中, &lt;strong&gt;S&lt;/strong&gt;等状态&lt;em&gt;良民&lt;/em&gt;一般不会给我们造成困扰, 主要需要了解如何处理一些棘手的状态;&lt;/p&gt;
&lt;p&gt;理解上述状态便于后续对这些状态进程的处理(挂起、恢复、杀死);&lt;/p&gt;
&lt;h2&gt;操作进程&lt;/h2&gt;
&lt;p&gt;进程操作可以通过&lt;code&gt;kill&lt;/code&gt;命令进行, &lt;code&gt;kill&lt;/code&gt;命令可以对进程发出很多的信号, 具体的信号可以参考&lt;em&gt;/usr/include/asm/signal.h&lt;/em&gt;头文件(不同系统会有所区别), 最重用的信号有:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;SIGSTOP&lt;/strong&gt;: 挂起进程, 进程进入&lt;strong&gt;T&lt;/strong&gt;状态;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;SIGCONT&lt;/strong&gt;: 继续进程, 使得&lt;strong&gt;T&lt;/strong&gt;状态的进程重新运行;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;SIGKILL&lt;/strong&gt;: 杀死进程;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;使用&lt;code&gt;kill -sig [pid]&lt;/code&gt;的方式调用, 如需要杀死一个进程号为&lt;em&gt;5477&lt;/em&gt;的进程, 则可以使用: &lt;code&gt;kill -SIGKILL 5499&lt;/code&gt;来杀死这个进程;&lt;/p&gt;
&lt;p&gt;对于一般的任务, 不需要发送信号就可以杀掉进程, 但是如果是想杀死上述所说的&lt;strong&gt;T&lt;/strong&gt;状态进程等, 则必须加上&lt;strong&gt;SIGKILL&lt;/strong&gt;信号; 但是对于&lt;strong&gt;D&lt;/strong&gt;状态进程, 则不推荐强行杀死, 而是等IO重新正常建立之后再杀死, 如检查网络使其正常连接等等;&lt;/p&gt;
&lt;p&gt;当进程数量非常多的时候如一个父进程fork出几十个子进程, 如何批量杀死进程呢?&lt;/p&gt;
&lt;p&gt;一种方式是用之前提到的管道, 然后通过&lt;code&gt;grep&lt;/code&gt;或者各种命令来筛出感兴趣的pid号, 然后使用&lt;code&gt;kill&lt;/code&gt;命令集体杀死, 如: &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;ps fx &lt;span class="p"&gt;|&lt;/span&gt; grep python &lt;span class="p"&gt;|&lt;/span&gt; awk &lt;span class="s1"&gt;&amp;#39;{print $1}&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="nb"&gt;read &lt;/span&gt;pid&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="nb"&gt;kill&lt;/span&gt; &lt;span class="nv"&gt;$pid&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;done&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;等等;&lt;/p&gt;
&lt;p&gt;另外一种方式是递归杀死一颗进程树, 这样可以节省很多工作:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;#!/bin/env bash&lt;/span&gt;
&lt;span class="k"&gt;function&lt;/span&gt; killtree&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="nb"&gt;local &lt;/span&gt;&lt;span class="nv"&gt;_pid&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;$1&lt;/span&gt;
    &lt;span class="nb"&gt;local &lt;/span&gt;&lt;span class="nv"&gt;_sig&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;2&lt;/span&gt;&lt;span class="k"&gt;:-&lt;/span&gt;&lt;span class="nv"&gt;TERM&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
    &lt;span class="nb"&gt;kill&lt;/span&gt; -stop &lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;_pid&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; _child in &lt;span class="k"&gt;$(&lt;/span&gt;ps -o pid --no-headers --ppid &lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;_pid&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="k"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;do&lt;/span&gt;
       killtree &lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;_child&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;_sig&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;done&lt;/span&gt;
    &lt;span class="nb"&gt;kill&lt;/span&gt; -&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;_sig&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;_pid&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt; &lt;span class="si"&gt;${#}&lt;/span&gt; -eq &lt;span class="m"&gt;0&lt;/span&gt; -o &lt;span class="si"&gt;${#}&lt;/span&gt; -gt &lt;span class="m"&gt;2&lt;/span&gt; &lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="k"&gt;then&lt;/span&gt;
    &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Usage: &lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;basename &lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;0&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="k"&gt;)&lt;/span&gt;&lt;span class="s2"&gt; &amp;lt;pid&amp;gt; [signal]&amp;quot;&lt;/span&gt;
    &lt;span class="nb"&gt;exit &lt;/span&gt;1
&lt;span class="k"&gt;fi&lt;/span&gt;

killtree &lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;em&gt;以上程序参考网络, 具体哪里忘记了, 如果有侵犯到相关权益, 请告知&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;将上面的程序命名为&lt;em&gt;killtree&lt;/em&gt;, 并赋予&lt;strong&gt;x&lt;/strong&gt;权限, 把该文件放到某个&lt;code&gt;PATH&lt;/code&gt;路径下以便系统识别, 如: &lt;code&gt;~/bin&lt;/code&gt;等, 之后就可以使用&lt;code&gt;killtree&lt;/code&gt;命令杀死一个进程树了;&lt;/p&gt;</summary><category term="linux"></category></entry><entry><title>使用Galaxy_01_介绍以及搭建</title><link href="http://www.lyon0804.com/shi-yong-galaxy_01_jie-shao-yi-ji-da-jian.html" rel="alternate"></link><updated>2016-02-16T00:00:00+08:00</updated><author><name>lyon</name></author><id>tag:www.lyon0804.com,2016-02-16:shi-yong-galaxy_01_jie-shao-yi-ji-da-jian.html</id><summary type="html">&lt;h2&gt;生物信息分析平台galaxy简介&lt;/h2&gt;
&lt;p&gt;生物信息分析平台主要是将一些生物信息分析过程抽离并且封装成可视化的界面, 使得没有编程经验的生物信息学分析人员, 也可以通过平台上搭建的已有流程进行数据分析;&lt;/p&gt;
&lt;p&gt;目前生物信息学分析平台主要有以下几种:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Galaxy分析平台&lt;/li&gt;
&lt;li&gt;GenePattern分析平台&lt;/li&gt;
&lt;li&gt;DNAnexus分析平台&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href="https://galaxyproject.org"&gt;galaxy&lt;/a&gt;分析平台具有简单易用的特点, 除了有许多开放的公共平台可以使用之外, 搭建自己的平台并且维护其中的流程代码都比较容易, 本文主要介绍如何搭建自维护的平台;&lt;/p&gt;
&lt;h2&gt;初始环境搭建&lt;/h2&gt;
&lt;p&gt;galaxy分析平台基于python2搭建, 所以首先需要搭建好python环境, 这里推荐使用pyenv来管理python环境:&lt;/p&gt;
&lt;p&gt;1.安装pyenv&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;git clone https://github.com/yyuu/pyenv.git ~/.pyenv
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;2.配置pyenv&lt;/p&gt;
&lt;p&gt;编辑&lt;code&gt;~/.bashrc&lt;/code&gt;, 添加以下几条:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nb"&gt;export &lt;/span&gt;&lt;span class="nv"&gt;PYENV_ROOT&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;/usr/local/var/pyenv&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nb"&gt;export &lt;/span&gt;&lt;span class="nv"&gt;PATH&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$PYENV_ROOT&lt;/span&gt;&lt;span class="s2"&gt;/bin:&lt;/span&gt;&lt;span class="nv"&gt;$PATH&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; which pyenv &amp;gt; /dev/null&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;then&lt;/span&gt;
    &lt;span class="nb"&gt;eval&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;pyenv init -&lt;span class="k"&gt;)&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;fi&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;并且令其生效:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nb"&gt;source&lt;/span&gt; ~/.bashrc
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;3.接下来需要安装相应版本的python, 使用如下命令查看可供安装的python版本:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;pyenv install --list
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;由于galaxy暂时不支持py3, 生物信息流程中会大量用到一些科学计算包, 所以推荐使用anaconda2, 如:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;pyenv install anaconda2-2.4.0
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;4.接下来就可以使用pyenv来管理使用python了, 并且使用conda来安装一些常用包, 如&lt;code&gt;biopython&lt;/code&gt;等:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;pyenv global anaconda2-2.4.0
conda install biopython
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;galaxy搭建&lt;/h2&gt;
&lt;p&gt;galaxy的搭建过程非常简单, 官网也给出了&lt;a href="https://wiki.galaxyproject.org/Admin/GetGalaxy"&gt;详细的搭建过程&lt;/a&gt;。这里简单描述一下:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;下载galaxy软件包:&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;git clone https://github.com/galaxyproject/galaxy/ ~/galaxy
&lt;/pre&gt;&lt;/div&gt;


&lt;ol&gt;
&lt;li&gt;切换到稳定版本分支:&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nb"&gt;cd&lt;/span&gt; ~/galaxy
git checkout -b master origin/master
&lt;/pre&gt;&lt;/div&gt;


&lt;ol&gt;
&lt;li&gt;确保python环境, 并且启动服务:&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nb"&gt;cd&lt;/span&gt; ~/galaxy
pyenv &lt;span class="nb"&gt;local &lt;/span&gt;anaconda2-2.4.0
sh run.sh
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;最后一步虽然简单, 但是包含了很多有关python虚拟环境的检查, 以确保整个平台正常运行, 查看&lt;code&gt;run.sh&lt;/code&gt;文件, 可以具体看到整个平台是如何检查环境, 以及调用各种配置的, 方便根据这些过程简化工作。&lt;/p&gt;
&lt;p&gt;等待片刻, 服务启动完成之后查看&lt;a href="http://localhost:8080"&gt;http://localhost:8080&lt;/a&gt;在本地运行的平台。&lt;/p&gt;
&lt;p&gt;此时只是本地版本, 并不能在外部访问, 按&lt;code&gt;ctrl-c&lt;/code&gt;关闭服务后, 修改如下配置:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;cp config/galaxy.ini.sample galaxy.ini
vi galaxy.ini
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;找到host一行, 添加:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;host=0.0.0.0
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;重启服务后, 就可以从外部访问平台了。&lt;/p&gt;</summary><category term="galaxy"></category><category term="bioimpormatics"></category><category term="python"></category></entry><entry><title>树形结构数据可视化展示</title><link href="http://www.lyon0804.com/shu-xing-jie-gou-shu-ju-ke-shi-hua-zhan-shi.html" rel="alternate"></link><updated>2016-01-12T00:00:00+08:00</updated><author><name>lyon</name></author><id>tag:www.lyon0804.com,2016-01-12:shu-xing-jie-gou-shu-ju-ke-shi-hua-zhan-shi.html</id><summary type="html">&lt;h2&gt;树形数据结构&lt;/h2&gt;
&lt;p&gt;树状结构是一种经典的数据类型, 一个树形结构的一层可以用一个父节点以及若干子节点表示, 而若干层这种结构则组成一颗树;&lt;/p&gt;
&lt;p&gt;如一个完全二叉树的例子:
&lt;img alt="完全二叉树" src="https://upload.wikimedia.org/wikipedia/commons/5/57/Binary-tree-structure.png" /&gt;&lt;/p&gt;
&lt;p&gt;节点是树的基本组成, 节点除了层次特征之外, 还可以具有枝长等节点本身的值, 定义一个节点, 如:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Node&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;branch&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;up&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;children&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__branch&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;branch&lt;/span&gt;

    &lt;span class="nd"&gt;@property&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;branch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__branch&lt;/span&gt;

    &lt;span class="nd"&gt;@branch.setter&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;branch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__branch&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;float&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="ne"&gt;ValueError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;pass&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;上述节点具有一个父节点: &lt;code&gt;up&lt;/code&gt;, 以及一个子节点列表: &lt;code&gt;children&lt;/code&gt;, 并且还有自身属性: &lt;code&gt;branch&lt;/code&gt;等, 描述了一个节点基本的元素;&lt;/p&gt;
&lt;p&gt;为了操作节点数据, 需要添加一些常用的方法, 如增删改查等, 如:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Node&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;add_child&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;child&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;branch&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="sd"&gt;        Adds a new child to this node.&lt;/span&gt;
&lt;span class="sd"&gt;        &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;child&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;child&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__class__&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;child&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;branch&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;child&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;branch&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;branch&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;child&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;children&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;children&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;child&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;child&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;up&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;child&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;remove_child&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;child&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="sd"&gt;        Removes a child from this node (parent and child&lt;/span&gt;
&lt;span class="sd"&gt;        nodes still exit but are no longer connected).&lt;/span&gt;
&lt;span class="sd"&gt;        &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
        &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;children&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;remove&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;child&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="ne"&gt;ValueError&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="n"&gt;TreeError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;child not found&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;child&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;up&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;child&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;add_sister&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;sister&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;branch&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="sd"&gt;        Adds a sister to this node.&lt;/span&gt;
&lt;span class="sd"&gt;        &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;up&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="n"&gt;TreeError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;A parent node is required to add a sister&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;up&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_child&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;child&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;sister&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;branch&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;branch&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_sisters&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;include&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="sd"&gt;        Returns an indepent list of sister nodes.&lt;/span&gt;
&lt;span class="sd"&gt;        &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;up&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;include&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;ch&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;ch&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;up&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;children&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
            &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;ch&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;ch&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;up&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;children&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;ch&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;上述方法实现两个最基本操作: 添加节点, 删除节点, 获取节点等;&lt;/p&gt;
&lt;p&gt;树结构具有三种遍历方式: 先序遍历, 中序遍历, 后序遍历; 具体可以参考&lt;a href="https://zh.wikipedia.org/wiki/树的遍历"&gt;维基百科&lt;/a&gt;;&lt;/p&gt;
&lt;p&gt;在Python中可以有如下实现:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;collections&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;deque&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;TreeError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ne"&gt;Exception&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="sd"&gt;    A problem occurred during a TreeNode operation&lt;/span&gt;
&lt;span class="sd"&gt;    &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__str__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;repr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Node&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;is_leaf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="sd"&gt;        Return True if current node is a leaf.&lt;/span&gt;
&lt;span class="sd"&gt;        &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;children&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;_iter_descendants_postorder&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;is_leaf_fn&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;to_visit&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;is_leaf_fn&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;_leaf&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;is_leaf_fn&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;_leaf&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__class__&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_leaf&lt;/span&gt;

        &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="n"&gt;to_visit&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;node&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;to_visit&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pop&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="n"&gt;node&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
            &lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="ne"&gt;TypeError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="c"&gt;# PREORDER ACTIONS&lt;/span&gt;
                &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;_leaf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
                    &lt;span class="c"&gt;# ADD CHILDREN&lt;/span&gt;
                    &lt;span class="n"&gt;to_visit&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;extend&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;reversed&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;children&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="p"&gt;[[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="p"&gt;]]))&lt;/span&gt;
                &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                    &lt;span class="k"&gt;yield&lt;/span&gt; &lt;span class="n"&gt;node&lt;/span&gt;
            &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="c"&gt;# POSTORDER ACTIONS&lt;/span&gt;
                &lt;span class="k"&gt;yield&lt;/span&gt; &lt;span class="n"&gt;node&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;_iter_descendants_levelorder&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;is_leaf_fn&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="sd"&gt;        Iterate over all desdecendant nodes.&lt;/span&gt;
&lt;span class="sd"&gt;        &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
        &lt;span class="n"&gt;to_visit&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;deque&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
        &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;to_visit&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;node&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;to_visit&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;popleft&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
            &lt;span class="k"&gt;yield&lt;/span&gt; &lt;span class="n"&gt;node&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;is_leaf_fn&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;is_leaf_fn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
                &lt;span class="n"&gt;to_visit&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;extend&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;children&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;_iter_descendants_preorder&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;is_leaf_fn&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="sd"&gt;        Iterator over all descendant nodes.&lt;/span&gt;
&lt;span class="sd"&gt;        &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
        &lt;span class="n"&gt;to_visit&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;deque&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="n"&gt;node&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;
        &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="n"&gt;node&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;yield&lt;/span&gt; &lt;span class="n"&gt;node&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;is_leaf_fn&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;is_leaf_fn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
                &lt;span class="n"&gt;to_visit&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;extendleft&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;reversed&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;children&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
            &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="n"&gt;node&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;to_visit&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;popleft&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
            &lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="ne"&gt;IndexError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="n"&gt;node&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;traverse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;strategy&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;levelorder&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;is_leaf_fn&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="sd"&gt;        Returns an iterator to traverse the tree structure under this&lt;/span&gt;
&lt;span class="sd"&gt;        node.&lt;/span&gt;
&lt;span class="sd"&gt;        &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;strategy&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;preorder&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_iter_descendants_preorder&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;is_leaf_fn&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;is_leaf_fn&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="n"&gt;strategy&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;levelorder&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_iter_descendants_levelorder&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;is_leaf_fn&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;is_leaf_fn&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="n"&gt;strategy&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;postorder&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_iter_descendants_postorder&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;is_leaf_fn&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;is_leaf_fn&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;上述方法描述了一个对树形结构的三种遍历方式, 在树形结构的遍历, 查找, 删除等等操作基础上, 可以实现更加复杂的树形结构操作;&lt;/p&gt;
&lt;h2&gt;newick格式&lt;/h2&gt;
&lt;p&gt;&lt;a href="http://evolution.genetics.washington.edu/phylip/newicktree.html"&gt;newick&lt;/a&gt;则是为了计算机友好的树形结构展示, 在1857年由英国数学家&lt;a href="http://www-history.mcs.st-andrews.ac.uk/history/Biographies/Cayley.html"&gt;Arthur Cayley&lt;/a&gt;提出;&lt;/p&gt;
&lt;p&gt;这种结构使用一个括号来表示一个节点:&lt;/p&gt;
&lt;p&gt;如:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;()demo1
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;表示一个名称为demo1的节点, 前面的括号表示具有若干子节点, 如:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;(child1, child2)demo1
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;表示demo1节点以及他的两个子节点, 子节点之间使用逗号&lt;code&gt;,&lt;/code&gt;分隔, 节点除了名字之外, 也可以拥有枝长的属性, 使用冒号可以给节点赋予该属性, 如:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;(child1: 5, child2: 2)demo1: 6
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;多个上述节点可以组成树, 树必须由单个根节点出发, 并向下延伸, 在末尾添加分号&lt;code&gt;;&lt;/code&gt;表示树, 如:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;((&lt;/span&gt;&lt;span class="nt"&gt;child1&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nt"&gt;5&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;child2&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nt"&gt;2&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="nt"&gt;demo1&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nt"&gt;6&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nt"&gt;child3&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nt"&gt;3&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;child4&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nt"&gt;3&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;child5&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nt"&gt;2&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="nt"&gt;demo2&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nt"&gt;1&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;上述描述了一颗匿名树, 树的根节点名称被隐藏, 并直接在节点后面加上分号表示结尾;&lt;/p&gt;
&lt;p&gt;以上就是newick格式的结构, 其表示非常简单明了, 并且易于被计算机所接受, 如在前面的节点结构上, 只需加入简单的方法, 即可完成newick格式的输出:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Tree&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;root&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__root_node&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;TreeNode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;root&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;level&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;root&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__root_node&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;root&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__root_node&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;tree&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;nodes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;defaultdict&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;TreeNode&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;nodes&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;root&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;root&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__str__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;;&amp;#39;&lt;/span&gt;

    &lt;span class="nd"&gt;@property&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;root&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__root_node&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Node&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__str__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;children&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;(&amp;#39;&lt;/span&gt;
            &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;,&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;children&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
            &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;)&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;

        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;上述过程描述了一个节点的递归生成newick格式过程, 以及树形结构的newick格式即根节点之后添加一个分号;&lt;/p&gt;
&lt;h2&gt;利用ete3做树形结构可视化&lt;/h2&gt;
&lt;p&gt;newick格式是计算机友好的格式, 但是却不利于我们人类观察树形结构的特点, 将newick格式进行可视化操作, 绘制出漂亮的图表显得尤为重要;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://etetoolkit.org"&gt;ETE&lt;/a&gt;工具旨在解决newick格式的可视化展示问题, 该工具提供了很多可视化特性, 除了基本的树结构, 枝长, 节点大小等之外, ETE包支持在节点上添加各种Face, 更好描述一个节点的特性, 如:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;TextFace&lt;/code&gt;: 文字描述, 可以在节点的枝上各个位置添加介绍性文字或者数据;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;CirCleFace&lt;/code&gt;: 圆形图标, 可以在节点的某些位置添加圆形图标, 并利用半径, 面积等图形特性描述一个节点的数据特征;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;PieCharFace&lt;/code&gt;: 饼图, 可以在节点某些位置添加饼图, 配合相应的说明, 描述一个节点的数据组成特征;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ImgFace&lt;/code&gt;: 图形, 可以在节点的某些位置添加图形, 使用直观的图形来描述一个节点的性状特征;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;TreeFace&lt;/code&gt;: 子树, 在叶节点上添加绘制子树, 某些情况下可以更清晰描述一个树的层次结构;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;等等;&lt;/p&gt;
&lt;p&gt;在&lt;a href="http://etetoolkit.org/docs/latest/"&gt;官方文档&lt;/a&gt;中对其说明有详细描述;&lt;/p&gt;
&lt;p&gt;以及&lt;a href="http://etetoolkit.org/gallery/"&gt;官方示例&lt;/a&gt;中也展示了一些可以做出的结果示例;&lt;/p&gt;
&lt;p&gt;在&lt;a href="https://github.com/lozybean/newick_plot"&gt;这个项目&lt;/a&gt;里面, 示范了从创建newick到可视化展示的全部过程, 详细代码在里面可以找到;&lt;/p&gt;
&lt;p&gt;示例结果如:&lt;/p&gt;
&lt;p&gt;&lt;img alt="示例结果1" src="http://ww3.sinaimg.cn/large/95202659gw1ezws3gpwxgj21ig0oxtfk.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="示例结果2" src="http://ww1.sinaimg.cn/large/95202659gw1ezws3hfl7bj21kd1av46o.jpg" /&gt;&lt;/p&gt;</summary><category term="Python"></category><category term="ete3"></category><category term="newick"></category></entry><entry><title>JavaScript表单</title><link href="http://www.lyon0804.com/javascriptbiao-dan.html" rel="alternate"></link><updated>2015-12-07T00:00:00+08:00</updated><author><name>lyon</name></author><id>tag:www.lyon0804.com,2015-12-07:javascriptbiao-dan.html</id><summary type="html">&lt;h2&gt;理解表单&lt;/h2&gt;
&lt;p&gt;表单在HTML中使用&amp;lt;form&amp;gt;元素表示, 对应在JavaScript中为HTMLFormElement类型, 该类型继承HTMLElement, 并且拥有以下特有属性或方法:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;acceptCharset&lt;/code&gt;: 服务器能够处理的字符集;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;action&lt;/code&gt;: 接受请求的URL;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;elements&lt;/code&gt;: 表单中所有控件的集合;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;enctype&lt;/code&gt;: 请求的编码类型;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;length&lt;/code&gt;: 表单中控件的数量;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;method&lt;/code&gt;: 要发送的HTTP类型;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;name&lt;/code&gt;: 表单的名称;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;target&lt;/code&gt;: 用于发送请求和接收响应的窗口名称;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;reset()&lt;/code&gt;: 将所有表单域重置为默认值;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;submit()&lt;/code&gt;: 提交表单;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;除了使用&lt;code&gt;getElementById()&lt;/code&gt;等方式获取表单元素之外, &lt;code&gt;document.forms&lt;/code&gt;可以一次性获取页面中的所有表单;&lt;/p&gt;
&lt;p&gt;有两种方式可以提交表单, 一种是通过创建&lt;code&gt;submit&lt;/code&gt;按钮,&lt;/p&gt;</summary><category term="javascript"></category></entry><entry><title>JavaScript事件</title><link href="http://www.lyon0804.com/javascriptshi-jian.html" rel="alternate"></link><updated>2015-12-03T00:00:00+08:00</updated><author><name>lyon</name></author><id>tag:www.lyon0804.com,2015-12-03:javascriptshi-jian.html</id><summary type="html">&lt;p&gt;事件实现了HTML和JavaScript之间的交互工作;&lt;/p&gt;
&lt;h2&gt;事件流&lt;/h2&gt;
&lt;p&gt;当一个事件发生时, 不仅仅发生在某个元素上, 同时也在该元素的容器上发生, 为了描述接收事件的顺序, 引入了&lt;strong&gt;事件流&lt;/strong&gt;的概念, 由于历史原因, IE和Netscape浏览器在事件流的描述上采用完全不同的顺序: &lt;strong&gt;事件冒泡&lt;/strong&gt;和&lt;strong&gt;事件捕获&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;事件冒泡: 表示事件开始由具体元素接收, 然后逐级向上传播;&lt;/li&gt;
&lt;li&gt;事件捕获: 表示上级元素最先接收到事件, 最具体的元素最后接收;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;而DOM事件流则将事件过程描述为三个阶段:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;事件捕获阶段: 该阶段发生事件捕获, 从上级元素开始逐级往下传递;&lt;/li&gt;
&lt;li&gt;处于目标阶段: 实际目标在该阶段接收到事件;&lt;/li&gt;
&lt;li&gt;事件冒泡阶段: 该阶段发生事件响应, 从实际目标开始逐级冒泡;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;事件处理&lt;/h2&gt;
&lt;p&gt;用户或者浏览器执行的某种动作称为事件, 常用的如: click、mouseover、load等; 响应这些事件的函数就成为事件处理函数, 这些函数以&lt;code&gt;on&lt;/code&gt;开头, 后面跟着事件名称, 如: &lt;code&gt;onclick&lt;/code&gt;就是一个对click事件的事件处理函数;&lt;/p&gt;
&lt;h3&gt;HTML事件处理&lt;/h3&gt;
&lt;p&gt;在HTML元素中添加事件处理函数特性, 即可完成事件处理, 如:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;button&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;value=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Click Me&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;onclick=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;alert(&amp;#39;Clicked&amp;#39;)&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;上述HTML定义一个按钮, 并且具有onclick特性, 该特性即是一个事件处理函数, 该函数可以如上述直接描述函数体, 也可以引用其他页面定义的函数;&lt;/p&gt;
&lt;p&gt;当引用其他页面(如js脚本)中的函数时, 如果该页面没有加载完成, 就会引发错误, 为了隐藏错误, 需要对其进行异常处理:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;button&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;value=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Click Me&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;onclick=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;try{showMessage();}catch(ex){}&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;HTML事件处理比较直接, 但是缺点非常明显, 除了以上缺点之外, 由于不同js引擎对标识符的处理差异等也会引发一些错误;&lt;/p&gt;
&lt;p&gt;更加严重的问题是: 通过HTML做事件处理, 使得HTML和JavaScript形成紧密耦合, 一旦该事件需要跟新, 则同时需要更新HTML和JavaScript两份代码, 不利于维护;&lt;/p&gt;
&lt;h3&gt;DOM级处理程序&lt;/h3&gt;
&lt;p&gt;为了解决上述不足, 通过JavaScript指定事件处理是比较好的方法;&lt;/p&gt;
&lt;p&gt;DOM实现事件处理时, 其实就是操作元素的事件处理程序属性:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;element_input&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;click&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;element_input&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;onclick&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;alert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;如上实例, 通过操作元素的属性来为元素添加事件处理程序, 如果要删除某个事件, 也仅仅需要将事件处理程序设为&lt;code&gt;null&lt;/code&gt;即可;&lt;/p&gt;
&lt;p&gt;DOM2级事件处理在此基础上为元素定义了两个方法:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;addEventListener(element, function, boolean)&lt;/code&gt;: 该方法为指定事件添加指定的处理程序, 第三个参数为&lt;code&gt;true&lt;/code&gt;时表示在捕获阶段调用, &lt;code&gt;false&lt;/code&gt;时表示在冒泡阶段调用;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;removeEventListener(element, function, boolean)&lt;/code&gt;: 该方法移除指定事件的指定处理程序;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;通过第一个方法添加的事件处理程序, 只能通过第二个方法删除, 并且需要接收相同的函数对象, 这意味着如果是匿名处理程序, 则会导致事件处理程序无法删除;&lt;/p&gt;
&lt;p&gt;一般而言, 在冒泡阶段处理事件能够有更好的兼容性, 除非必须在事件到达目标之前就截获时才使用捕获阶段处理;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;showMessage&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;alert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;I have been clicked&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;element_input&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;click&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;element_input&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;click&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;showMessage&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;element_input&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;removeEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;click&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;showMessage&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;而在IE浏览器中, 则实现了类似上述的事件处理程序: &lt;code&gt;attachEvent()&lt;/code&gt;和&lt;code&gt;detachEvent()&lt;/code&gt;, 由于IE8之前版本只支持事件冒泡, 这两个方法接收两个参数;&lt;/p&gt;
&lt;p&gt;为了在不同浏览器中能够兼容使用事件处理, 最好通过以下方法做功能检查:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;EventUtil&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;addHandler&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;element&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;handler&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;element&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;element&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;handler&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;element&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;attachEvent&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;element&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;attachEvent&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;on&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;handler&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;element&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;on&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;handler&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="nx"&gt;removeHandler&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;element&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;handler&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;element&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;removeEventListener&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;element&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;removeEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;handler&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;element&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;detachEvent&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;element&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;detachEvent&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;on&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;handler&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;element&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;on&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;上述方法将按照: DOM2 -&amp;gt; IE -&amp;gt; DOM 的顺序选择事件处理方法;&lt;/p&gt;
&lt;h2&gt;事件对象&lt;/h2&gt;
&lt;p&gt;使用DOM处理事件时, 无论使用哪种方法, 都会传入一个event对象:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;showMessage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;alert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;element_input&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;click&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;EventUtil&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addHandler&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;element_input&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;click&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;showMessage&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;  &lt;span class="c1"&gt;// [object MouseEvent]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这些event对象根据事件类型不同而具有不同的方法, 但是都会具有以下属性的方法:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;type&lt;/code&gt;: 触发事件的类型;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;bubbles&lt;/code&gt;: 表名事件是否冒泡;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;cancelable&lt;/code&gt;: 表名是否可以取消事件的默认行为;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;currentTarget&lt;/code&gt;: 当前正在处理事件的元素;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;target&lt;/code&gt;: 事件的目标元素;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;defaultPrevented&lt;/code&gt;: 表名是否已经调用了preventDefault()方法;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;detail&lt;/code&gt;: 与事件相关的细节信息;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;eventPhase&lt;/code&gt;: 表示事件处理的阶段: 1,捕获阶段; 2,处于阶段; 3,冒泡阶段;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;trusted&lt;/code&gt;: true表示该事件是浏览器生成的, false表示是开发人员通过JavaScript创建的;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;view&lt;/code&gt;: 与事件关联的抽象视图, 相当于发生事件的window对象;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;preventDefault()&lt;/code&gt;: 取消事件的默认行为;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;stopImmediatePropagation()&lt;/code&gt;: 取消事件的进一步获取或者冒泡, 同时阻止任何事件处理程序被调用;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;stopPropagation()&lt;/code&gt;: 取消事件的进一步获取或者冒泡;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;以上属性方法都是只读的, 通过访问某些属性可以获取到事件的详细信息, 便于做出处理;&lt;/p&gt;
&lt;p&gt;如, 当一个元素具有多个事件时, 可以通过&lt;code&gt;type&lt;/code&gt;属性判断, 并分别处理:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;handler&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;switch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;click&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
            &lt;span class="nx"&gt;alert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Clicked&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;mouseover&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
            &lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;backgroundColor&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;red&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;mouseout&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
            &lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;backgroundColor&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;element_input&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;click&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;EventUtil&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addHandler&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;element_input&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;click&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;handler&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;EventUtil&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addHandler&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;element_input&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;mouseover&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;handler&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;EventUtil&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addHandler&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;element_input&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;mouseout&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;handler&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;由于事件的处理是通过冒泡的方式进行的, 所以事件处理程序可能并不属于元素本身, 而可能是元素的上一级元素;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;showMessage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;alert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;currentTarget&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39; &amp;#39;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nx"&gt;EventUtil&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addHandler&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;click&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;showMessage&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;  &lt;span class="c1"&gt;// [object HTMLBodyElement] [object HTMLInputElement]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;在事件处理时, input元素并没有事件处理程序, 于是向上冒泡, 直到在body中找到该事件的处理程序, 此时, this对象为body, 而真实处理的对象target则是input;&lt;/p&gt;
&lt;p&gt;当input和body中都存在事件处理程序时, 通过事件冒泡会依次执行, 通过&lt;code&gt;stopPropagation()&lt;/code&gt;方法可以停止进一步冒泡;&lt;/p&gt;
&lt;p&gt;同样的, IE浏览器在处理事件对象时, 对这些属性方法的使用有所不同, 和前文相同, 需要对不同浏览器进行功能检查并且适配;&lt;/p&gt;
&lt;p&gt;更加完整的&lt;code&gt;EventUtil&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;EventUtil&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;addHandler&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;element&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;handler&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;element&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;element&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;handler&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;element&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;attachEvent&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;element&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;attachEvent&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;on&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;handler&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;element&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;on&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;handler&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="nx"&gt;removeHandler&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;element&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;handler&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;element&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;removeEventListener&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;element&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;removeEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;handler&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;element&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;detachEvent&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;element&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;detachEvent&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;on&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;handler&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;element&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;on&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="nx"&gt;getEvent&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;event&lt;/span&gt; &lt;span class="o"&gt;?&lt;/span&gt; &lt;span class="nx"&gt;event&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="nx"&gt;getTarget&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;target&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="nx"&gt;evnet&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;srcElement&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="nx"&gt;preventDefault&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;preventDefault&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;preventDefault&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;returnValue&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="nx"&gt;stopPropagation&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;stopPropagation&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;stopPropagation&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;cancelBubble&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;事件类型&lt;/h2&gt;
&lt;p&gt;以下讨论具体的各种事件类型, 其具体类型以及触发条件为:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;UI事件, 当用户与页面的元素交互时触发;&lt;/li&gt;
&lt;li&gt;焦点事件, 当元素获得或者失去焦点时触发;&lt;/li&gt;
&lt;li&gt;鼠标事件, 当使用鼠标在页面上执行操作时触发;&lt;/li&gt;
&lt;li&gt;滚轮事件, 当使用滚轮或者类似设备时触发;&lt;/li&gt;
&lt;li&gt;文本事件, 当文档中输入文本时触发;&lt;/li&gt;
&lt;li&gt;键盘事件, 当用户通过键盘在页面上执行操作时触发;&lt;/li&gt;
&lt;li&gt;合成事件, 当为IME(输入法编辑器)输入字符时触发;&lt;/li&gt;
&lt;li&gt;变动事件, 当底层DOM结构发生变化时触发;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这些事件在DOM2和DOM3级别可能有所不同, 具体需要结合文档查看最新支持的情况;&lt;/p&gt;
&lt;h3&gt;UI事件&lt;/h3&gt;
&lt;p&gt;UI事件往往和window对象或者表单控件有关, 包括文档的加载与卸载事件、错误事件、窗口大小改变、窗口滚动带动元素、选择文本框等等;&lt;/p&gt;
&lt;h4&gt;1. load&lt;/h4&gt;
&lt;p&gt;当页面完成加载后(包括图像、CSS、JS等外部资源), load事件将被触发, 该事件常用来检查页面是否完整加载, 以便脚本操作其中元素, DOM2中规定该事件应该从document上触发, 可是为了兼容性等问题, 往往浏览器都会在window上实现该事件:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nx"&gt;EventUtil&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addHandler&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;load&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;image&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createElement&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;img&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;EventUtil&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addHandler&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;image&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;load&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;event&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;EventUtil&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getEvent&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="nx"&gt;alert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;EventUtil&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getTarget&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;src&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
    &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;appendChild&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;image&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;image&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;src&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;smile.gif&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;以上例程中, 首先为window添加load事件, 并当其加载完成后添加image元素到DOM中;&lt;/p&gt;
&lt;p&gt;需要注意的是, 图像和其他资源加载的条件并不相同:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;img&amp;gt;&lt;/code&gt;元素在指定src属性之后就会立即开始图像下载, 而不一定需要先添加到文档中, 因此, src属性应该在事件处理程序之后添加;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt;、&lt;code&gt;&amp;lt;link&amp;gt;&lt;/code&gt;元素指定外部资源时, 只有当该元素被添加到文档, 并且设置了src属性后才会开始加载, 因此, src属性和事件处理程序的先后顺序没有必要区分;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;所以上述例程将src属性放到最后指定;&lt;/p&gt;
&lt;h4&gt;2. unload&lt;/h4&gt;
&lt;p&gt;unload事件当整个文档被卸载后触发(从一个页面切换到另外一个页面), 利用这个事件可以进行引用的清除, 以免内存泄露;&lt;/p&gt;
&lt;p&gt;而由于该事件是文档卸载后才触发, 此时页面加载后的对象已经不一定存在, 如果直接操作DOM节点或者样式将会出现错误;&lt;/p&gt;
&lt;h4&gt;3. resize&lt;/h4&gt;
&lt;p&gt;resize事件当窗口大小被调整到新的宽度和高度时触发, 多数浏览器会在窗口变化1像素时就触发, 由于触发可能非常频繁, 因此不可以在该事件的处理程序中添加计算量较大的代码, 以免浏览器反应变慢;&lt;/p&gt;
&lt;h4&gt;4. scroll&lt;/h4&gt;
&lt;p&gt;scroll事件当文档被滚动期间触发, 通过监控&amp;lt;body&amp;gt;元素的scrollLeft和scrollTop这两个属性可以监控当前位置; 除了Safari之外的浏览器都将通过&amp;lt;html&amp;gt;元素来描述该变化, 为了浏览器间兼容, 应该做以下判断:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nx"&gt;EventUtil&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addHandler&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;scroll&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;compatMode&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;CSS1Compat&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;alert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;documentElement&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;scrollTop&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;alert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;scrollTop&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;和resize事件一样, scroll事件也会被频繁触发, 因此应该尽量保持事件处理程序简单;&lt;/p&gt;
&lt;h3&gt;焦点事件&lt;/h3&gt;
&lt;p&gt;该事件当元素在页面元素获得或者失去焦点时触发, 和document.hasFocus()方法以及document.activeElement属性配合使用, 可以跟踪用户在页面上的行为; 主要包括以下六个事件:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;focusout&lt;/code&gt;: 元素失去焦点时触发, 并向上冒泡;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;focusin&lt;/code&gt;: 元素获得焦点时触发, 并向上冒泡;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;blur&lt;/code&gt;: 元素失去焦点时触发, 不会冒泡;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;DOMFocusOut&lt;/code&gt;: 元素失去焦点时触发, 只有Opera支持, DOM3中废弃;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;focus&lt;/code&gt;: 元素获取焦点时触发, 不会冒泡;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;DOMFocusIn&lt;/code&gt;: 元素获取焦点时触发, 只有Opera支持, DOM3中废弃;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;当焦点从一个元素转向另外一个元素时, 这六个事件依次触发;&lt;/p&gt;
&lt;p&gt;通过以下方法可以检查浏览器是否支持这些事件:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;isSupported&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;implementation&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;hasFeature&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;FocusEvent&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;3.0&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;鼠标和滚轮事件&lt;/h3&gt;
&lt;p&gt;鼠标作为最重要的定位设备, 其事件也因此非常重要, 主要有以下事件:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;mousedown&lt;/code&gt;: 按下鼠标时触发;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;mouseup&lt;/code&gt;: 松开鼠标时触发;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;click&lt;/code&gt;: 单击主鼠标按钮时触发; 可以通过键盘触发;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;dblclick&lt;/code&gt;: 双击主鼠标按钮时触发; DOM3支持;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;mouseenter&lt;/code&gt;: 鼠标光标从元素外部移动到元素范围内触发; 进入子元素不触发; 该事件不冒泡; DOM3支持;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;mouseleave&lt;/code&gt;: 鼠标光标从元素内部移动到元素范围外触发; 离开子元素不触发; 该事件不冒泡; DOM3支持;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;mouseover&lt;/code&gt;: 鼠标光标从元素外部移动到元素或者其子元素时触发;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;mouseout&lt;/code&gt;: 鼠标光标从元素或者其子元素移动到元素外部时触发;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;mousemove&lt;/code&gt;: 鼠标指针在元素内部移动时, 反复触发;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;其中, 只有mouseenter和mouseleave不冒泡, 只有click通过键盘可以触发;&lt;/p&gt;
&lt;h4&gt;按钮和点击&lt;/h4&gt;
&lt;p&gt;由于鼠标上有多个按钮, 为了判断哪个按钮被按下, DOM给&lt;code&gt;mousedown&lt;/code&gt;和&lt;code&gt;mouseup&lt;/code&gt;事件添加了&lt;code&gt;button&lt;/code&gt;属性, 该属性只有三个值: 0:鼠标主按钮, 1:鼠标中间按钮, 2:鼠标副按钮; 而IE浏览器中, 该属性的值就比较复杂:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;0: 没有按下任何按钮;&lt;/li&gt;
&lt;li&gt;1: 按下主按钮;&lt;/li&gt;
&lt;li&gt;2: 按下副按钮;&lt;/li&gt;
&lt;li&gt;3: 同时按下主、副按钮;&lt;/li&gt;
&lt;li&gt;4: 按下中间按钮;&lt;/li&gt;
&lt;li&gt;5: 同时按下主按钮和中间按钮;&lt;/li&gt;
&lt;li&gt;6: 同时按下副按钮和中间按钮;&lt;/li&gt;
&lt;li&gt;7: 同时按下三个按钮;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;通过检查是否支持DOM2来判断使用那一个模型;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;isDOM2Supported&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;implementation&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;hasFeatrue&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;MouseEvents&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;2.0&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;按钮点击的同时, 事件对象具有&lt;strong&gt;修改键&lt;/strong&gt;属性:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;shiftKey&lt;/code&gt;: 表示鼠标事件发生时shift按键是否被按下;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ctrlKey&lt;/code&gt;: 表示鼠标事件发生时ctrl按键是否被按下;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;altKey&lt;/code&gt;: 表示鼠标事件发生时alt按键是否被按下;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;metaKey&lt;/code&gt;: 表示鼠标事件发生时, meta按键(windows下为win键, mac下为cmd键)是否被按下;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;只有在同一个元素上相继触发mousedown和mouseup, click事件才会被触发; 也只有当触发两次click之后, dblclick才会触发; 这四个事件的触发顺序为:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;mousedown&lt;/li&gt;
&lt;li&gt;mouseup&lt;/li&gt;
&lt;li&gt;click&lt;/li&gt;
&lt;li&gt;mousedown&lt;/li&gt;
&lt;li&gt;mouseup&lt;/li&gt;
&lt;li&gt;click&lt;/li&gt;
&lt;li&gt;dblclick&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;如果中间有中断, 则后续事件将不再触发;&lt;/p&gt;
&lt;h4&gt;鼠标移动&lt;/h4&gt;
&lt;p&gt;判断鼠标是否移入元素有四个方法, 这四个方法分成两对, 其中mouseenter和mouseleave只在移动到元素中或者移除元素外才触发, 而mouseover和mouseout则当鼠标移动到元素或者子元素时触发;&lt;/p&gt;
&lt;p&gt;mouseover和mouseout事件具有额外的相关元素属性: &lt;code&gt;relatedTarget&lt;/code&gt;, 当mouseover触发时, 主目标是获得光标的元素, 而相关元素就是失去光标的元素; mouseout反之;该属性在IE8之前不支持, 并使用&lt;code&gt;fromElement&lt;/code&gt;和&lt;code&gt;toElement&lt;/code&gt;属性保存, 兼容获取该属性的方法为:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;getRelatedTarget&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;relatedTarget&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;relatedTarget&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toElement&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toElement&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;fromElement&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;fromElement&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;通过以下方法检查鼠标事件是否被支持:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;isDOM2Supported&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;implementation&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;hasFeature&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;MouseEvents&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;2.0&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;isDOM3Supported&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;implementation&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;hasFeature&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;MouseEvent&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;3.0&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;注意DOM3中事件名称为MouseEvent;&lt;/p&gt;
&lt;p&gt;鼠标事件触发后, 可以通过以下属性获取光标的位置:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;clientX&lt;/code&gt;, &lt;code&gt;clientY&lt;/code&gt;: 这两个属性表示鼠标光标相对浏览器的水平和垂直坐标;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;pageX&lt;/code&gt;, &lt;code&gt;pageY&lt;/code&gt;: 这两个属性表示鼠标光标相对文档的水平和垂直坐标; IE8及更早版本不支持;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;screenX&lt;/code&gt;, &lt;code&gt;screenY&lt;/code&gt;: 这两个属性表示鼠标光标相对整个屏幕的水平和垂直坐标;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;以上属性的水平坐标都是从左边缘计算的位置, 垂直坐标都是从上边缘计算的位置; 和scrollLeft和scrollTop对应;&lt;/p&gt;
&lt;p&gt;虽然IE8以及早期版本不支持文档位置属性, 但是可以通过浏览器位置以及滚动的信息计算出来:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nx"&gt;EventUtil&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addHandler&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;element&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;click&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
    &lt;span class="nx"&gt;event&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;EventUtil&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getEvent&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;pageX&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pageX&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;pageY&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pageY&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;pageX&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="kc"&gt;undefined&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
        &lt;span class="nx"&gt;pageX&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;clientX&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;scrollLeft&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;documentElement&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;scrollLeft&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;pageY&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="nx"&gt;undefiend&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
        &lt;span class="nx"&gt;pageY&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;clientY&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;scrollTop&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;documentElement&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;scrollTop&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;滚轮&lt;/h4&gt;
&lt;p&gt;不同浏览器对鼠标滚轮的方法支持并不相同, 通过以下方法可以做到兼容:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;getWheelDelta&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;wheelDelta&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;client&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;engine&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;opera&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;client&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;engine&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;opera&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mf"&gt;9.5&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
            &lt;span class="c1"&gt;// opera 9.5 之前版本方向和其他浏览器相反&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;wheelDelta&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="c1"&gt;// IE、Chrome、Safari、opera 9.5之后版本&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;wheelDelta&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;// firefox&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;detail&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;40&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;其他注意点&lt;/h4&gt;
&lt;p&gt;由于移动设备的特殊性, 在给iOS的Safari开发时, 应该注意以下几点:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;不支持dblclick;&lt;/li&gt;
&lt;li&gt;轻击可单击的元素可以触发mousemove事件; 如果屏幕因此变化, 则不再有任何事件发生, 否则一次触发mousedown、mouseup、click;&lt;/li&gt;
&lt;li&gt;轻击不可单机的元素不会触发任何事件;&lt;/li&gt;
&lt;li&gt;mousemove事件也会触发mouseover和mouseout事件;&lt;/li&gt;
&lt;li&gt;两个手指滚动页面时, 触发mousewheel和scroll事件;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;尽量选择使用&lt;code&gt;click&lt;/code&gt;事件;&lt;/p&gt;
&lt;h3&gt;键盘与文本事件&lt;/h3&gt;
&lt;p&gt;当用户使用键盘时会触发该事件, 不同浏览器的表现差异较大;&lt;/p&gt;
&lt;p&gt;主要有三个事件:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;keydown&lt;/code&gt;: 按下任意键时触发, 如果不松开, 则重复触发;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;keypress&lt;/code&gt;: 按下任意字符按键时触发, 如果不松开, 则重复触发;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;keyup&lt;/code&gt;: 释放键盘上的按键时触发;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;同时也支持修改键属性(IE不支持metaKey);&lt;/p&gt;
&lt;p&gt;当触发keydown和keyup事件时, 事件可以获得一个keyCode属性表示键盘上对应按键的编码;&lt;/p&gt;
&lt;p&gt;而当keypress事件触发时, 还会获得charCode编码表示字符对应的ASCII编码, 而IE和opera早期浏览器则仍然在keyCode属性中保存其ASCII编码;&lt;/p&gt;
&lt;p&gt;DOM3中新增key和char属性来替换charCode, 但是不同浏览器之间支持的差异较大;&lt;/p&gt;
&lt;p&gt;DOM3还新增了&lt;code&gt;textInput&lt;/code&gt;事件, 该事件当用户在可输入区域中输入字符时触发; 该事件具有两个属性:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;data&lt;/code&gt;: 保存输入字符;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;inputMethod&lt;/code&gt;: 保存输入的来源;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;复合事件&lt;/h3&gt;
&lt;p&gt;复合事件是DOM3中添加的事件, 主要用于处理IME文本复合系统, 浏览器支持较少, 检查支持方式为:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;isSupported&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;implementation&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;hasFeature&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;CompositionEvent&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;3.0&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;变动事件&lt;/h3&gt;
&lt;p&gt;变动事件在DOM的某一部分发生变化时触发, 有很多变动事件已经在DOM3中作废并且不推荐使用, 仍然支持的事件主要有:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;DOMNodeRemoved&lt;/code&gt;: 当子节点在父节点中被移除时触发, 事件属性relatedNode为父节点;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;DOMNodeRemovedFromDocument&lt;/code&gt;: 当节点在文档中移除时触发, 该事件不冒泡;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;DOMNodeInserted&lt;/code&gt;: 在一个子节点插入到父节点时触发, 事件属性relatedNode为父节点;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;DOMInsertedIntoDocument&lt;/code&gt;: 当节点被插入到文档中时触发, 该事件不冒泡;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;DOMSubtreeModified&lt;/code&gt;: 在DOM结构中发生任何变化时触发, 任何以上事件触发后都会触发该事件;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;HTML5事件&lt;/h3&gt;
&lt;p&gt;HTML5给出了很多浏览器应该支持的事件, 有一些已经得到完善支持, 有一些还没有; 使用前应该做好文档查阅和功能检查的工作;&lt;/p&gt;
&lt;h4&gt;1. contextmenu&lt;/h4&gt;
&lt;p&gt;上下文菜单事件, 该事件当鼠标点击或者修饰键加鼠标点击时触发, 属于鼠标事件, 该事件中包含鼠标事件的属性; 通过设置该事件的处理程序, 可以自定义上下文菜单;&lt;/p&gt;
&lt;p&gt;以书上例子为例:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="cp"&gt;&amp;lt;!DOCTYPE HTML PUBLIC &amp;quot;-//W3C//DTD HTML 4.01//EN&amp;quot; &amp;quot;http://www.w3.org/TR/html4/strict.dtd&amp;quot;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;html&lt;/span&gt; &lt;span class="na"&gt;lang=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;en&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;http-equiv=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Content-Type&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;text/html;charset=UTF-8&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;title&amp;gt;&lt;/span&gt;ContextMenu Event Example&lt;span class="nt"&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;myDiv&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Right click or Ctrl+click me to get a custom context menu.
    Click anywhere else to get the default context menu.
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;ul&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;myMenu&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;style=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;position:absolute; visibility: hidden; background-color: silver&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;li&amp;gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;http://www.nczonline.net&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Nicholas&amp;#39; site&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;li&amp;gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;http://www.wrox.com&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Wrox site&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;li&amp;gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;http://www.yahoo.com&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Yahoo!&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/ul&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;learn_event.js&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c1"&gt;// include EventUtil;&lt;/span&gt;
&lt;span class="nx"&gt;EventUtil&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addHandler&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;load&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;myDiv&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;EventUtil&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addHandler&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;contextmenu&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;event&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;EventUtil&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getEvent&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="nx"&gt;EventUtil&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;preventDefault&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;menu&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;myMenu&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="nx"&gt;menu&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;left&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;clientX&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;px&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nx"&gt;menu&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;top&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;clientY&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;px&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nx"&gt;menu&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;visibility&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;visible&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
    &lt;span class="nx"&gt;EventUtil&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addHandler&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;click&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;myMenu&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;visibility&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;hidden&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;2. beforeunload&lt;/h4&gt;
&lt;p&gt;beforeunload在页面卸载之前触发, 该事件会弹出一个对话框, 询问是否确定离开, 事件的returnValue属性表示对话框显示的文字内容;&lt;/p&gt;
&lt;h4&gt;3. DOMContentLoaded&lt;/h4&gt;
&lt;p&gt;DOMContentLoaded事件在形成完整DOM树时即可触发, 而不必要等到所有的外部资源加载完毕, 所以该事件发生在load事件之前;&lt;/p&gt;
&lt;h4&gt;4. readystatechange&lt;/h4&gt;
&lt;p&gt;readystatechange事件在某个元素或者文档加载状态改变时触发, 支持该事件的元素有一个readyState属性, 用以表示该元素的当前状态, 这些状态包括:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;uninitialized&lt;/code&gt;: 未初始化, 表示对象存在当未完成初始化;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;loading&lt;/code&gt;: 正在加载对象数据;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;loaded&lt;/code&gt;: 对象数据加载完毕;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;interactive&lt;/code&gt;: 交互状态, 可以操作对象, 但是没有完全加载;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;complete&lt;/code&gt;: 对象加载完成;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;这些属性全部属性元素, 而事件本身并没有提供任何信息;&lt;/p&gt;
&lt;p&gt;并非所有的对象都会经历所有阶段, 有可能会跳过中间的某个阶段; 如有些元素会一直停留在load状态, 而有些元素则会跳过load直接进入complete, 而这两个状态都表示该元素已经可用;&lt;/p&gt;
&lt;p&gt;进行动态脚本或者动态样式加载外部资源时, 可以判断加载的状态, 以便调用;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c1"&gt;// 动态脚本&lt;/span&gt;
&lt;span class="nx"&gt;EventUtil&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addHandler&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;load&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;script&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createElement&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;script&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="nx"&gt;EventUtil&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addHandler&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;script&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;readystatechange&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;event&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;EventUtil&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getEvent&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;target&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;EventUtil&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getTarget&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;readyState&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;loaded&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;readyState&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;complete&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;EventUtil&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;removeHandler&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;readystatechange&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;arguments&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;callee&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="nx"&gt;alert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;script loaded&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
    &lt;span class="nx"&gt;script&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;src&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;example.js&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;appendChild&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;script&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="c1"&gt;// 动态样式&lt;/span&gt;
&lt;span class="nx"&gt;EventUtil&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addHandler&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;load&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;link&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createElement&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;link&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;link&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;type&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;text/css&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nx"&gt;link&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;rel&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;stylesheet&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="nx"&gt;EventUtil&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addHandler&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;link&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;readystatechange&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;event&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;EventUtil&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getEvent&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;target&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;EventUtil&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getTarget&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;readyState&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;loaded&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;readyState&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;complete&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;EventUtil&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;removeHandler&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;readystatechange&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;arguments&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;callee&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="nx"&gt;alert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;CSS loaded&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
    &lt;span class="nx"&gt;link&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;src&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;example.css&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;head&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;appendChild&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;link&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;5. pageshow, pagehide&lt;/h4&gt;
&lt;p&gt;浏览器为了加快前进和后退时的速度, 添加了往返缓存的特性, 将页面数据保存在缓存中(back-forward cache, bfcache), 当页面从往返缓存中读取时, 页面的load事件并不会触发, 而pageshow事件则始终会触发; 相反地, 如果一个页面没有显式处理unload事件, 则在其卸载时会保存到缓存中, 从而触发pagehide事件;&lt;/p&gt;
&lt;p&gt;pageshow事件包含一个persisted属性, 表示该页面是否保存在bfcache中;&lt;/p&gt;
&lt;p&gt;这两个事件目标虽然是document, 但由于浏览器实现时为了兼容性通常会将这两个事件添加到window中;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;showCount&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="nx"&gt;EventUtil&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addHandler&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;load&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;alert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Load fired&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;

    &lt;span class="nx"&gt;EventUtil&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addHandler&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;pageshow&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;showCount&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nx"&gt;alert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Show has been fired &amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;showCount&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt;
            &lt;span class="s2"&gt;&amp;quot; times. Persisted? &amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;persisted&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;})();&lt;/span&gt;

&lt;span class="nx"&gt;EventUtil&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addHandler&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;pagehide&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;alert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Hidding. Persisted? &amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;persisted&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;6. hashchange&lt;/h4&gt;
&lt;p&gt;该事件当URL中的hash值改变时触发, 通常用于Ajax应用中利用URL参数保存导航信息;&lt;/p&gt;
&lt;p&gt;该事件包含两个属性: oldURL和newURL, 分别表示改变之前和改变之后的URL, 但是IE和firefox浏览器不支持这两个属性, 这时需要通过location.hash确定当前hash;&lt;/p&gt;
&lt;p&gt;以下代码检测浏览器是否支持该事件:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;isSupported&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;onhashchange&amp;quot;&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt;
                     &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;documentMode&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="kc"&gt;undefined&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;documentMode&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;设备事件以及触摸手势事件&lt;/h3&gt;
&lt;p&gt;设备事件应用于智能手机和平板电脑中, 主要当设备横向模式、纵向模式切换时触发, 不同浏览器对该事件的处理不同, 与设备支持也紧密相关;&lt;/p&gt;
&lt;p&gt;触摸事件和手势事件在iOS的Safari中应用, 当触摸屏幕或者在屏幕中产生手势时相应触发;&lt;/p&gt;
&lt;h2&gt;事件性能&lt;/h2&gt;
&lt;p&gt;每个事件处理程序都会占用内存, 内存中事件越多, 性能就会越差, 并且事件程序的处理会增加DOM的访问次数, 从而降低性能;&lt;/p&gt;
&lt;p&gt;为了提升事件的性能, 有以下两种方式来优化事件:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;利用事件冒泡, 将相同类型的事件统一使用同一个事件处理程序, 只在程序内部判断目标元素类型从而做出相应操作;&lt;/li&gt;
&lt;li&gt;即使移除内存中过时不用的空事件处理程序, 另外当使用innerHTML元素替换元素时, 应该首先移除事件处理程序, 否则会导致无法正确回收;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;应该避免一些无意义的事件, 以及避免给会重复触发的事件添加复杂处理, 从而提高浏览器性能;&lt;/p&gt;
&lt;h2&gt;事件模拟&lt;/h2&gt;
&lt;p&gt;在IE之外的浏览器中, 使用&lt;code&gt;document.createEvent(type)&lt;/code&gt;方法, 并且传入相应事件类型, 经过相应的初始化操作之后, 通过&lt;code&gt;dispatchEvent(event)&lt;/code&gt;方法模拟事件的触发;&lt;/p&gt;
&lt;p&gt;这些事件类型包括:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;UIEvents, 对应DOM3中为UIEvent;&lt;/li&gt;
&lt;li&gt;MouseEvents, 对应DOM3中为MouseEvent;&lt;/li&gt;
&lt;li&gt;MutationEvents, 对应DOM3中为MutationEvent;&lt;/li&gt;
&lt;li&gt;HTMLEvents, DOM3中将该类型分散到其他事件类型中;&lt;/li&gt;
&lt;li&gt;KeyboardEvent, 只在DOM3中存在;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;当浏览器中不支持某些事件时, 也可以通过&lt;code&gt;document.createEvent("Events")&lt;/code&gt;方法创建通用事件对象, 使用&lt;code&gt;initEvent()&lt;/code&gt;初始化, 然后给该对象赋予相应的属性, 再通过&lt;code&gt;dispatchEvent()&lt;/code&gt;方法触发;&lt;/p&gt;
&lt;p&gt;而在IE浏览器中, 则需要调用&lt;code&gt;document.createEventObject()&lt;/code&gt;方法创建event对象, 然后直接给该对象赋值相应的属性, 直到在触发事件时, 使用&lt;code&gt;fireEvent(type, event)&lt;/code&gt;才指定事件类型;&lt;/p&gt;</summary><category term="javascript"></category></entry><entry><title>JavaScript之DOM</title><link href="http://www.lyon0804.com/javascriptzhi-dom.html" rel="alternate"></link><updated>2015-11-27T00:00:00+08:00</updated><author><name>lyon</name></author><id>tag:www.lyon0804.com,2015-11-27:javascriptzhi-dom.html</id><summary type="html">&lt;p&gt;&lt;strong&gt;DOM&lt;/strong&gt;(文档对象模型)是针对XML和HTML文档的一个API, 分为3级, 其中:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;DOM1: 页面结构及查询标准;&lt;/li&gt;
&lt;li&gt;DOM2: 扩展DOM1, 在已有类型基础上添加方法和属性, 引入更多的交互能力;&lt;/li&gt;
&lt;li&gt;DOM3: 扩展DOM1, 增强既有类型的基础上, 添加了新的类型用以扩展API;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;由于&lt;em&gt;IE浏览器&lt;/em&gt;使用COM对象的形式实现DOM, 与其他浏览器中的行为特点并不一致;&lt;/p&gt;
&lt;h2&gt;DOM 节点层次&lt;/h2&gt;
&lt;p&gt;DOM将一个XML或者HTML描述成由多层节点构成的结构, 所有页面都会标记为一个有特定根节点(document)的树形结构;&lt;/p&gt;
&lt;p&gt;示例文档:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nt"&gt;&amp;lt;html&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;title&amp;gt;&lt;/span&gt;
            Title Node
        &lt;span class="nt"&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;p&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;paragraph&amp;#39;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt; Paragraph Node &lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;ul&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;li&amp;gt;&lt;/span&gt;item 1&lt;span class="nt"&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;li&amp;gt;&lt;/span&gt;item 2&lt;span class="nt"&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;li&amp;gt;&lt;/span&gt;item 3&lt;span class="nt"&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;/ul&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;first&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;demo&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt; first div &lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;secend&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt; second div &lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;learn_dom.js&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Node&lt;/h3&gt;
&lt;p&gt;其中所有的节点类型都继承自相同的&lt;code&gt;Node&lt;/code&gt;接口, 该接口主要有三个属性:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;nodeType&lt;/code&gt;: 节点类型;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;nodeName&lt;/code&gt;: 节点名称;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;nodeValue&lt;/code&gt;: 节点值;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;该接口定义了一系列的节点类型, 保存在每个节点的&lt;code&gt;nodeType&lt;/code&gt;属性中, 所有节点类型都必须是其中之一:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Node.ELEMENT_NODE(1): 元素类型, 也是最常用的类型;&lt;/li&gt;
&lt;li&gt;Node.ATTRIBUTE_NODE(2);&lt;/li&gt;
&lt;li&gt;Node.TEXT_NODE(3);&lt;/li&gt;
&lt;li&gt;Node.CDATA_SECTION_NODE(4);&lt;/li&gt;
&lt;li&gt;Node.ENTITY_REFERENCE_NODE(5);&lt;/li&gt;
&lt;li&gt;Node.ENTITY_NODE(6);&lt;/li&gt;
&lt;li&gt;Node.PROCESSION_INSTRUCTION_NODE(7);&lt;/li&gt;
&lt;li&gt;Node.COMMENT_NODE(8);&lt;/li&gt;
&lt;li&gt;Node.DOCUMENT_NODE(9);&lt;/li&gt;
&lt;li&gt;Node.DOCUMENT_TYPE_NODE(10);&lt;/li&gt;
&lt;li&gt;Node.DOCUMENT_FRAGMENT_NODE(11);&lt;/li&gt;
&lt;li&gt;Node.NOTATION_NODE(12);&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;所有上述元素类型可以有字符串常量和整数两种形式表示, 但是在&lt;em&gt;IE浏览器&lt;/em&gt;中, 只能使用整数值, 所以使用整数值是一种比较好的方式;&lt;/p&gt;
&lt;p&gt;文档中的所有节点存在文档树的关系:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;文档树的根节点必然是&lt;code&gt;document&lt;/code&gt;;&lt;/li&gt;
&lt;li&gt;每个节点都有&lt;code&gt;childNodes&lt;/code&gt;属性, 保存一个&lt;code&gt;NodeList&lt;/code&gt;对象, 但并不是所有类型的节点都有子节点;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;NodeList&lt;/code&gt;对象虽然有&lt;code&gt;length&lt;/code&gt;属性, 也可使用下标访问其中元素, 但是并不是&lt;code&gt;Array&lt;/code&gt;的实例, 只能将某个时刻的&lt;code&gt;NodeList&lt;/code&gt;对象快照转化为&lt;code&gt;Array&lt;/code&gt;实例;&lt;/li&gt;
&lt;li&gt;每个节点都有&lt;code&gt;parentNode&lt;/code&gt;属性, 表示父节点, &lt;code&gt;document&lt;/code&gt;节点的父节点为&lt;code&gt;null&lt;/code&gt;;&lt;/li&gt;
&lt;li&gt;每个节点都有&lt;code&gt;nextSibling&lt;/code&gt;和&lt;code&gt;previousSibling&lt;/code&gt;, 表示其后一个同辈节点以及前一个同辈节点;&lt;/li&gt;
&lt;li&gt;所有节点都有&lt;code&gt;ownerDocument&lt;/code&gt;属性, 表示该节点指向的文档节点, &lt;code&gt;document&lt;/code&gt;节点该属性为&lt;code&gt;null&lt;/code&gt;;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;获取当前&lt;code&gt;NodeList&lt;/code&gt;快照的方式:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;convertToArray&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;nodes&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;array&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;array&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Array&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;prototype&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;slice&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;call&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;nodes&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ex&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
        &lt;span class="nx"&gt;array&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Array&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;len&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nx"&gt;nodes&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;len&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
            &lt;span class="nx"&gt;array&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;nodes&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;array&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c1"&gt;// learn_dom.js&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;html&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;childNodes&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="nx"&gt;alert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;html&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;  &lt;span class="c1"&gt;// [object HTMLHtmlElement]&lt;/span&gt;
&lt;span class="nx"&gt;alert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;html&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;nodeType&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;  &lt;span class="c1"&gt;// 1&lt;/span&gt;
&lt;span class="nx"&gt;alert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;html&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;nodeName&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;  &lt;span class="c1"&gt;// HTML&lt;/span&gt;
&lt;span class="nx"&gt;alert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;html&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;nodeValue&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;  &lt;span class="c1"&gt;// null&lt;/span&gt;
&lt;span class="nx"&gt;alert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;html&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;parent&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;  &lt;span class="c1"&gt;// [object HTMLDocument]&lt;/span&gt;
&lt;span class="nx"&gt;alert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;html&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;childNodes&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;  &lt;span class="c1"&gt;// [object NodeList]&lt;/span&gt;
&lt;span class="nx"&gt;html_children&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;convertToArray&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;html&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;childNodes&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;html_children&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;  &lt;span class="c1"&gt;// [object HTMLHeadElement],[object Text],[object HTMLBodyElement]&lt;/span&gt;
&lt;span class="nx"&gt;head&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;html_children&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="nx"&gt;alert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;head&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;nextSibling&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;  &lt;span class="c1"&gt;// [object Text]&lt;/span&gt;
&lt;span class="nx"&gt;alert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;head&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;previousSibling&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;  &lt;span class="c1"&gt;// null&lt;/span&gt;
&lt;span class="nx"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;head&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ownerDocument&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;  &lt;span class="c1"&gt;// [object HTMLDocument]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;节点的关系指针是只读的, 所以若要操作节点, 并不能直接修改节点关系, 只能通过内置的几个操作方法:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;appendChild()&lt;/code&gt;: 在childNodes的最后添加一个节点, 该方法执行后返回新增的节点;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;insertBefore()&lt;/code&gt;: 在某个节点之前插入节点, 成为该节点的前一个同辈节点, 同样会返回该节点;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;replaceChild()&lt;/code&gt;: 替换某个节点, 被替换掉的节点仍然存在文档中, 只是没有了在文档中的位置;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;removeChild()&lt;/code&gt;: 移除某个节点, 移除的节点只是没有了在文档中的位置;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;cloneNode()&lt;/code&gt;: 复制一个节点, 如果传入一个参数为&lt;code&gt;true&lt;/code&gt;, 则会同时复制节点以及整个子节点树; 返回的节点没有父节点, 必须通过其他方法添加到节点树中;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;normalize()&lt;/code&gt;: 删除空的文本节点, 合并相邻的文本节点;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;上述前四个方法都是针对子节点进行操作, 但有些类型的节点并没有子节点, 此时将会发生错误;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;body&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;childNodes&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;childNodes&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;ul&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;childNodes&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;ul_2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;ul&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;cloneNode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;new_ul&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;appendChild&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ul_2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;alert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;new_ul&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="nx"&gt;ul_2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;  &lt;span class="c1"&gt;// true&lt;/span&gt;
&lt;span class="nx"&gt;alert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;lastChild&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="nx"&gt;new_ul&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;  &lt;span class="c1"&gt;// true&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Document&lt;/h3&gt;
&lt;p&gt;在浏览器中, &lt;code&gt;document&lt;/code&gt;对象是&lt;code&gt;window&lt;/code&gt;对象的一个属性, 是&lt;code&gt;HTMLDocument&lt;/code&gt;(继承自&lt;code&gt;Document&lt;/code&gt;)的一个实例, 是浏览器文档中其他节点的根节点, 各项属性为:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;nodeType&lt;/code&gt;: DOCUMENT_NODE(9);&lt;/li&gt;
&lt;li&gt;&lt;code&gt;nodeName&lt;/code&gt;: #document;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;nodeValue&lt;/code&gt;: null;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;parentNode&lt;/code&gt;: null;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ownerDocument&lt;/code&gt;: null;&lt;/li&gt;
&lt;li&gt;子节点可能为: 最多一个DocumentType, 最多一个Element, ProcessingInstruction或Comment;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在上面的例子中, &lt;code&gt;document&lt;/code&gt;的唯一Element子节点就是一个&lt;code&gt;html&lt;/code&gt;元素, 通过&lt;code&gt;document.childNodes[0]&lt;/code&gt;访问, 同时也可以通过&lt;code&gt;document.documentElement&lt;/code&gt;属性访问得到; 后面一种访问方式可以保证获得Element子节点, 而当存在&lt;code&gt;&amp;lt;!DOCUTYPE&amp;gt;&lt;/code&gt;标签时, 则DocumentType节点可能为第一个子节点;&lt;/p&gt;
&lt;p&gt;DocumentType子节点可以通过&lt;code&gt;document.doctype&lt;/code&gt;属性可靠访问, 除了&lt;code&gt;IE8&lt;/code&gt;以及之前版本会将其认为是Comment; 该属性在不同的浏览器中表现各异;&lt;/p&gt;
&lt;p&gt;除了上述属性外, &lt;code&gt;document&lt;/code&gt;具有表现页面信息的属性:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;title&lt;/code&gt;: 文档标题;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;URL&lt;/code&gt;: 页面完整URL;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;domain&lt;/code&gt;: 页面域名;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;referrer&lt;/code&gt;: 页面来源URL;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;domain&lt;/code&gt;属性可以修改为当前域名的更加&lt;em&gt;松散&lt;/em&gt;的方式, 从而完成两个子域之间的跨域通信;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c1"&gt;// document.domain == &amp;#39;p2p.wrox.com&amp;#39;&lt;/span&gt;
&lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;domain&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;wrox.com&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  &lt;span class="c1"&gt;// 设置后, 该域名下的不同子域, 如: p2p.wrox.com, c2c.wrox.com可以互相通信;&lt;/span&gt;
&lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;domain&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;p2p.wrox.com&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  &lt;span class="c1"&gt;// 错误, 只能将域名修改为更加松散的方式;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;document更常见的应用在于查找元素, 通过以下两个方法:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;getElementById()&lt;/code&gt;: 通过元素id查找, 得到相应元素, 如果没有该id, 则返回null;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;getElementByTagName()&lt;/code&gt;: 通过标签名查找, 得到一个HTMLCollection;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;HTMLCollection&lt;/code&gt;对象中的元素可以通过下标索引来获取元素, 如果元素有&lt;code&gt;name&lt;/code&gt;属性, 则可以通过该值访问;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这些方法不同浏览器的表现不同, IE7以及更低版本使用&lt;code&gt;getElementById()&lt;/code&gt;查找时会忽略大小写, 并且&lt;code&gt;name&lt;/code&gt;属性也可以被&lt;code&gt;getElementById()&lt;/code&gt;获取, 等等; 在html中&lt;code&gt;getElementByTagName()&lt;/code&gt;将忽略大小写, 但是xml中大小写敏感;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;getElementByTagName("*")&lt;/code&gt;可以获得所有元素;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;first_div&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;demo&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;alert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;first_div&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;  &lt;span class="c1"&gt;// [object HTMLDivElement]&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;divs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementsByTagName&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;div&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;alert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;divs&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;  &lt;span class="c1"&gt;//  [object HTMLCollection]&lt;/span&gt;
&lt;span class="nx"&gt;alert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;divs&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="nx"&gt;divs&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;demo&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;  &lt;span class="c1"&gt;// true&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;除了使用上述两个方法之外, document对象还有一些特殊的集合(&lt;code&gt;HTMLCollection&lt;/code&gt;对象):&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;document.anchors&lt;/code&gt;: 文档中所有带name特性的&amp;lt;a&amp;gt;元素;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;document.links&lt;/code&gt;: 文档中所有带href特性的&amp;lt;a&amp;gt;元素;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;document.forms&lt;/code&gt;: 文档中所有的&amp;lt;form&amp;gt;元素;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;document.images&lt;/code&gt;: 文档中所有的&amp;lt;img&amp;gt;元素;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;document对象还提供了以下写入文档的方法:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;write()&lt;/code&gt;: 原样写入;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;writeln()&lt;/code&gt;: 在末尾添加&lt;code&gt;\n&lt;/code&gt;换行符;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;open()&lt;/code&gt;, &lt;code&gt;close()&lt;/code&gt;: 打开和关闭网页的输出流;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;之前的几篇实例中改写的&lt;code&gt;print()&lt;/code&gt;方法就用到了文档的写入;&lt;/p&gt;
&lt;h3&gt;Element&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;Element&lt;/code&gt;类型就是网页中的元素, 上述通过&lt;code&gt;getElementById()&lt;/code&gt;等得到的就是&lt;code&gt;Element&lt;/code&gt;对象; 该对象的节点属性为:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;nodeType&lt;/code&gt;: ELEMENT_NODE(1);&lt;/li&gt;
&lt;li&gt;&lt;code&gt;nodeName&lt;/code&gt;: 元素的标签名;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;nodeValue&lt;/code&gt;: null;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;parentNode&lt;/code&gt;: 可能为Document或者Element;&lt;/li&gt;
&lt;li&gt;子节点可能为: Element, Text, Comment, ProcessingInstruction, CDATASection 或 EntityReference;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;除了使用&lt;code&gt;nodeName&lt;/code&gt;访问元素的标签名, &lt;code&gt;tagName&lt;/code&gt;属性也会返回相同值, 元素标签名查找时忽略大小写, 但是实际返回时在HTML中始终为大写;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;first_div&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;demo&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;alert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;first_div&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;tagName&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;  &lt;span class="c1"&gt;// DIV&lt;/span&gt;
&lt;span class="nx"&gt;alert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;first_div&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;nodeName&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="nx"&gt;first_div&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;tagName&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;  &lt;span class="c1"&gt;// true&lt;/span&gt;
&lt;span class="nx"&gt;alert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;first_div&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;tagName&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;div&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;  &lt;span class="c1"&gt;// false&lt;/span&gt;
&lt;span class="nx"&gt;alert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;first_div&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;tagName&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toLowerCase&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;div&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;  &lt;span class="c1"&gt;// true&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;所有的HTML元素都由HTMLElement类型(继承自Element)及其子类型表示, 该类型在Element基础上添加了以下属性:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;id&lt;/code&gt;: 元素在文档中的唯一标识符;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;className&lt;/code&gt;: 元素的class特性;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;title&lt;/code&gt;: 元素的附加说明信息, title特性;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;lang&lt;/code&gt;: 语言代码;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;dir&lt;/code&gt;: 语言方向, "ltr"(left-to-right)或者"rtl"(right-to-left);&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这些值都可以被修改(虽然并不一定在客户端体现), 修改后会立即应用对应的CSS样式;&lt;/p&gt;
&lt;p&gt;除了上述属性描述了一部分HTML元素的特性之外, 还可以通过以下方法来访问或者修改这些特性:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;getAttribute()&lt;/code&gt;: 获取特性;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;setAttribute()&lt;/code&gt;: 修改特性;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;removeAttribute()&lt;/code&gt;: 删除特性;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;first_div&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;demo&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;alert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;first_div&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;  &lt;span class="c1"&gt;// demo&lt;/span&gt;
&lt;span class="nx"&gt;alert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;first_div&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;className&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="nx"&gt;first_div&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getAttribute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;class&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;  &lt;span class="c1"&gt;// true&lt;/span&gt;
&lt;span class="nx"&gt;first_div&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setAttribute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;class&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;another&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;alert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;first_div&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c1"&gt;// another&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;同时, Element元素是唯一使用&lt;code&gt;attributes&lt;/code&gt;属性的节点类型, 该属性包含一个NamedNodeMap, 元素的每个特性都由一个Attr节点表示, 并且这些节点都保存再NamedNodeMap中, 通过以下方法获取或者操作属性:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;getNamedItem(name)&lt;/code&gt;: 返回html元素的对应特性(Attr节点)的值, 也可通过下标直接访问;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;removeNamedItem(name)&lt;/code&gt;: 移除该Attr节点;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;setNamedItem(node)&lt;/code&gt;: 添加新Attr节点;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;item(pos)&lt;/code&gt;: 返回在pos位置出的Attr节点;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;上述方式获取操作属性并不如之前的方法方便, 但是使用这些方法可以对属性进行遍历:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;outputAttributes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;element&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;pairs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Array&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;len&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nx"&gt;element&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;attributes&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;len&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
        &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;attrName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;element&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;attributes&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;nodeName&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;attrValue&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;element&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;attributes&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;nodeValue&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;element&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;attributes&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;specified&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;  &lt;span class="c1"&gt;// for IE7 or lower;&lt;/span&gt;
            &lt;span class="nx"&gt;pairs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;attrName&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;=&amp;quot;&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;attrValue&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;quot;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;pairs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39; &amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;通过&lt;code&gt;document.createElement()&lt;/code&gt;方法可以创建一个元素节点, 该方法接收一个参数指定元素标签名, 同时为该元素设置ownerDocument属性, 并通过Element元素的相应方法设置属性, 但是此时该元素在文档中并没有其位置, 需要通过&lt;code&gt;node.appendChild&lt;/code&gt;等方法将其添加到文档树中;&lt;/p&gt;
&lt;p&gt;Element类型也具有&lt;code&gt;getElementById()&lt;/code&gt;以及&lt;code&gt;getElementByTagName()&lt;/code&gt;方法, 此时, 这两个方法只返回子节点下的相应元素;&lt;/p&gt;
&lt;h3&gt;Text&lt;/h3&gt;
&lt;p&gt;Text类型表示文本节点, 该节点不包含HTML代码, 只包含转义后的HTMl字符, 该类型节点属性为:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;nodeType&lt;/code&gt;: TEXT_NODE(3);&lt;/li&gt;
&lt;li&gt;&lt;code&gt;nodeName&lt;/code&gt;: #text;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;nodeValue&lt;/code&gt;: 具体的文本内容;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;parentNode&lt;/code&gt;: Element;&lt;/li&gt;
&lt;li&gt;不支持子节点;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在html中, 除了IE浏览器之外, 两个标签之间都会有一个空的文本节点;&lt;/p&gt;
&lt;p&gt;通过&lt;code&gt;nodeValue&lt;/code&gt;属性可以修改文本内容, 也可以通过以下方法修改:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;appendData(text)&lt;/code&gt;: 在末尾添加text;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;deleteData(offset, count)&lt;/code&gt;: 从offset位置开始删除count个字符;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;insertData(offset, text)&lt;/code&gt;: 在offset指定位置插入text;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;replaceData(offset, count, text)&lt;/code&gt;: 用text替换从offset指定位置开始到offset+count出的文本;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;splitText(offset)&lt;/code&gt;: 从offset位置将文本分为两个文本节点, 前一个作为原节点的值, 后一个为新节点的值, 返回新节点;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;subsringData(offset, count)&lt;/code&gt;: 提取offset开始count个字符的文本;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;createTextNode(text)&lt;/code&gt;: 创建文本节点, 传入参数为文本值;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在DOM文档中, 相邻的文档节点容易导致混乱, 为了合并相邻文档节点, 可以使用前文介绍的&lt;code&gt;document.normalize()&lt;/code&gt;方法; 而&lt;code&gt;splitText()&lt;/code&gt;方法则会产生完全相反的结果;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;first_div&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;demo&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;p&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;first_div&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;childNodes&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;text&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;childNodes&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="nx"&gt;alert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;nodeValue&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;  &lt;span class="c1"&gt;// first div&lt;/span&gt;
&lt;span class="nx"&gt;alert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;  &lt;span class="c1"&gt;// first div&lt;/span&gt;
&lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;appendData&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39; append&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;alert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;  &lt;span class="c1"&gt;// first div append&lt;/span&gt;
&lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;insertData&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39; insert&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;alert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;  &lt;span class="c1"&gt;// first insert div append&lt;/span&gt;
&lt;span class="nx"&gt;another_text&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;substringData&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;alert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;another_text&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;  &lt;span class="c1"&gt;// insert&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;new_text&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;splitText&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;alert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;  &lt;span class="c1"&gt;// first&lt;/span&gt;
&lt;span class="nx"&gt;alert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;new_text&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;  &lt;span class="c1"&gt;// insert div append&lt;/span&gt;
&lt;span class="nx"&gt;another_text&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createTextNode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;another_text&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;appendChild&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;another_text&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;alert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;convertToArray&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;childNodes&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;  &lt;span class="c1"&gt;// [object Text],[object Text],[object Text]&lt;/span&gt;
&lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;normalize&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="nx"&gt;alert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;convertToArray&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;childNodes&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;  &lt;span class="c1"&gt;// [object Text]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;其他类型&lt;/h3&gt;
&lt;p&gt;其他并不常用的类型有:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Comment&lt;/code&gt;类型: 表示注释节点;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;CDATASection&lt;/code&gt;类型: 只针对XML, 表示CDATA区域;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;DocumentType&lt;/code&gt;类型: 表示&amp;lt;!DOCTYPE&amp;gt;标签指定的节点;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;DocumentFragment&lt;/code&gt;类型: 唯一没有对应标记的类型, 是一种轻量级文档, 可以包含和控制节点;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Attr&lt;/code&gt;类型: 元素的特性节点;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;DOM 操作&lt;/h2&gt;
&lt;h3&gt;动态脚本&lt;/h3&gt;
&lt;p&gt;通过在DOM插入&amp;lt;script&amp;gt;元素, 可以在javascript中创建动态脚本, 和脚本在html中的两种存在方式一样, 动态脚本也有两种创建方式:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;动态加载外部javascript脚本;&lt;/li&gt;
&lt;li&gt;直接在页面中插入脚本代码;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;动态插入脚本需要访问script元素以及修改其属性等, 在不同浏览器中表现不同, 下面展示js高程书上的两个实例函数:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c1"&gt;// 动态加载外部脚本&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;loadScript&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;script&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createElement&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;script&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;script&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;type&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;text/javascript&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nx"&gt;script&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;src&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;appendChild&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;script&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="c1"&gt;// 动态插入脚本代码&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;loadScriptString&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;code&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;script&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createElement&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;script&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;script&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;type&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;text/javascript&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;script&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;appendChild&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createTextNode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;code&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ex&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
        &lt;span class="nx"&gt;script&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;text&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;code&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;appendChilde&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;script&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;上述两种加载方式有些区别, 第二种方式可以立即加载完成, 相当于将字符串传递给&lt;code&gt;evel()&lt;/code&gt;, 而第一种方式由于需要加载文件, 并没有标准方法可以探知合适加载完成;&lt;/p&gt;
&lt;h3&gt;动态样式&lt;/h3&gt;
&lt;p&gt;和动态脚本类似, 在javascript中创建css样式, 称为动态样式, 同样也有两种方式:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在link元素中添加外部css引用;&lt;/li&gt;
&lt;li&gt;在style元素中添加css代码;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;对应函数为:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c1"&gt;// 在link元素中动态加载外部css&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;loadStyle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;link&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createElement&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;link&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;link&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;rel&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;stylesheet&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nx"&gt;link&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;type&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;text/css&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nx"&gt;link&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;href&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;head&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;appendChild&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;link&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="c1"&gt;// 在style元素中动态插入css&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;loadStyleString&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;css&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;style&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createElement&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;style&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;type&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;text/css&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;appendChild&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createTextNode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;css&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ex&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
        &lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;styleSheet&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;cssText&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;css&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;head&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;appendChild&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;需要指出: 在文档中&lt;code&gt;document.head&lt;/code&gt;的Note中描述:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;document.head&lt;/code&gt; is read-only. Trying to assign a value to this property will fail silently or, when in &lt;em&gt;ECMAScript Strict Mode&lt;/em&gt; in a Gecko browser, throw a &lt;em&gt;TypeError&lt;/em&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;然而在实际测试中, firefox 和 safari 均可以往&lt;code&gt;document.head&lt;/code&gt;中添加子节点, 并且正常显示, 可能添加子节点并没有对该元素做出修改, 但是没有深入探究, 如果出问题, 则应该使用&lt;code&gt;document.getElementByTagName('head')[0]&lt;/code&gt;来获取;&lt;/p&gt;
&lt;h3&gt;表格&lt;/h3&gt;
&lt;p&gt;由于&amp;lt;table&amp;gt;元素结构比较复杂, 在动态添加表格时, 往往需要编辑大量代码, 并且不够直观, 为此, HTML DOM为&amp;lt;table&amp;gt;、&amp;lt;tbody&amp;gt;、&amp;lt;tr&amp;gt;元素添加更多的属性和方法:&lt;/p&gt;
&lt;p&gt;在&amp;lt;table&amp;gt;中:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;rows&lt;/code&gt;: 表格中所有行的HTMLColletion;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;insertRow(pos)&lt;/code&gt;: 在rows集合指定位置插入一行;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;deleteRow(pos)&lt;/code&gt;: 删除指定位置行;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;caption&lt;/code&gt;: 保存着&amp;lt;caption&amp;gt;元素的指针;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;createCaption()&lt;/code&gt;: 创建&amp;lt;caption&amp;gt;元素并返回其引用;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;deleteCaption()&lt;/code&gt;: 删除&amp;lt;caption&amp;gt;元素;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;tFoot&lt;/code&gt;: &amp;lt;tfoot&amp;gt;元素的指针;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;createTFoot()&lt;/code&gt;: 创建&amp;lt;tfoot&amp;gt;元素并返回其引用;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;deleteTFoot()&lt;/code&gt;: 删除&amp;lt;tfoot&amp;gt;元素;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;tHead&lt;/code&gt;: &amp;lt;thead&amp;gt;元素的指针;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;createTHead()&lt;/code&gt;: 创建&amp;lt;thead&amp;gt;元素并返回其引用;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;deleteTHead()&lt;/code&gt;: 删除&amp;lt;thead&amp;gt;元素;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;tBodies&lt;/code&gt;: &amp;lt;tbody&amp;gt;元素的HTMLCollection;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在&amp;lt;tbody&amp;gt;中:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;rows&lt;/code&gt;: &amp;lt;tbody&amp;gt;中所有行的HTMLCollection;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;deleteRow(pos)&lt;/code&gt;: 删除指定位置的行;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;insertRow(pos)&lt;/code&gt;: 向rows集合的指定位置插入行并返回其引用;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在&amp;lt;tr&amp;gt;中:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;cells&lt;/code&gt;: &amp;lt;tr&amp;gt;中所有单元格的HTMLCollection;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;deleteCell(pos)&lt;/code&gt;: 删除指定位置单元格;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;insertCell(pos)&lt;/code&gt;: 向cells集合的指定位置插入单元格并返回其引用;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;table&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createElement&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;table&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;table&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;border&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;table&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;width&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;100%&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;tbody&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createElement&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;tbody&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;table&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;appendChild&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;tbody&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;row1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;tbody&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;insertRow&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;cell_1_1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;row1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;insertCell&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;text_1_1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createTextNode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;cell 1,1&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;cell_1_1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;appendChild&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;text_1_1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;cell_1_2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;row1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;insertCell&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;text_1_2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createTextNode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;cell 1,2&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;cell_1_2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;appendChild&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;text_1_2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;row2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;tbody&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;insertRow&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;cell_2_1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;row2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;insertCell&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;text_2_1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createTextNode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;cell 2,1&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;cell_2_1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;appendChild&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;text_2_1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;cell_2_2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;row2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;insertCell&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;text_2_2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createTextNode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;cell 2,2&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;cell_2_2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;appendChild&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;text_2_2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;appendChild&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;table&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;以上实例代码将表格操作更加易于理解;&lt;/p&gt;
&lt;h3&gt;NodeList&lt;/h3&gt;
&lt;p&gt;NodeList对象以及NamedNodeMap和HTMLCollection等都是动态扩展的, 随着DOM实时更新, 所以当访问这些元素时, 都会有一次基于文档的查询, 为了尽量减少访问次数, 最好查看其当时的快照(如前文给出的转换方法);&lt;/p&gt;
&lt;p&gt;在遍历NodeList等元素时, 应该将其&lt;code&gt;length&lt;/code&gt;属性提前取出, 否则有可能由于动态扩展的问题造成死循环;&lt;/p&gt;
&lt;h2&gt;DOM扩展&lt;/h2&gt;
&lt;p&gt;DOM最主要的扩展是Selectors API(选择符API)以及HTML5, 这些扩展为DOM添加了更多的属性;&lt;/p&gt;
&lt;h3&gt;Selector API&lt;/h3&gt;
&lt;p&gt;Select API主要实现使用&lt;strong&gt;CSS选择符&lt;/strong&gt;来获取元素, 主要有以下两种方法:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;querySelector()&lt;/code&gt;: 接收一个CSS选择符, 并且返回与该模式匹配的第一个元素;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;querySelectorAll()&lt;/code&gt;: 接收一个CSS选择符, 并且返回与该模式匹配的NodeList;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;个别比较老旧的浏览器并不支持该扩展, 在使用之前应该做好功能检查工作;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;first_div&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;body&amp;gt;div.first#demo&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;alert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;first_div&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;  &lt;span class="c1"&gt;// [object HTMLDivElement]&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;divs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelectorAll&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;div&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;alert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;divs&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;  &lt;span class="c1"&gt;// [object NodeList]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;使用CSS选择符给获取元素带来很大便利, 更便利的方式应该还是jQuery上关于DOM的操作;&lt;/p&gt;
&lt;h3&gt;元素遍历&lt;/h3&gt;
&lt;p&gt;如果直接遍历Node, 则需要判断节点类型; 如果需要直接遍历元素, 则可以用到以下的属性:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;childElementCount&lt;/code&gt;: 返回子元素的个数;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;firstElementChild&lt;/code&gt;: 指向第一个元素;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;lastElementChild&lt;/code&gt;: 指向最后一个元素;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;previousElementSibling&lt;/code&gt;: 前一个同辈元素;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;nextElementSibling&lt;/code&gt;: 后一个同辈元素;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;和Node的属性可以对应, 可以省略节点类型判断;&lt;/p&gt;
&lt;h3&gt;HTML5中的DOM扩展&lt;/h3&gt;
&lt;p&gt;由于class属性的大量使用, HTML5对类的功能进行了扩充, 主要添加了以下两个属性方法:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;getElementsByClassName()&lt;/code&gt;: 该方法通过接受一个或者多个类名的字符串, 返回NodeList;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;classList&lt;/code&gt;: 该属性针对具有多个class属性的元素, 提供比className更加强大的类处理;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;通过以上方法和属性的扩展, 大大强化了对类的操作;&lt;/p&gt;
&lt;p&gt;HTML5在DOM中添加了焦点功能, 用来获取DOM的焦点元素以及焦点的管理等, 主要通过以下属性和方法:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;document.activeElement&lt;/code&gt;: 该属性获取当前DOM中的焦点元素, 当页面加载完成时, 一般保存body元素, 通过tab键等方式可以改变焦点;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;document.hasFocus()&lt;/code&gt;: 该方法用来检测文档是否获得焦点, 由于页面未加载完成时没有焦点, 该方法可以用以判断;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;focus()&lt;/code&gt;: 元素调用该方法可以获得焦点;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;HTML5还为HTMLDocument添加了以下属性:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;document.readyState&lt;/code&gt;: 该属性有两个可能的值: loading和complete, 用以描述文档加载状态;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;document.compatMode&lt;/code&gt;: 该属性有两个可能的值: CSS1Compat和BackCompat, 用以区分渲染模式;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;document.head&lt;/code&gt;: 返回head元素;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;document.charset&lt;/code&gt;: 返回文档使用的字符集;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;document.defaultCharset&lt;/code&gt;: 返回文档默认字符集;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在HTML5中可以为元素添加非标准属性, 只需要添加前缀&lt;code&gt;data-&lt;/code&gt;, 这些属性会被添加到元素的&lt;code&gt;dataset&lt;/code&gt;属性中作为DOMStringMap存在, 但是键名会做一些处理(去掉前缀、去掉非字符、转换为小写等)使用:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;lt;div id=&amp;quot;myDiv&amp;quot; data-myname=&amp;quot;someValue&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;#myDiv&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;dataset&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;myname&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c1"&gt;// someValue&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;为了方便给文档插入大量HTML标记, HTML5加入了以下属性:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;innerHTML&lt;/code&gt;: 返回调用元素的所有子节点对应的HTML标记;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;outerHTML&lt;/code&gt;: 返回调用元素本身以及其所有子节点的HTML标记;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;insertAdjacentHTML()&lt;/code&gt;: 该方法接收两个参数, 第二个参数为HTML字符串, 第一个参数表示插入位置, 必须是以下四个值之一:&lt;ul&gt;
&lt;li&gt;beforebegin: 在当前元素之前插入紧邻的同辈元素;&lt;/li&gt;
&lt;li&gt;afterbegin: 在当前元素之下插入一个子元素, 该子元素作为第一个子元素;&lt;/li&gt;
&lt;li&gt;beforeend: 在当前元素之下插入一个子元素, 该子元素作为最后一个元素;&lt;/li&gt;
&lt;li&gt;afterend: 在当前元素之后插入紧邻的同辈元素;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;利用以上属性方法, 可以在文档中方便地插入大量的标记, 如前文的插入表格, 使用以上属性方法可以简化为:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;ul&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;body&amp;gt;ul&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;alert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ul&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;innerHTML&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;alert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ul&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;outerHTML&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;ul&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;insertAdjacentHTML&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;beforeend&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;lt;li&amp;gt; item 4 &amp;lt;/li&amp;gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;table_string&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;
    &lt;span class="err"&gt;`&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;table&lt;/span&gt; &lt;span class="nx"&gt;width&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;100%&amp;quot;&lt;/span&gt; &lt;span class="nx"&gt;border&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;1&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;tbody&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;tr&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
                &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;td&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;cell&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="err"&gt;/td&amp;gt;&lt;/span&gt;
                &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;td&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;cell&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="err"&gt;/td&amp;gt;&lt;/span&gt;
            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="err"&gt;/tr&amp;gt;&lt;/span&gt;
            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;tr&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
                &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;td&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;cell&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="err"&gt;/td&amp;gt;&lt;/span&gt;
                &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;td&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;cell&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="err"&gt;/td&amp;gt;&lt;/span&gt;
            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="err"&gt;/tr&amp;gt;&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="err"&gt;/tbody&amp;gt;&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="err"&gt;/table&amp;gt;`&lt;/span&gt;
&lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;insertAdjacentHTML&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;beforeend&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;table_string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;上述多行字符串需要ES6支持;&lt;/p&gt;
&lt;p&gt;四个位置对应的是标签出现的先后, 如beforebegin表示调用元素开始之前, 也就是上一个同辈元素; afterbegin则是调用元素开始之后, 也就是第一个子元素;&lt;/p&gt;
&lt;p&gt;使用上述属性方法替换或者插入元素时, 如果其中带有事件处理, 则有可能导致事件处理的内存占用, 应该手动释放事件处理有关的绑定;&lt;/p&gt;
&lt;p&gt;HTML5添加了&lt;code&gt;scrollIntoView()&lt;/code&gt;方法, 使得元素在滚动页面时一直保持可见;&lt;/p&gt;
&lt;p&gt;除了上述扩展之外, 不同浏览器之间还有一些没有被HTML5标准化的扩展, 就算已经标准化的扩展, 最好也需要查看一下浏览器的支持情况, 最新情况总是可以在文档中找到;&lt;/p&gt;</summary><category term="javascript"></category></entry><entry><title>JavaScript浏览器</title><link href="http://www.lyon0804.com/javascriptliu-lan-qi.html" rel="alternate"></link><updated>2015-11-24T00:00:00+08:00</updated><author><name>lyon</name></author><id>tag:www.lyon0804.com,2015-11-24:javascriptliu-lan-qi.html</id><summary type="html">&lt;p&gt;在Web应用中, 浏览器作为客户端, 浏览器功能的访问和控制、浏览器类型的检测等等, 都是非常重要的知识;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;BOM&lt;/strong&gt;(browser object model)浏览器对象模型;&lt;/li&gt;
&lt;li&gt;客户端检测;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;window对象&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;window&lt;/code&gt;对象是&lt;strong&gt;BOM&lt;/strong&gt;的核心, 表示浏览器的一个实例, 再浏览器中, window对象具有双重身份:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;浏览器对象接口;&lt;/li&gt;
&lt;li&gt;全局对象;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;即, 所有在全局作用域中声明的变量都会成为window对象的属性或者方法, 但是存在以下区别:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;全局变量不可使用&lt;code&gt;delete&lt;/code&gt;删除, 而在window对象上定义的属性可以; (IE9以下将都直接报错)&lt;/li&gt;
&lt;li&gt;不可访问未定义变量, 但是可以访问window上的可能不存在的属性;&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;str&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
    &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;lt;p&amp;gt;&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;str&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;lt;/p&amp;gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;env&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;foo&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nx"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;  &lt;span class="c1"&gt;// env&lt;/span&gt;
&lt;span class="nx"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;  &lt;span class="c1"&gt;// foo&lt;/span&gt;
&lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;color&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;red&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;delete&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  &lt;span class="c1"&gt;// false&lt;/span&gt;
&lt;span class="k"&gt;delete&lt;/span&gt; &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;color&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// true&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;newValue&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;oldValue&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  &lt;span class="c1"&gt;// 错误! oldValue未定义;&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;newValue&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;oldValue&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;newValue&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c1"&gt;// undefined&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;em&gt;注: 为了方便调试, 仍然和之前一样使用了自定义的print函数, 这样会覆盖window.print调用打印机方法&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;运行该特性, 可以用来检查一个可能未定义的变量是否存在;&lt;/p&gt;
&lt;h3&gt;框架&lt;/h3&gt;
&lt;p&gt;当一个页面中包含框架时, 每个框架都会有一个window对象:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="cp"&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;html&lt;/span&gt; &lt;span class="na"&gt;lang=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;cn&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;title&amp;gt;&lt;/span&gt;Learn JavaScript&lt;span class="nt"&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;charset=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;utf-8&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;frameset&lt;/span&gt; &lt;span class="na"&gt;rows=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;250,*&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;frame&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;top_frame.html&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;topFrame&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/frame&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;frameset&lt;/span&gt; &lt;span class="na"&gt;cols=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;50%,50%&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;frame&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;left_frame.html&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;leftFrame&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/frame&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;frame&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;right_frame.html&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;rightFrame&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/frame&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/frameset&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/frameset&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;框架网页显示以及每个框架的访问方式:&lt;/p&gt;
&lt;p&gt;&lt;img alt="frame" src="http://ww1.sinaimg.cn/large/95202659gw1eybcdk9b5kj20qk0gr75e.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;其中, 由于&lt;code&gt;top&lt;/code&gt;始终指向最高层框架, 使用&lt;code&gt;top&lt;/code&gt;来访问是最好的方式;&lt;/p&gt;
&lt;h3&gt;窗口&lt;/h3&gt;
&lt;p&gt;window对象中提供的窗口属性有很多, 但是不同的浏览器可能具有不同的使用方式, 操作窗口之前确定浏览器的类型比较重要;&lt;/p&gt;
&lt;p&gt;通过&lt;code&gt;window.open()&lt;/code&gt;可以弹出一个新的窗口, 初始化时可传入窗口属性, 通过&lt;code&gt;close()&lt;/code&gt;方法可以关闭窗口;&lt;/p&gt;
&lt;p&gt;窗口有如下属性方法:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;screenLeft&lt;/code&gt;、&lt;code&gt;screenTop&lt;/code&gt;: 获取窗口边缘位置; 或者为&lt;code&gt;screenX&lt;/code&gt;、&lt;code&gt;screenY&lt;/code&gt;;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;moveTo&lt;/code&gt;: 移动到某个位置, 接受两个参数为新位置的坐标值;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;moveBy&lt;/code&gt;: 移动, 接受两个参数为水平向右和垂直向上&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;一般而言, 浏览器会默认阻止窗口弹出, 而且体验也不好, 尽量别用这个;&lt;/p&gt;
&lt;h3&gt;延迟调用和间歇调用&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;setTimeout()&lt;/code&gt;方法可以设置延迟调用, 接受两个参数, 第一个为调用的函数, 第二个为延迟毫秒数, 该函数执行后返回一个&lt;code&gt;id&lt;/code&gt;;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;clearTimeout()&lt;/code&gt;接受一个延迟调用的&lt;code&gt;id&lt;/code&gt;并且取消延迟调用;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;setInterval()&lt;/code&gt;方法可以设置间歇调用, 和延迟调用类似, 但是循环执行;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;clearInterval()&lt;/code&gt;和取消延迟调用类似;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;应该避免使用间歇调用, 而使用延迟调用来模拟间歇调用;&lt;/p&gt;
&lt;h3&gt;系统对话框&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;alert()&lt;/code&gt;方法弹出一个文档;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;confirm()&lt;/code&gt;方法弹出一个确认框, 并且获取确认值;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;prompt()&lt;/code&gt;方法弹出一个对话框, 返回用户输入值;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;不管是弹出窗口还是对话框, 感觉都不是很舒服, 希望以后不要用到这些;&lt;/p&gt;
&lt;h2&gt;location对象&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;location&lt;/code&gt;对象提供当前窗口中加载的文档有关的信息, 该对象既是&lt;code&gt;window&lt;/code&gt;的属性, 也是&lt;code&gt;document&lt;/code&gt;的属性;&lt;/p&gt;
&lt;p&gt;其属性有:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;hash&lt;/code&gt;, 返回URL中的hash(#后跟零或多个字符串);&lt;/li&gt;
&lt;li&gt;&lt;code&gt;host&lt;/code&gt;, 返回服务器名称和端口号;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;port&lt;/code&gt;, 返回URL中的端口号;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;hostname&lt;/code&gt;, 返回不带端口号的服务器名称;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;href&lt;/code&gt;, 返回当前加载页面的完整URL;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;pathname&lt;/code&gt;, 返回URL中的目录或者文件名;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;protocol&lt;/code&gt;, 返回页面使用协议;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;search&lt;/code&gt;, 返回URL查询字符串(?后跟一个赋值, 多个以&amp;amp;分割)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;根据以上属性, 可以获取到当前页面URL的具体情况, 修改这些属性可以将页面引导至其他位置, 每次修改其中的属性, 页面都会重新加载(hash除外);&lt;/p&gt;
&lt;p&gt;通过修改&lt;code&gt;location&lt;/code&gt;的&lt;code&gt;hash&lt;/code&gt;可以完成导航, 也可以修改&lt;code&gt;pathname&lt;/code&gt;来引导至服务器其他位置等等;&lt;/p&gt;
&lt;p&gt;常用操作为:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;assign()&lt;/code&gt;, 改变浏览器位置并且生成历史记录, 与修改&lt;code&gt;href&lt;/code&gt;属性效果相同;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;replace()&lt;/code&gt;, 改变浏览器位置并且不生成历史记录;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;reload()&lt;/code&gt;, 重新加载页面, 若传入一个参数&lt;code&gt;true&lt;/code&gt;则会强制从服务器加载, 否则有可能使用缓存; 由于&lt;code&gt;reload()&lt;/code&gt;之后的代码不一定执行, 所以最好将该方法放到代码最后一行;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;其他对象&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;navigator&lt;/code&gt;对象主要用于检测浏览器类型, 不同的浏览器对该对象中属性的支持并不相同;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;screen&lt;/code&gt;对象用来表示客户端能力, 包括浏览器窗口外部的显示器信息, 如像素宽度、高度、DPI等等; 不同浏览器支持不同;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;history&lt;/code&gt;对象用于保存上网历史记录, 以及历史记录之间的跳转;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;客户端检测&lt;/h2&gt;
&lt;p&gt;由于不同浏览器之间, 相同浏览器的不同版本之间对某些函数方法的支持都可能不同, 能力检测的目标不局限于识别浏览器的类型, 而是直接识别浏览器对某种方法是否支持:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c1"&gt;// 作者: Peter Michaux&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;isHostMethod&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;object&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;property&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;t&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;typeof&lt;/span&gt; &lt;span class="nx"&gt;object&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;property&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;t&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;function&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt;
            &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;t&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;object&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;object&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;property&lt;/span&gt;&lt;span class="p"&gt;]))&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt;
            &lt;span class="nx"&gt;t&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;unnknown&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;通过检测一个对象中是否存在某个方法, 如果不存在则使用其他替代方法来完成代码在不同浏览器中的适配;&lt;/p&gt;
&lt;p&gt;如检测浏览器是否支持&lt;code&gt;document.getElementById()&lt;/code&gt;方法, 如果不支持, 则可能为IE早期版本, 使用&lt;code&gt;document.all&lt;/code&gt;方法代替, 如:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;getElement&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;isHostMethod&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;)){&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;doument&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;isHostMethod&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;all&lt;/span&gt;&lt;span class="p"&gt;)){&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;all&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;No way to retrieve element!&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;上述代码完成一个更加可靠的&lt;code&gt;getElement&lt;/code&gt;方法用以适配早期IE浏览器;&lt;/p&gt;
&lt;p&gt;注意浏览器能力检测并不是浏览器检测, 一个浏览器中的某个能力特色也并不足以证明就是该浏览器, 不应该只检测某一个比较典型的能力就认为是某种浏览器从而决定其他能力, 在逻辑上再清晰不过的错误, 很多网站上都存在(来自js高程书中原话);&lt;/p&gt;
&lt;p&gt;除了浏览器能力的检测, 类似方法可以用来检测浏览器的缺陷(bug), 实现方式就是用一个判断函数来检查是否具有缺陷, 并尽可能解决; bug检测往往涉及运行代码, 所以应该仅仅检测关键bug, 并且在脚本开头就执行检测工作;&lt;/p&gt;
&lt;p&gt;除了直接检查浏览器能力和bug, 还可以通过&lt;code&gt;navigator&lt;/code&gt;对象中的各种浏览器类型属性, 检测出浏览器的具体类型和版本等信息;&lt;/p&gt;
&lt;p&gt;由于浏览器代理字串可以被轻易修改(爬虫中往往就会修改代理来仿照浏览器), 所以应该优先选择能力检测, 仅仅在能力检测等不可用或者需要使用浏览器代理检测来决定表现能力等必须使用代理检测的情况下, 才选择代理检测;&lt;/p&gt;</summary><category term="javascript"></category></entry><entry><title>JavaScript函数表达式</title><link href="http://www.lyon0804.com/javascripthan-shu-biao-da-shi.html" rel="alternate"></link><updated>2015-11-22T00:00:00+08:00</updated><author><name>lyon</name></author><id>tag:www.lyon0804.com,2015-11-22:javascripthan-shu-biao-da-shi.html</id><summary type="html">&lt;h2&gt;函数的定义&lt;/h2&gt;
&lt;p&gt;JavaScript中函数可以通过两种形式定义:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;使用&lt;code&gt;function&lt;/code&gt;关键字声明, 函数的声明会在代码执行之前进行;&lt;/li&gt;
&lt;li&gt;使用函数表达式声明, 可以选择使用一个对象保存函数, 也可以选择不保存而作为匿名函数使用;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c1"&gt;// 使用函数声明&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;

&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="c1"&gt;// 使用函数表达式&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;foo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;

&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;上面两种方式的最大区别是, 第一种方式会在代码运行前进行, 从而可以在声明之前调用; 第二种方式只会在代码运行过程中进行, 在函数表达式之前调用该函数将会发生错误;&lt;/p&gt;
&lt;p&gt;另外一个区别是, 由于函数的声明会在代码运行前进行, 所以不可以声明两个同名函数, 哪怕是在分支结构中, 此时浏览器只会返回其中一个申明, 具体返回的函数根据浏览器不同而不同;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c1"&gt;// 以下代码将产生不可预知错误！&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;condition&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
    &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;

    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;

    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="c1"&gt;// 应该使用函数表达式正确完成:&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;condition&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;foo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;

    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;foo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;

    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;递归&lt;/h2&gt;
&lt;p&gt;由于函数名称只是一个对象指针, 如果在函数中使用函数名调用本身, 则如果在外部更改函数的内容会引发调用错误;&lt;/p&gt;
&lt;p&gt;如, 一个阶乘函数的递归实现中:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;factorial&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;num&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;num&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;num&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;factorial&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;num&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nx"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;factorial&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;  &lt;span class="c1"&gt;// 24&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;anotherFactorial&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;factorial&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;factorial&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;anotherFactorial&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;  &lt;span class="c1"&gt;// 错误!在递归中无法调用factorial()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;为了消除该错误, 应该避免在递归中使用函数名, 而使用&lt;code&gt;argument.callee()&lt;/code&gt;来获取当前函数代替; 但是某些情况下, 该函数并不能被使用, 并且在文档中明确指出该方法将在未来取消; 更好的做法是使用函数表达式来完成:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;factorial&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;f&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;num&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;num&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;num&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;f&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;num&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="nx"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;factorial&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;  &lt;span class="c1"&gt;// 24&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;anotherFactorial&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;factorial&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;factorial&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;anotherFactorial&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;  &lt;span class="c1"&gt;// 24&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;作用域链&lt;/h2&gt;
&lt;p&gt;函数包含两个部分: &lt;strong&gt;执行环境&lt;/strong&gt;和&lt;strong&gt;代码对象&lt;/strong&gt;;&lt;/p&gt;
&lt;p&gt;执行环境包含一个作用域链, 该作用域链本质上是一个指向变量对象的列表, 按顺序依次为: 当前活动对象 -&amp;gt; 上一级活动对象 -&amp;gt; ... -&amp;gt; 全局变量对象; 其中, 上一级活动对象是指当函数包含在其他函数中时, 可以访问其他函数的活动对象, 此时称内部的函数为外部函数的&lt;em&gt;闭包&lt;/em&gt;;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;envValue&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;envirValue&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;outerFunction&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;outerValue&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;out1&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;innerFunction&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
        &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;innerValue&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;envValue&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39; &amp;#39;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;outerValue&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;in innerFunction&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;innerValue&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;innerFunction&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nx"&gt;innerFunctionCopy&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;outerFunction&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="nx"&gt;innerFunction&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;innerFunctionCopy&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;  &lt;span class="c1"&gt;// envirValue out1in innerFunction&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;上面的例子中, &lt;code&gt;innerFunction&lt;/code&gt;是&lt;code&gt;outerFunction&lt;/code&gt;的一个闭包, &lt;code&gt;innerFunction&lt;/code&gt;的作用域链包含:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;当前活动对象: innerValue;&lt;/li&gt;
&lt;li&gt;上一级活动对象: outerValue, innerFunction;&lt;/li&gt;
&lt;li&gt;全局变量对象: envValue, outerFunction, innerFunctionCopy, innerFunction, ...;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;全局变量对象之所以包含一个省略号, 因为后面在全局环境中添加的内容仍然会包含到作用域链中;&lt;/p&gt;
&lt;p&gt;而由于作用域链访问时的顺序, 即使&lt;code&gt;innerFunctionCopy&lt;/code&gt;也使用&lt;code&gt;innerFunction&lt;/code&gt;的名字, 或者将&lt;code&gt;innerFunction&lt;/code&gt;改成其他的对象, 内部函数的仍然可以正常进行;&lt;/p&gt;
&lt;p&gt;这是因为, 当函数执行完毕后, 如果包含闭包, 则该闭包的作用域链中包含该函数的局部对象的引用, 此时, 函数的局部对象并不会被销毁, 也就是会将&lt;code&gt;innerFunction&lt;/code&gt;保留在内部作用域链中; 外部函数的作用域链则仍然会被销毁;&lt;/p&gt;
&lt;p&gt;但是要注意的是, 上例中不能修改&lt;code&gt;outerFunction&lt;/code&gt;为其他对象, 因为outerFunction在全局变量对象中, 一旦修改, 则真正修改了作用域链中的该函数, 就会造成递归中提到的错误;&lt;/p&gt;
&lt;p&gt;由于闭包的这个特性, 为了避免占用内存, 应该释放对其他函数作用域的引用, 如:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nx"&gt;innerFunctionCopy&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;定义时与运行时&lt;/h2&gt;
&lt;p&gt;一个函数在被声明或者定义时, 其代码对象并不会被执行, 只有当使用&lt;code&gt;()&lt;/code&gt;调用函数时, 其代码对象才会被执行;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;createFunctions&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Array&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
        &lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;};&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;results&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;createFunctions&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="nx"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;results&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;f&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;f&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;}))&lt;/span&gt;  &lt;span class="c1"&gt;// 10,10,10,10,10,10,10,10,10,10&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ol&gt;
&lt;li&gt;执行外部函数createFunction(), 返回一个数组;&lt;/li&gt;
&lt;li&gt;在外部函数中, 给数组的每个元素赋值为一个函数对象;&lt;/li&gt;
&lt;li&gt;执行每个函数对象, 在作用域链中寻找变量&lt;code&gt;i&lt;/code&gt;, 并且在上一级中找到, 此时, &lt;code&gt;i == 10&lt;/code&gt;;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;上面的例子可以看到, 将一个函数赋值给一个变量, 并不能执行函数, 而当执行函数时, 作用域链中的对象可能已经发生改变, 为了避免这个错误, 应该赋值函数的执行结果而非代码对象:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;createFunctions&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Array&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

    &lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
        &lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}();&lt;/span&gt;   &lt;span class="c1"&gt;// 返回执行结果;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;results&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;createFunctions&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="nx"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;results&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;  &lt;span class="c1"&gt;// 0,1,2,3,4,5,6,7,8,9&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;同样的问题在使用&lt;code&gt;this&lt;/code&gt;对象时也会发生:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;env&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;object&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;object&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;getNameFunc&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;};&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nx"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getNameFunc&lt;/span&gt;&lt;span class="p"&gt;()());&lt;/span&gt;  &lt;span class="c1"&gt;// env&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;上述代码中, 完成下面的操作:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;getNameFunc()执行结果返回一个子函数, 该子函数返回&lt;code&gt;this.name&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;再跟一个括号来执行该子函数, 此时, 子函数的作用域链被暴露在全局环境中, 并不再是外部函数的闭包;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;类似于:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nx"&gt;print&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getNameFunc&lt;/span&gt;&lt;span class="p"&gt;())());&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;而如果想要返回&lt;code&gt;object&lt;/code&gt;则应该将子函数暴露在外部函数中, 或者将外部作用域的&lt;code&gt;this&lt;/code&gt;变量保存到其他对象中, 更改内部函数的作用域链;&lt;/p&gt;
&lt;p&gt;改变执行顺序:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;env&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;object&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;object&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;getNameFunc&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;};&lt;/span&gt;
    &lt;span class="p"&gt;}()&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nx"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getNameFunc&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;  &lt;span class="c1"&gt;// object&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;保存&lt;code&gt;this&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;env&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;object&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;object&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;getNameFunc&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
        &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;that&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;that&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;};&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nx"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getNameFunc&lt;/span&gt;&lt;span class="p"&gt;()());&lt;/span&gt;  &lt;span class="c1"&gt;// object&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;上述两种处理都可以得到相同的效果, 但是原理却并不相同; 第一种方式是改变了两个函数的执行顺序, 第二种方式是改变了函数的作用域链;&lt;/p&gt;
&lt;p&gt;PS: 有一个书上指明但是个人认为会引起混肴的地方:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;env&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;object&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;object&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;getNameFunc&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nx"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getNameFunc&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;  &lt;span class="c1"&gt;// object&lt;/span&gt;
&lt;span class="nx"&gt;print&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getNameFunc&lt;/span&gt;&lt;span class="p"&gt;)());&lt;/span&gt;  &lt;span class="c1"&gt;// object&lt;/span&gt;
&lt;span class="nx"&gt;print&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getNameFunc&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getNameFunc&lt;/span&gt;&lt;span class="p"&gt;)());&lt;/span&gt;  &lt;span class="c1"&gt;// env&lt;/span&gt;
&lt;span class="nx"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getNameFunc&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getNameFunc&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// function (){ return this.name; }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;引起上面的问题主要是函数的特性引起, 而是赋值操作的返回值是函数本身, 此时再调用该函数, 自然就将其暴露在全局环境中了; 而再其他语言中, 赋值操作返回值一般为是否成功的状态;&lt;/p&gt;
&lt;h2&gt;模仿私有作用域&lt;/h2&gt;
&lt;p&gt;JavaScript中没有块级作用域, 也就是说, 在&lt;code&gt;if&lt;/code&gt;和&lt;code&gt;for&lt;/code&gt;等语句中的变量在出了该语句块之后依然生效; 但是可以借助函数的作用域链的形式, 模仿封装一个块级作用域的功能:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
    &lt;span class="c1"&gt;// 块级作用域&lt;/span&gt;
&lt;span class="p"&gt;})();&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这里要注意的一点是, &lt;code&gt;function&lt;/code&gt;会被当做关键字, 会被当成函数声明处理, 函数声明后面不可以跟括号; 用括号将整个函数体括起来, 才能使其成为匿名函数表达式;&lt;/p&gt;
&lt;p&gt;当一些地方需要创建一个私有作用域, 防止一些零时变量污染作用域, 则可以使用以上的方式模拟一个私有作用域;&lt;/p&gt;
&lt;p&gt;该匿名没有被其他对象引用, 在执行完毕后并不会造成内存占用的问题;&lt;/p&gt;
&lt;h2&gt;私有变量&lt;/h2&gt;
&lt;p&gt;由于在函数中定义的局部变量不可以在函数外被使用, 同样的在构造函数中, 对象也不可访问到构造函数中的变量, 只能通过&lt;code&gt;this&lt;/code&gt;给对象添加属性, 根据这个特性, 可以模拟私有属性出来:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Person&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;xiaoming&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Person&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;xiaoming&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;xiaoming&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;  &lt;span class="c1"&gt;// undefined&lt;/span&gt;
&lt;span class="nx"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;xiaoming&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getName&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;//&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;此时, 实例化对象无法访问到函数中的私有变量&lt;code&gt;name&lt;/code&gt;, 只能通过对象共有属性&lt;code&gt;getName&lt;/code&gt;来访问;&lt;/p&gt;
&lt;p&gt;通过下面的方式可以模拟静态属性:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;

    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="nx"&gt;Person&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
        &lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;

    &lt;span class="nx"&gt;Person&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;prototype&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="nx"&gt;Person&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;prototype&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
        &lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="p"&gt;})();&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;xiaoming&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Person&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;xiaoming&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;xiaoming&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getName&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;  &lt;span class="c1"&gt;// xiaoming&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;xiaohong&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Person&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="nx"&gt;xiaohong&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setName&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;xiaohong&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;xiaohong&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getName&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;  &lt;span class="c1"&gt;// xiaohong&lt;/span&gt;
&lt;span class="nx"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;xiaoming&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getName&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;  &lt;span class="c1"&gt;// xiaohong&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;通过以上模拟, 一个实例对象对静态变量的修改会影响到所有的实例对象;&lt;/p&gt;
&lt;h2&gt;模块模式&lt;/h2&gt;
&lt;p&gt;一个单例对象可以用一个字面量对象来表示:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;singleton&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;method&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
        &lt;span class="c1"&gt;// ...&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;通过模拟私有化变量, 可以对单例模式进行增强, 为其添加私有属性和方法, 甚至使其成为某个类型的实例:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;singleton&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;

    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;privateValue&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;privateFunction&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;object&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;CustomType&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;  &lt;span class="c1"&gt;// 创建特定类型的实例&lt;/span&gt;

    &lt;span class="nx"&gt;object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;publicValue&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="nx"&gt;object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;publicMethod&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;

    &lt;span class="p"&gt;};&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;object&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}();&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;上述代码中, 创建了一个单例对象&lt;code&gt;singleton&lt;/code&gt;, 并且构建了私有环境为其添加私有属性, 通过返回一个对象的方式, 完成其公有属性的定义;&lt;/p&gt;</summary><category term="javascript"></category></entry><entry><title>JavaScript面向对象</title><link href="http://www.lyon0804.com/javascriptmian-xiang-dui-xiang.html" rel="alternate"></link><updated>2015-11-18T00:00:00+08:00</updated><author><name>lyon</name></author><id>tag:www.lyon0804.com,2015-11-18:javascriptmian-xiang-dui-xiang.html</id><summary type="html">&lt;h2&gt;理解&lt;/h2&gt;
&lt;p&gt;JavaScript中并没有类的概念, 对象的定义是一系列无序属性的集合, 通过给对象添加各种属性来完成对象的构造:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;str&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
    &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;lt;p&amp;gt;&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;str&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;lt;/p&amp;gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;obj&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="nx"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;xiaoming&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;age&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;16&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sayHi&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
    &lt;span class="nx"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Hi, this is &amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;, I am &amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;age&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot; years old.&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="nx"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sayHi&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;  &lt;span class="c1"&gt;// Hi, this is xiaoming, I am 16 years old.&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;也通过统一的函数对对象添加统一属性来模拟类的功能:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;createPerson&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;age&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;obj&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="nx"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nx"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;age&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;age&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nx"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sayHi&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
        &lt;span class="nx"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Hi, this is &amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;, I am &amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;age&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot; years old.&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;xiaoming&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;createPerson&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;xiaoming&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;16&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;xiaoming&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sayHi&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;  &lt;span class="c1"&gt;// Hi, this is xiaoming, I am 16 years old.&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;但是这样会将对象所有的属性和方法都放到对象本身中, 在内存上有比较大的浪费, 在其他语言(如:Ruby)中, 会将方法放在类中, 属性放在对象本身, 对象调用方法时再到类中调用的方式;&lt;/p&gt;
&lt;p&gt;为了实现这些特性, 就要使用JavaScript的&lt;code&gt;prototype&lt;/code&gt;(原型), 这也是称作原型语言的原因. 其他如&lt;code&gt;Lua&lt;/code&gt;、&lt;code&gt;Io&lt;/code&gt;等也是原型语言;&lt;/p&gt;
&lt;p&gt;原型模式比一般的类模式更加灵活, 可以控制的内容更多, 并且通过设置属性的特性, 完成非常丰富的面向对象特性;&lt;/p&gt;
&lt;h2&gt;属性特性&lt;/h2&gt;
&lt;p&gt;对象的属性具有一些特性, 这些特性不能被外部直接访问, 通过设置这些特性, 丰富对象的特性;&lt;/p&gt;
&lt;p&gt;属性的特性并不能直接访问, 只能通过&lt;code&gt;Object.defineProperty()&lt;/code&gt;方法设置, 该方法接受三个参数: 属性所在对象、属性名字、描述符对象(即特性以及对应值的字典); 通过&lt;code&gt;Object.getOwnPropertyDescription()&lt;/code&gt;方法, 可以查看已有属性的特性, 该方法接受两个参数: 属性所在对象、属性名字;&lt;/p&gt;
&lt;h3&gt;数据属性&lt;/h3&gt;
&lt;p&gt;数据属性具有以下四个特性:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;[[configurable]]&lt;/code&gt;: 表示能否通过&lt;code&gt;delete&lt;/code&gt;删除属性或者重定义属性, 能否修改属性的特性或者能否将属性改为访问器属性; 直接在对象上定义时, 默认为&lt;code&gt;true&lt;/code&gt;;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;[[enumerable]]&lt;/code&gt;: 表示能否通过&lt;code&gt;for-in&lt;/code&gt;循环来返回属性, 直接在对象上定义时, 默认为&lt;code&gt;true&lt;/code&gt;;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;[[writable]]&lt;/code&gt;: 表示能否修改属性的值, 直接在对象上定义时, 默认为&lt;code&gt;true&lt;/code&gt;;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;[[value]]&lt;/code&gt;: 包含该属性的数据值, 默认为&lt;code&gt;undefined&lt;/code&gt;;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;obj&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="nx"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;xiaoming&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;age&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;16&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;defineProperty&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;score&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;configurable&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;enumerable&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;59&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="k"&gt;delete&lt;/span&gt; &lt;span class="nx"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;score&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;score&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;60&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;score&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;  &lt;span class="c1"&gt;// 59&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="nx"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
    &lt;span class="nx"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// name, age&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;访问器属性&lt;/h3&gt;
&lt;p&gt;访问器属性即包含&lt;code&gt;getter&lt;/code&gt;和&lt;code&gt;setter&lt;/code&gt;函数的属性, 其本身并不包含任何值, 该属性有以下四个特性:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;[[configurable]]&lt;/code&gt;: 表示能否通过&lt;code&gt;delete&lt;/code&gt;删除属性或者重定义属性, 能否修改属性的特性或者能否将属性改为数据属性; 用&lt;code&gt;Object.defineProperty()&lt;/code&gt;定义时, 默认为&lt;code&gt;false&lt;/code&gt;;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;[[enumerable]]&lt;/code&gt;: 表示能否通过&lt;code&gt;for-in&lt;/code&gt;循环来返回属性, 用&lt;code&gt;Object.defineProperty()&lt;/code&gt;定义时, 默认为&lt;code&gt;false&lt;/code&gt;;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;[[get]]&lt;/code&gt;: 表示&lt;code&gt;getter&lt;/code&gt;方法, 默认为&lt;code&gt;undefined&lt;/code&gt;;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;[[set]]&lt;/code&gt;: 表示&lt;code&gt;setter&lt;/code&gt;方法, 默认为&lt;code&gt;undefined&lt;/code&gt;;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;可以看到, 访问器属性只能通过&lt;code&gt;Object.defineProperty()&lt;/code&gt;来定义;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;obj&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="nx"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;xiaoming&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;age&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;16&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;defineProperty&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;_score&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,{&lt;/span&gt;
    &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;59&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;defineProperty&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;score&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,{&lt;/span&gt;
    &lt;span class="nx"&gt;enumerable&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;get&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;_score&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="nx"&gt;set&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
        &lt;span class="nx"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;you can not set the score!&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;_score&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;_score&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="nx"&gt;description&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getOwnPropertyDescriptor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;_score&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;description&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;configurable&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;  &lt;span class="c1"&gt;// false&lt;/span&gt;
&lt;span class="nx"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;description&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;enumerable&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;  &lt;span class="c1"&gt;// false&lt;/span&gt;
&lt;span class="nx"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;score&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;60&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  &lt;span class="c1"&gt;// you can not set the score!&lt;/span&gt;
&lt;span class="nx"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;score&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;  &lt;span class="c1"&gt;// 59&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="nx"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
    &lt;span class="nx"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// name, age&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;在访问器属性中, 可以修改其他的属性, 注意一定不要在&lt;code&gt;set&lt;/code&gt;中给自身属性赋值, 这相当于是调用&lt;code&gt;set&lt;/code&gt;, 造成自身调用的死循环;&lt;/p&gt;
&lt;h2&gt;原型&lt;/h2&gt;
&lt;h3&gt;构造器模式&lt;/h3&gt;
&lt;p&gt;JavaScript中除了如开头的工厂模式创建对象之外, 还可以借助&lt;code&gt;this&lt;/code&gt;来实现构造器模式:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Person&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;age&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;age&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;age&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sayHi&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
        &lt;span class="nx"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Hi, this is &amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;, I am &amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;age&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot; years old.&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;xiaoming&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Person&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;xiaoming&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;16&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;xiaoming&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sayHi&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;  &lt;span class="c1"&gt;// Hi, this is xiaoming, I am 16 years old.&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;上述过程中, &lt;code&gt;new Person('xiaoming', 16)&lt;/code&gt;完成以下四个步骤:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;创建一个新对象;&lt;/li&gt;
&lt;li&gt;将构造函数的作用域赋给新对象(使&lt;code&gt;this&lt;/code&gt;指向该对象);&lt;/li&gt;
&lt;li&gt;执行构造函数;&lt;/li&gt;
&lt;li&gt;返回新对象;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;同时, 通过以上过程创建的对象会附带一个构造器(&lt;code&gt;constructor&lt;/code&gt;)属性来指向构造函数; 由该方法创建的对象可以通过&lt;code&gt;instanceof&lt;/code&gt;关键词的判断(就像类的表现一样):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nx"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;xiaoming&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;constructor&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="nx"&gt;Person&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;  &lt;span class="c1"&gt;// true&lt;/span&gt;
&lt;span class="nx"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;xiaoming&lt;/span&gt; &lt;span class="k"&gt;instanceof&lt;/span&gt; &lt;span class="nx"&gt;Person&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;  &lt;span class="c1"&gt;// true&lt;/span&gt;
&lt;span class="nx"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;xiaoming&lt;/span&gt; &lt;span class="k"&gt;instanceof&lt;/span&gt; &lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;  &lt;span class="c1"&gt;// true&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;引入原型&lt;/h3&gt;
&lt;p&gt;在构造器模型中, 对象的&lt;code&gt;constructor&lt;/code&gt;属性正确指向了构造出该对象的函数, 所有该函数实例化的对象都有这个属性, 并且都指向该函数, 并且该属性并不属于对象本身, 这里其实就用到了开头提到的原型:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;原型&lt;code&gt;prototype&lt;/code&gt;是函数的一个默认属性, 该属性指向一个原型对象, 并且该对象最初只有一个&lt;code&gt;constructor&lt;/code&gt;属性, 指向函数;&lt;/li&gt;
&lt;li&gt;函数实例化的每一个对象都包含了一个内部属性&lt;code&gt;__proto__&lt;/code&gt;指向函数的原型;&lt;/li&gt;
&lt;li&gt;在一个对象访问某个属性时, 如果该属性不在对象中, 则会从对象的原型中访问;&lt;/li&gt;
&lt;li&gt;通过&lt;code&gt;hasOwnProperty()&lt;/code&gt;可以判断一个属性究竟是从哪里访问的; 而通过&lt;code&gt;in&lt;/code&gt;操作符则仅仅判断对象是否可以访问该属性, 并不检查是否在原型中; 如上例&lt;code&gt;xiaoming.constructor&lt;/code&gt;实际上访问的是原型的&lt;code&gt;constructor&lt;/code&gt;属性;&lt;/li&gt;
&lt;li&gt;实例对象的指针仅仅指向构造函数的原型, 而不指向构造函数本身;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;以下的例子更加清晰地描述了原型的特性;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Foo&lt;/span&gt;&lt;span class="p"&gt;(){};&lt;/span&gt;
&lt;span class="nx"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;Foo&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;prototype&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;constructor&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="nx"&gt;Foo&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;  &lt;span class="c1"&gt;// true&lt;/span&gt;
&lt;span class="nx"&gt;Foo&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;prototype&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;xiaoming&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;Foo&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;prototype&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;age&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;16&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;xiaoming&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Foo&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="nx"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;xiaoming&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;__proto__&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;  &lt;span class="c1"&gt;// xiaoming&lt;/span&gt;
&lt;span class="nx"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;xiaoming&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;  &lt;span class="c1"&gt;// xiaoming&lt;/span&gt;
&lt;span class="nx"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;xiaoming&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;hasOwnProperty&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;name&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;  &lt;span class="c1"&gt;// false&lt;/span&gt;
&lt;span class="nx"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;name&amp;#39;&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="nx"&gt;xiaoming&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;  &lt;span class="c1"&gt;// true&lt;/span&gt;
&lt;span class="nx"&gt;xiaoming&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;xiaohong&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;xiaoming&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;hasOwnProperty&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;name&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;  &lt;span class="c1"&gt;// true&lt;/span&gt;
&lt;span class="nx"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;xiaoming&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;  &lt;span class="c1"&gt;// xiaohong&lt;/span&gt;
&lt;span class="nx"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;xiaoming&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;__proto__&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;  &lt;span class="c1"&gt;// xiaoming&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;blockquote&gt;
&lt;p&gt;注意, 通过&lt;code&gt;for-in&lt;/code&gt;来遍历对象属性时, 实例中的属性如果设置&lt;code&gt;enumerable = false&lt;/code&gt;则不会返回, 而在原型中的属性, 无论该特性为何值, 都将被返回; 在IE8及更早版本中除外;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;原型的特性&lt;/h3&gt;
&lt;p&gt;进行以下实验:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Foo&lt;/span&gt;&lt;span class="p"&gt;(){};&lt;/span&gt;
&lt;span class="nx"&gt;old_prototype&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;Foo&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;prototype&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;xiaohong&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Foo&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="nx"&gt;old_prototype&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;xiaohong&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;xiaohong&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;  &lt;span class="c1"&gt;// xiaohong&lt;/span&gt;
&lt;span class="nx"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;xiaohong&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;__proto__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="nx"&gt;old_prototype&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;  &lt;span class="c1"&gt;// true&lt;/span&gt;
&lt;span class="nx"&gt;Foo&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;prototype&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;xiaoming&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;age&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;16&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nx"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;old_prototype&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;constructor&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="nx"&gt;Foo&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;  &lt;span class="c1"&gt;// true&lt;/span&gt;
&lt;span class="nx"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;Foo&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;prototype&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;constructor&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="nx"&gt;Foo&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;  &lt;span class="c1"&gt;// false&lt;/span&gt;
&lt;span class="nx"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;Foo&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;prototype&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;__proto__&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;constructor&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;  &lt;span class="c1"&gt;// true&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;xiaoming&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Foo&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="nx"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;xiaohong&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;constructor&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="nx"&gt;Foo&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// true&lt;/span&gt;
&lt;span class="nx"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;xiaoming&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;constructor&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="nx"&gt;Foo&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;  &lt;span class="c1"&gt;// false&lt;/span&gt;
&lt;span class="nx"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;xiaoming&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;constructor&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;  &lt;span class="c1"&gt;// true&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;上述过程描述了以下事实:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;修改或者添加原型的某一个属性后, 实例对象如果访问的是原型中的属性, 则会被动态刷新;&lt;/li&gt;
&lt;li&gt;函数和原型是两个独立的对象, 仅仅通过各自的属性指向对方产生关联;&lt;/li&gt;
&lt;li&gt;可以重写函数的原型, 但是此时只保留了函数通过&lt;code&gt;prototype&lt;/code&gt;与原型的关联, 而不具备原型通过&lt;code&gt;constructor&lt;/code&gt;与函数的关联;&lt;/li&gt;
&lt;li&gt;由于原型是一个对象, 当新原型自身不存在的&lt;code&gt;constructor&lt;/code&gt;方法时, 将会访问其原型对象的&lt;code&gt;constructor&lt;/code&gt;方法, 即&lt;code&gt;Object()&lt;/code&gt;的原型的&lt;code&gt;constructor&lt;/code&gt;;&lt;/li&gt;
&lt;li&gt;旧的原型对象如果仍然被使用而没有回收, 则依然拥有指向函数的&lt;code&gt;constructor&lt;/code&gt;属性;&lt;/li&gt;
&lt;li&gt;重写原型之前的实例对象指向了旧的原型; 重写原型之后的实例对象指向了新的原型;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;根据以上事实, 可以想到(为方便描述, 称上述函数为类型):&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;修改或者添加已有类型的原型的属性, 而不修改原型本身, 则可以调整或者添加已有类型的功能;&lt;/li&gt;
&lt;li&gt;修改已有类型的原型本身, 则会切断旧原型和类型的关系;&lt;/li&gt;
&lt;li&gt;如果原型的属性是可变值, 如数组、对象等, 则某个实例对数组中的某个值、对象中的某个属性做出的修改会在原型的基础上进行, 从而改变所有实例的属性;&lt;/li&gt;
&lt;li&gt;如果原型的属性是不可变值, 则某个实例修改该属性时, 实际上是在实例自身中创建了一个新的同名属性, 该修改不会影响其他实例的属性;&lt;/li&gt;
&lt;li&gt;基于以上两点, 应该只在原型中保存可共享的属性, 避免存放可变值;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;构造模式和原型组合&lt;/h3&gt;
&lt;p&gt;为了避免原型中的一些不应该共享的属性被共享, 应该组合构造模式和原型的特点, 如:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Person&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;age&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;age&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;age&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;friends&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nx"&gt;Person&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;prototype&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;constructor&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Person&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;sayHi&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
        &lt;span class="nx"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Hi, this is &amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;, I am &amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;age&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot; years old.&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;xiaohong&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Person&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;xiaohong&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;xiaohong&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;friends&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;xiaoming&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;xiaopang&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;xiaoming&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Person&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;xiaoming&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;16&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;xiaoming&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;friends&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;xiaohong&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;xiaopang&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="nx"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;xiaohong&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;friends&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;  &lt;span class="c1"&gt;// xiaoming,xiaopang&lt;/span&gt;
&lt;span class="nx"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;xiaoming&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;friends&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;  &lt;span class="c1"&gt;// xiaohong,xiaopang&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;上面的特性也基于类的面向对象语言已经很相似, 即类中保存了方法等共享属性, 实例对象中保存其他属性; 可以将原型看做是类, 那么在原型中的属性也就是类属性, 当实例对象中没有该属性时, 会从类属性中调用, 如果类属性是可变对象, 则实例对其进行的更改也是在类属性的基础上, 这些描述看起来比较复杂, 结合Python等语言的属性查找方式则可以很好理解;&lt;/p&gt;
&lt;h3&gt;动态原型模式&lt;/h3&gt;
&lt;p&gt;构造模式和原型的组合很好解决了属性共享的问题, 但是需要分两块进行, 通过动态原型模式将这两个部分全部封装到构造函数中:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Person&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;age&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;age&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;age&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;typeof&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sayHi&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;function&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
        &lt;span class="nx"&gt;Person&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;prototype&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sayHi&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
            &lt;span class="nx"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Hi, this is &amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;, I am &amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;age&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot; years old.&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;xiaoming&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Person&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;xiaoming&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;16&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;xiaoming&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sayHi&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;上述代码中, 在构造函数中添加了一个判断, 该判断的作用是检查构造函数是否是初次调用, 如果是初次调用, 则&lt;code&gt;this&lt;/code&gt;中还没有某些应该有的方法(使用任意一个即可完成检查), 此时, 需要往原型中添加需要被共享的属性; 如果不是初次调用, 则由于原型中已经存在共享的属性, 该判断不会通过, 也不会再次修改原型中的共享属性;&lt;/p&gt;
&lt;h3&gt;寄生构造函数模型&lt;/h3&gt;
&lt;p&gt;寄生构造函数是工厂模式的一个扩展, 其写法和工厂模式一样, 用于给已有的类添加一些属性来得到一个特殊的类, 由于该类是通过&lt;code&gt;return&lt;/code&gt;返回得到, 所以创建的对象和构造函数(以及其原型)之间没有任何关系, 所以并不能通过&lt;code&gt;instance of&lt;/code&gt;等操作来确定对象的类型;&lt;/p&gt;
&lt;p&gt;该模式和工厂模式没有本质区别, 只不过在工厂中新建了一个比较具象的类, 而不再是Object基类而已;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;SpecialArray&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;values&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Array&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="nx"&gt;values&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;apply&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;values&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;arguments&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;values&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toPipedString&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;|&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;values&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;colors&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;SpecialArray&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;red&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;blue&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;green&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;稳妥构造函数模型&lt;/h3&gt;
&lt;p&gt;和寄生构造函数模型类似, 稳妥构造函数也是通过返回对象的方式来创建对象, 但是比寄生构造函数模型增加了一些限制:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;不创建公共属性;&lt;/li&gt;
&lt;li&gt;新创建的对象的实例方法不引用this;&lt;/li&gt;
&lt;li&gt;不使用new操作符调用构造函数;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;该模型主要应用于一些不能够使用this以及new的安全环境中;&lt;/p&gt;
&lt;h2&gt;继承&lt;/h2&gt;
&lt;h3&gt;原型链&lt;/h3&gt;
&lt;p&gt;在原型的特性中, 讨论了原型和构造函数之间的关系, 并且知道当访问一个对象的属性时, 会先从对象中查找, 如果找不到则会从对象的原型中查找, 而由于原型也是一个对象, 如果仍然找不到, 则会从原型的原型中查找, 依次类推, 有些类似于Python中查找方式;&lt;/p&gt;
&lt;p&gt;这种由原型串联起来的关系称为&lt;strong&gt;原型链&lt;/strong&gt;, JavaScript中通过原型链实现继承的过程;&lt;/p&gt;
&lt;p&gt;通过原型的&lt;code&gt;__proto__&lt;/code&gt;指向另一个原型的方式实现继承的结构, 该链的终端是&lt;code&gt;Object.prototype&lt;/code&gt;; 注意不应该直接使用&lt;code&gt;__proto__&lt;/code&gt;属性指向另一个原型, 某些浏览器中并没有该属性, 并且这种方法并不直观, 而应该使用&lt;code&gt;new&lt;/code&gt;;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Person&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;age&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;age&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;age&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nx"&gt;Person&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;prototype&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sayHi&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
    &lt;span class="nx"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Hi, this is &amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;, I am &amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;age&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot; years old.&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Student&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nx"&gt;Student&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;prototype&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Person&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="nx"&gt;Student&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;prototype&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sayHi&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
    &lt;span class="nx"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Hi, this is &amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;, I am a student, &amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;age&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot; years old.&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;xiaoming&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Student&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="nx"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;xiaoming&lt;/span&gt; &lt;span class="k"&gt;instanceof&lt;/span&gt; &lt;span class="nx"&gt;Student&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;  &lt;span class="c1"&gt;// true&lt;/span&gt;
&lt;span class="nx"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;xiaoming&lt;/span&gt; &lt;span class="k"&gt;instanceof&lt;/span&gt; &lt;span class="nx"&gt;Person&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;  &lt;span class="c1"&gt;// true&lt;/span&gt;
&lt;span class="nx"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;xiaoming&lt;/span&gt; &lt;span class="k"&gt;instanceof&lt;/span&gt; &lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;  &lt;span class="c1"&gt;// true&lt;/span&gt;
&lt;span class="nx"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;Student&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;prototype&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;isPrototypeOf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;xiaoming&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;  &lt;span class="c1"&gt;// true&lt;/span&gt;
&lt;span class="nx"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;Person&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;prototype&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;isPrototypeOf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;xiaoming&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;  &lt;span class="c1"&gt;// true&lt;/span&gt;
&lt;span class="nx"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;prototype&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;isPrototypeOf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;xiaoming&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;  &lt;span class="c1"&gt;// true&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;由于原型之间通过原型链连接在一起, 所以不应该使用字面量的方式来定义一个原型, 也不能将原型改成其他的对象(不能修改指针), 之前讨论过, 修改原型对象会破坏原型与已有对象的联系, 而在原型链中, 已有对象就是原型, 改变原型链中的原型对象, 会破坏整个原型链;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;不能使用字面量方式或者任何修改原型对象指针的操作, 不然会破坏原型链;&lt;/li&gt;
&lt;li&gt;给原型对象添加修改属性不会破坏原型链, 但是要注意原型链查找的方向, 在链前端修改的属性并不能在链后端访问得到;&lt;/li&gt;
&lt;li&gt;如果是不可变属性, 则修改该属性实际上是删除已有的属性并且添加新的同名属性, 此时如果原本属性在链后端, 则会在当前位置添加一个新的属性对象;&lt;/li&gt;
&lt;li&gt;如果是可变属性, 应该避免放到原型链中, 如果确实需要这么做, 那么一些不会改变该属性的操作将不会新建新的属性对象, 而是在原本的对象上完成修改;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;整个继承过程和Python、Ruby等语言非常相似, 按照当前对象 -&amp;gt; 当前对象的类 -&amp;gt; 当前对象的父类 -&amp;gt; 父类的父类 ... -&amp;gt; 基本类 的顺序完成属性的查找, 也就是继承的过程:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;向右一步, 向上查找&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;借用构造函数&lt;/h3&gt;
&lt;p&gt;在最基本的原型链上, 子类的构造函数的参数难以传递到父类的构造函数中, 通过借用父类的构造函数可以完成参数的传递:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Person&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;age&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;age&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;age&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Student&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;age&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
    &lt;span class="nx"&gt;Person&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;call&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;age&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;通过以上方式即可完成参数的传递, 如果想要添加方法或者其他共享属性, 则应该组合使用原型链:&lt;/p&gt;
&lt;h3&gt;组合继承&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Person&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;age&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;age&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;age&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nx"&gt;Person&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;prototype&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sayHi&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
    &lt;span class="nx"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Hi, this is &amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;, I am &amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;age&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot; years old.&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Student&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;age&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
    &lt;span class="nx"&gt;Person&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;call&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;age&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nx"&gt;Student&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;prototype&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Person&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="nx"&gt;Student&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;prototype&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sayHi&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
    &lt;span class="nx"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Hi, this is &amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;, I am a student, &amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;age&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot; years old.&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;xiaoming&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Student&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;xiaoming&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;16&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;xiaoming&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sayHi&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;  &lt;span class="c1"&gt;// Hi, this is xiaoming, I am a student, 16 years old.&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;在组合继承和原型链的两个例子中&lt;code&gt;Student.prototype = new Person();&lt;/code&gt;进行了修改原型的操作, 这样产生的原型中并没有&lt;code&gt;constructor&lt;/code&gt;属性, 但是由于原型链是完备的, 所以仍然可以通过&lt;code&gt;instanceOf()&lt;/code&gt;等函数的检查, &lt;code&gt;constructor&lt;/code&gt;属性在原型链中并不起到实际作用, 指定该属性为构造函数本身有利于查找对象的构造函数;&lt;/p&gt;
&lt;p&gt;在组合继承的过程中, 子类型的原型调用了一次父类型的构造函数, 子类型的构造函数中再一次调用父类型的构造函数, 在原型中首先会得到父类型的属性, 然后再在子类型的构造函数中覆盖这些属性或者直接调用原型中的属性;&lt;/p&gt;
&lt;h3&gt;原型继承&lt;/h3&gt;
&lt;p&gt;下面实现一种轻量级的继承方法:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;object&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;o&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
    &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;F&lt;/span&gt;&lt;span class="p"&gt;(){};&lt;/span&gt;
    &lt;span class="nx"&gt;F&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;prototype&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;o&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;F&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;xiaoming&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;xiaoming&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;age&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;16&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;sayHi&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
        &lt;span class="nx"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Hi, this is &amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;, I am a student, &amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;age&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot; years old.&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;xiaohong&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;object&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;xiaoming&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;xiaohong&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;xiaohong&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;xiaohong&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;age&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;xiaohong&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sayHi&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;  &lt;span class="c1"&gt;// Hi, this is xiaohong, I am a student, 15 years old.&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;上面的方法没有创建新的类型, 甚至不需要构造函数, 通过给一个对象添加原型完成了继承的操作, 这是一种比较轻便的继承实现, 在比较新的浏览器中对该方式进行了规范:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;xiaoming&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;xiaoming&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;age&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;16&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;sayHi&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
        &lt;span class="nx"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Hi, this is &amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;, I am a student, &amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;age&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot; years old.&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;xiaohong&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;create&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;xiaoming&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;xiaohong&amp;#39;&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="nx"&gt;age&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;15&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="nx"&gt;xiaohong&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sayHi&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;  &lt;span class="c1"&gt;// Hi, this is xiaohong, I am a student, 15 years old.&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;Object.create()&lt;/code&gt;也可仅仅指定一个参数来指定原型对象, 然后在外部实现属性的定义;&lt;/p&gt;
&lt;p&gt;在这种继承方式中, 所有的属性都是共享的, 当包含可变属性时, 子类型会对父类型造成影响;&lt;/p&gt;
&lt;h3&gt;寄生组合继承&lt;/h3&gt;
&lt;p&gt;以上介绍的继承方式, 组合继承比较常用, 但是会在子类型对象的原型中添加一些不必要的属性, 为了解决这个问题, 需要使用下面的方式:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;inheritPrototype&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;subType&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;superType&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;prototype&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;superType&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;prototype&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;prototype&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;constructor&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;subType&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nx"&gt;subType&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;prototype&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;prototype&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Person&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;age&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;age&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;age&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nx"&gt;Person&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;prototype&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sayHi&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
    &lt;span class="nx"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Hi, this is &amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;, I am &amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;age&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot; years old.&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Student&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;age&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
    &lt;span class="nx"&gt;Person&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;call&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;age&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nx"&gt;inheritPrototype&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;Student&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Person&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;Student&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;prototype&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sayHi&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
    &lt;span class="nx"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Hi, this is &amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;, I am a student, &amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;age&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot; years old.&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nx"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;Student&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;prototype&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;  &lt;span class="c1"&gt;// undefined&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;xiaoming&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Student&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;xiaoming&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;16&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;xiaoming&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sayHi&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;  &lt;span class="c1"&gt;// Hi, this is xiaoming, I am a student, 16 years old.&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;在上面的过程中, &lt;code&gt;Student.prototype&lt;/code&gt;指向了父类型原型, 而没有将父类型中的属性添加到自身, 这种方式是比较理想的继承范式;&lt;/p&gt;</summary><category term="javascript"></category></entry><entry><title>JavaScript基础梳理</title><link href="http://www.lyon0804.com/javascriptji-chu-shu-li.html" rel="alternate"></link><updated>2015-11-09T00:00:00+08:00</updated><author><name>lyon</name></author><id>tag:www.lyon0804.com,2015-11-09:javascriptji-chu-shu-li.html</id><summary type="html">&lt;h2&gt;学习环境&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;浏览器: Safari(9.0.1);&lt;/li&gt;
&lt;li&gt;使用Nginx配置最简单的web服务器;&lt;/li&gt;
&lt;li&gt;使用vim编辑js文件,并通过html网页显示运行结果;&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;str&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
    &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;lt;p&amp;gt;&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;str&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;lt;/p&amp;gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;基本变量类型&lt;/h2&gt;
&lt;p&gt;通过&lt;code&gt;typeof&lt;/code&gt;&lt;strong&gt;操作符&lt;/strong&gt;可以查看变量的类型; JavaScript使用动态类型;&lt;/p&gt;
&lt;p&gt;变量类型分基本类型和引用类型;&lt;/p&gt;
&lt;p&gt;基本数据类型包括:&lt;code&gt;Undefined&lt;/code&gt;、&lt;code&gt;Null&lt;/code&gt;、&lt;code&gt;Boolean&lt;/code&gt;、&lt;code&gt;Number&lt;/code&gt;、&lt;code&gt;String&lt;/code&gt;, 这五种基本数据类型是按值访问的, 并且不可以给这些类型添加属性; 复制基本数据类型时, 复制前后的两个变量保持独立;&lt;/p&gt;
&lt;p&gt;引用数据类型即对象&lt;code&gt;Object&lt;/code&gt;, 引用类型的值按照引用访问, 复制一个对象时, 仅仅是复制其引用地址, 复制前后的两个变量使用相同的内存, 其中一个对象属性的改变将影响另外一个对象; 通过&lt;code&gt;isinstanceof&lt;/code&gt;操作符可以判断具体的对象类型;&lt;/p&gt;
&lt;h3&gt;Undefined&lt;/h3&gt;
&lt;p&gt;该类型只有一个值: &lt;code&gt;undefined&lt;/code&gt;; 已经声明但是未定义的变量; 检查一个变量类型是否为&lt;code&gt;undefined&lt;/code&gt;可以判断该变量是否被声明或者已经定义;&lt;/p&gt;
&lt;h3&gt;Null&lt;/h3&gt;
&lt;p&gt;Null类型也只有一个值: &lt;code&gt;null&lt;/code&gt;;表示空对象的指针,使用&lt;code&gt;typeof&lt;/code&gt;检查&lt;code&gt;null&lt;/code&gt;的类型时,会返回&lt;code&gt;object&lt;/code&gt;;&lt;/p&gt;
&lt;h3&gt;Boolean&lt;/h3&gt;
&lt;p&gt;该类型有两个值:&lt;code&gt;true&lt;/code&gt;和&lt;code&gt;false&lt;/code&gt;;任何非空字符串、非零数字值、任何对象、n/a都会认为是&lt;code&gt;true&lt;/code&gt;;空字符串、0和NaN、null、undefined将被认为是&lt;code&gt;false&lt;/code&gt;;&lt;/p&gt;
&lt;h3&gt;Number&lt;/h3&gt;
&lt;p&gt;该类型包含十进制整数、八进制整数、十六进制整数、浮点数、NaN等;&lt;/p&gt;
&lt;p&gt;浮点数使用二进制浮点数(IEEE754),存在误差问题; 数值范围在&lt;code&gt;Number.MIN_VALUE&lt;/code&gt;和&lt;code&gt;Number.MAX_VALUE&lt;/code&gt;之间,超过下限的转换为&lt;code&gt;-Infinity&lt;/code&gt;,超过上限的转换为&lt;code&gt;Infinity&lt;/code&gt;;&lt;/p&gt;
&lt;p&gt;NaN表示一个非数值, 任何NaN参与的运算结果都为NaN, &lt;code&gt;0/0 == NaN&lt;/code&gt;, 将一个变量转换为数值但是无法转换时, 将得到NaN: &lt;code&gt;Number('NO') == NaN&lt;/code&gt;;&lt;/p&gt;
&lt;p&gt;使用&lt;code&gt;Number()&lt;/code&gt;、&lt;code&gt;parseInt()&lt;/code&gt;、&lt;code&gt;parseFloat()&lt;/code&gt;这三个函数可以将非数值转换为数值;&lt;/p&gt;
&lt;p&gt;其中&lt;code&gt;Number()&lt;/code&gt;转换规则为:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;如果是数值则直接返回;&lt;/li&gt;
&lt;li&gt;如果是Boolean类型, 则true返回1，false返回0;&lt;/li&gt;
&lt;li&gt;如果是null, 返回0;&lt;/li&gt;
&lt;li&gt;如果是undefined, 返回NaN;&lt;/li&gt;
&lt;li&gt;如果是字符串, 如果是空字符串, 返回0; 如果只包含数字, 返回该数字, 并忽略前面的0; 如果包含十六进制格式, 返回对应十进制值;其他字符串返回NaN;&lt;/li&gt;
&lt;li&gt;如果是对象, 则调用&lt;code&gt;valueOf()&lt;/code&gt;方法, 再依照前面的规则转换;&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;str&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
    &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;lt;p&amp;gt;&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;str&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;lt;/p&amp;gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;testNumber&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;n&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Number&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;n&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nx"&gt;testNumber&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;             &lt;span class="c1"&gt;//10&lt;/span&gt;
&lt;span class="nx"&gt;testNumber&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;           &lt;span class="c1"&gt;//0&lt;/span&gt;
&lt;span class="nx"&gt;testNumber&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;undefined&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;      &lt;span class="c1"&gt;//NaN&lt;/span&gt;
&lt;span class="nx"&gt;testNumber&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;             &lt;span class="c1"&gt;//0&lt;/span&gt;
&lt;span class="nx"&gt;testNumber&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;01243.3aa&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;    &lt;span class="c1"&gt;//NaN&lt;/span&gt;
&lt;span class="nx"&gt;testNumber&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;01243.3&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;      &lt;span class="c1"&gt;//1243.3&lt;/span&gt;
&lt;span class="nx"&gt;testNumber&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;0x13a&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;        &lt;span class="c1"&gt;//314&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;如果是处理整数或者浮点数, 应该使用更好的&lt;code&gt;parseInt()&lt;/code&gt;和&lt;code&gt;parseFloat()&lt;/code&gt;函数:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;parseInt()转换字符串时, 从字符串开头开始转换, 直到遇到非数字字符; parseFloat()类似;&lt;/li&gt;
&lt;li&gt;当parseFloat()返回的是整数时, 则返回一个整数;&lt;/li&gt;
&lt;li&gt;parseInt()可以指定第二个参数表示转换时的基数;&lt;/li&gt;
&lt;li&gt;对空字符串返回NaN;&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;testParseInt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;base&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;n&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;parseInt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;base&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;n&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;testParseFloat&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;n&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;parseFloat&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;n&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nx"&gt;testParseInt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;             &lt;span class="c1"&gt;//NaN&lt;/span&gt;
&lt;span class="nx"&gt;testParseInt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;undefined&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;        &lt;span class="c1"&gt;//NaN&lt;/span&gt;
&lt;span class="nx"&gt;testParseInt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;               &lt;span class="c1"&gt;//NaN&lt;/span&gt;
&lt;span class="nx"&gt;testParseInt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;0012&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;           &lt;span class="c1"&gt;//12&lt;/span&gt;
&lt;span class="nx"&gt;testParseInt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;01243.3aa&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;    &lt;span class="c1"&gt;//675&lt;/span&gt;
&lt;span class="nx"&gt;testParseInt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;0x13a&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;16&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;       &lt;span class="c1"&gt;//314&lt;/span&gt;
&lt;span class="nx"&gt;testParseFloat&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;0.2131&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;       &lt;span class="c1"&gt;//0.2131&lt;/span&gt;
&lt;span class="nx"&gt;testParseFloat&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;1231ab&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;       &lt;span class="c1"&gt;//1231&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;String&lt;/h3&gt;
&lt;p&gt;String类型表示由0个或者多个16位unicode字符组成的字符串; 可以由&lt;code&gt;" "&lt;/code&gt;或者&lt;code&gt;' '&lt;/code&gt;表示;&lt;/p&gt;
&lt;p&gt;字符串是不可变对象, 改变某个字符串必须先销毁再创建;&lt;/p&gt;
&lt;p&gt;字符串使用&lt;code&gt;+&lt;/code&gt;拼接, 访问其&lt;code&gt;length&lt;/code&gt;属性返回长度;&lt;/p&gt;
&lt;p&gt;通过任何类型(除了&lt;code&gt;null&lt;/code&gt;和&lt;code&gt;undefined&lt;/code&gt;)都有的&lt;code&gt;toString()&lt;/code&gt;方法可以转换为字符串; 或者通过&lt;code&gt;String()&lt;/code&gt;函数可以将一个变量转为字符串, 该方法会将&lt;code&gt;null&lt;/code&gt;和&lt;code&gt;undefined&lt;/code&gt;以字符串形式返回, 其他类型则调用&lt;code&gt;toString()&lt;/code&gt;方法;&lt;/p&gt;
&lt;h3&gt;Object&lt;/h3&gt;
&lt;p&gt;对象是一组数据和功能的集合, 通过&lt;code&gt;new Object()&lt;/code&gt;来创建一个对象; 使用&lt;code&gt;.&lt;/code&gt;来访问对象的属性和方法, 或者使用&lt;code&gt;[ ]&lt;/code&gt;下标来访问会引发编译错误的属性名称;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Object&lt;/code&gt;类型作为所有对象的基本基础, 所有的对象都拥有该对象的属性方法, 包括:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;constructor&lt;/code&gt;: 该属性保存用于创建该对象的构造函数;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;hasOwnProperty(propertyName)&lt;/code&gt;: 检查指定的属性是否在当前对象中存在, 参数以字符串形式传入;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;isPrototypeOf(object)&lt;/code&gt;: 检查传入的对象是否是传入对象的原型;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;propertyIsEnumerable(propertyName)&lt;/code&gt;: 检查该属性是否能够使用&lt;code&gt;for-in&lt;/code&gt;语句枚举;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;toLocaleString()&lt;/code&gt;: 返回对象的字符串表示, 与执行环境的地区对应;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;toString()&lt;/code&gt;: 返回对象的字符串表示;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;valueOf()&lt;/code&gt;: 返回对象的字符串、数值、布尔值表示, 通常和toString()的返回值相同;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;操作符&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;++&lt;/code&gt;、&lt;code&gt;--&lt;/code&gt;等操作符和C语言相同;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;+&lt;/code&gt;操作符会将变量转换(使用&lt;code&gt;Number()&lt;/code&gt;转换)为数值, &lt;code&gt;-&lt;/code&gt;操作符在将变量转换为数值的基础上取负数;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;~&lt;/code&gt;按位非、&lt;code&gt;|&lt;/code&gt;按位或、&lt;code&gt;&amp;amp;&lt;/code&gt;按位与、&lt;code&gt;^&lt;/code&gt;按位异或、&lt;code&gt;&amp;lt;&amp;lt;&lt;/code&gt;左移、&lt;code&gt;&amp;gt;&amp;gt;&lt;/code&gt;右移、&lt;code&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/code&gt;无符号右移等和C语法类似;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;!&lt;/code&gt;逻辑非、&lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt;逻辑与、&lt;code&gt;||&lt;/code&gt;逻辑非等和习惯用法相同;&lt;/li&gt;
&lt;li&gt;加性操作符&lt;code&gt;+&lt;/code&gt;: 如果有字符串则按照字符串连接, 否则先转换为数值再相加;&lt;/li&gt;
&lt;li&gt;加性操作符&lt;code&gt;-&lt;/code&gt;: 先转换为数值在做减法, 如果是对象则调用&lt;code&gt;valueOf()&lt;/code&gt;方法, 如果没有则调用&lt;code&gt;toString()&lt;/code&gt;先转为字符串;&lt;/li&gt;
&lt;li&gt;乘性操作符: &lt;code&gt;*&lt;/code&gt;、&lt;code&gt;/&lt;/code&gt;、&lt;code&gt;%&lt;/code&gt;都先将操作数转为数值再进行计算;&lt;/li&gt;
&lt;li&gt;比较操作符: &lt;code&gt;&amp;gt;&lt;/code&gt;、&lt;code&gt;&amp;gt;=&lt;/code&gt;、&lt;code&gt;&amp;lt;&lt;/code&gt;、&lt;code&gt;&amp;lt;=&lt;/code&gt;: 如果有字符串, 则执行字符串比较, 否则转为数值比较;&lt;/li&gt;
&lt;li&gt;相等操作符: &lt;code&gt;==&lt;/code&gt;、&lt;code&gt;===&lt;/code&gt;, 前者不判断类型是否相同, 后者将比较类型; &lt;code&gt;!=&lt;/code&gt;表示不相等;&lt;/li&gt;
&lt;li&gt;三目操作符: &lt;code&gt;? :&lt;/code&gt;, 赋值操作符等都和常规使用类似;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;数值计算时将使用以下规则:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;如果有NaN, 则结果为NaN;&lt;/li&gt;
&lt;li&gt;如果有Infinity, 则按照以下规则进行;&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nx"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;Infinity&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;                &lt;span class="c1"&gt;//Infinity&lt;/span&gt;
&lt;span class="nx"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;Infinity&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;                &lt;span class="c1"&gt;//NaN&lt;/span&gt;
&lt;span class="nx"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;Infinity&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;               &lt;span class="c1"&gt;//-Infinity&lt;/span&gt;
&lt;span class="nx"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;Infinity&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;                &lt;span class="c1"&gt;//Infinity&lt;/span&gt;
&lt;span class="nx"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;Infinity&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="kc"&gt;Infinity&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;     &lt;span class="c1"&gt;//Infinity&lt;/span&gt;
&lt;span class="nx"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;Infinity&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;                &lt;span class="c1"&gt;//Infinity&lt;/span&gt;
&lt;span class="nx"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="kc"&gt;Infinity&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;               &lt;span class="c1"&gt;//-Infinity&lt;/span&gt;
&lt;span class="nx"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;Infinity&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="kc"&gt;Infinity&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;     &lt;span class="c1"&gt;//NaN&lt;/span&gt;
&lt;span class="nx"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;Infinity&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="kc"&gt;Infinity&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;     &lt;span class="c1"&gt;//Infinity&lt;/span&gt;
&lt;span class="nx"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;Infinity&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="kc"&gt;Infinity&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;        &lt;span class="c1"&gt;//Nan&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;语句&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;if&lt;/code&gt;、&lt;code&gt;for&lt;/code&gt;、&lt;code&gt;while&lt;/code&gt;、&lt;code&gt;do-while&lt;/code&gt;等和一般规则相同;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;for-in&lt;/code&gt;语句用来对可迭代对象进行枚举,相当于&lt;code&gt;foreach&lt;/code&gt;等相关语句, 其语法为: &lt;code&gt;for ( var property in iterable )&lt;/code&gt;;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;label&lt;/code&gt;语句: 用于循环控制中&lt;code&gt;break&lt;/code&gt;和&lt;code&gt;continue&lt;/code&gt;跳转的位置, 和&lt;code&gt;Java&lt;/code&gt;中的特性相同, 只能用于循环跳转, 是弱化的&lt;code&gt;TODO&lt;/code&gt;;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;with&lt;/code&gt;语句: 将某段代码的作用域置于一个特定对象中, 如:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nx"&gt;obj&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="nx"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;xiaoming&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;age&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;16&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;with&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
    &lt;span class="nx"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;        &lt;span class="c1"&gt;// xiaoming&lt;/span&gt;
    &lt;span class="nx"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;age&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;     &lt;span class="c1"&gt;// 16&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;switch&lt;/code&gt;语句和C语言中类似, 每个statment后面需要有&lt;code&gt;break&lt;/code&gt;退出, 否则将合并多个条件执行;&lt;/p&gt;
&lt;h2&gt;函数&lt;/h2&gt;
&lt;p&gt;使用&lt;code&gt;function&lt;/code&gt;关键字声明函数;函数名不可以是&lt;code&gt;eval&lt;/code&gt;和&lt;code&gt;arguments&lt;/code&gt;;&lt;/p&gt;
&lt;p&gt;函数的参数通过&lt;code&gt;arguments&lt;/code&gt;对象来传递, 同时也可以指定参数, 但是不能出现同名的命名参数;&lt;/p&gt;
&lt;p&gt;函数在传递参数时, 是按值传递的, 基本类型和引用类型的传递和对应的复制操作一样, 即基本数据类型传入独立的变量, 引用数据类型传入地址; 和Python中的表现基本相同;&lt;/p&gt;
&lt;h2&gt;作用域&lt;/h2&gt;
&lt;p&gt;JavaScript的作用域表现和Python类似, 将按照作用域链逐级搜索标识符;&lt;/p&gt;
&lt;p&gt;通过&lt;code&gt;with&lt;/code&gt;语句可以为代码块添加作用域; 通过&lt;code&gt;try-catch&lt;/code&gt;语句可以延长作用域到catch语句块;&lt;/p&gt;
&lt;p&gt;没有块级作用域, 即在&lt;code&gt;if&lt;/code&gt;、&lt;code&gt;for&lt;/code&gt;等语句中定义的变量将会添加到最近的环境中, 在一个函数中, 最接近的环境就是函数的局部环境, 在with语句中, 最接近的环境是函数环境, 在顶级作用域中, 最接近的环境是全局环境. 没有使用&lt;code&gt;var&lt;/code&gt;申明的变量将进入全局环境. 如:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nx"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;       &lt;span class="c1"&gt;// 10&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;

&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nx"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;       &lt;span class="c1"&gt;// 10&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;f&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="c1"&gt;//print(f);  无法访问&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;obj&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
    &lt;span class="kd"&gt;with&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
        &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;f&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="nx"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;f&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;  &lt;span class="c1"&gt;// 10&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nx"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;引用类型&lt;/h2&gt;
&lt;h3&gt;Object&lt;/h3&gt;
&lt;p&gt;大多数引用类型都是Object类型的实例, 通过两种方式可以创建一个Object对象:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;obj&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;obj&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{};&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;同时也可以使用&lt;code&gt;.&lt;/code&gt;或者&lt;code&gt;[ ]&lt;/code&gt;来访问某个属性, 一般使用&lt;code&gt;.&lt;/code&gt;访问属性, 当属性名称包含空格等可能引起编译错误的问题时, 使用&lt;code&gt;[ ]&lt;/code&gt;下标访问该属性;&lt;/p&gt;
&lt;h3&gt;Array&lt;/h3&gt;
&lt;p&gt;JavaScript中使用Array类型来表示一个数组, 数组元素可以包含不同类型的值, 并且没有数组大小的限制, 数组大小会动态调整, 数组的表现和Perl中的数组类似, 但是提供更多的方法;&lt;/p&gt;
&lt;p&gt;通过两种方式可以创建一个数组:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;array&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Array&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;array&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;访问未定义的元素将返回&lt;code&gt;undefined&lt;/code&gt;, 对超过数组长度元素进行赋值将自动扩展数组长度;&lt;/p&gt;
&lt;p&gt;使用&lt;code&gt;Array.isArray()&lt;/code&gt;方法可以检查一个值是不是数组, 并且不管该值在哪个全局环境下创建;&lt;/p&gt;
&lt;p&gt;数组的&lt;code&gt;toString()&lt;/code&gt;方法和&lt;code&gt;toLocaleString()&lt;/code&gt;方法会对每个元素调用相应的方法, 并且用&lt;code&gt;,&lt;/code&gt;连接成字符串; 使用&lt;code&gt;join()&lt;/code&gt;方法可以指定连接符;&lt;/p&gt;
&lt;p&gt;数组中的&lt;code&gt;pop()&lt;/code&gt;、&lt;code&gt;push()&lt;/code&gt;、&lt;code&gt;shift()&lt;/code&gt;、&lt;code&gt;unshift()&lt;/code&gt;四个方法和Perl语言中的表现一致, 但是从函数变为数组的方法, &lt;code&gt;push()&lt;/code&gt;、&lt;code&gt;unshift()&lt;/code&gt;允许一次传入多个值;&lt;/p&gt;
&lt;p&gt;数组中的&lt;code&gt;sort()&lt;/code&gt;方法默认使用字符串排序, 通过传入比较函数改变排序规则;&lt;/p&gt;
&lt;p&gt;支持切片&lt;code&gt;slice()&lt;/code&gt;以及&lt;code&gt;splice()&lt;/code&gt;方法;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;splice()&lt;/code&gt;方法可以接收2个或者以上参数, 其中第一个参数表示起始位置, 第二个参数表示要删除的项数, 第三个参数开始表示插入的元素;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;array&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;red&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;blue&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;green&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;13&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;48&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="nx"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;array&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;  &lt;span class="c1"&gt;// red,blue,green,13,48,true&lt;/span&gt;
&lt;span class="nx"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;array&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;  &lt;span class="c1"&gt;// red&lt;/span&gt;
&lt;span class="nx"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;array&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;  &lt;span class="c1"&gt;// 6&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nb"&gt;Array&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;isArray&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;array&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;){&lt;/span&gt;
    &lt;span class="nx"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;array is Array&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;  &lt;span class="c1"&gt;// array is Array&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nx"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;array&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;##&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;  &lt;span class="c1"&gt;// red##blue##green##13##48##true&lt;/span&gt;
&lt;span class="nx"&gt;array&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;tail&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;array&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;    &lt;span class="c1"&gt;// red,blue,green,13,48,true,tail&lt;/span&gt;
&lt;span class="nx"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;array&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pop&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;  &lt;span class="c1"&gt;// tail&lt;/span&gt;
&lt;span class="nx"&gt;array&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;unshift&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;head&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;array&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;  &lt;span class="c1"&gt;// head,red,blue,green,13,48,true&lt;/span&gt;
&lt;span class="nx"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;array&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;shift&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;  &lt;span class="c1"&gt;// head&lt;/span&gt;
&lt;span class="nx"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;array&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sort&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;  &lt;span class="c1"&gt;// 13,48,blue,green,red,true&lt;/span&gt;
&lt;span class="nx"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;array&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;reverse&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt; &lt;span class="c1"&gt;// true,red,green,blue,48,13&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;cmp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nx"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;array&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sort&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;cmp&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;  &lt;span class="c1"&gt;// true,blue,green,red,13,48&lt;/span&gt;
&lt;span class="nx"&gt;array&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;array&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;concat&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;value&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;a1&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;a2&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;value2&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;array&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;  &lt;span class="c1"&gt;// true,blue,green,red,13,48,value,a1,a2,value2&lt;/span&gt;
&lt;span class="nx"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;array&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;slice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt; &lt;span class="c1"&gt;// 48,value,a1,a2,value2&lt;/span&gt;
&lt;span class="nx"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;array&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;slice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;  &lt;span class="c1"&gt;// blue,green&lt;/span&gt;
&lt;span class="nx"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;array&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;splice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;false&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="c1"&gt;// true&lt;/span&gt;
&lt;span class="nx"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;array&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// false,blue,green,red,13,48,value,a1,a2,value2&lt;/span&gt;
&lt;span class="nx"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;array&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;indexOf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;blue&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;  &lt;span class="c1"&gt;// 1&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;数组支持以下迭代方法, 其中给定的函数需要接收三个参数: 数组项的值、该项在数组中的位置、数组本身;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;every()&lt;/code&gt;: 对数组的每一项运行给定函数, 当所有项都返回true时, 返回true;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;some()&lt;/code&gt;: 对数组的每一项运行给定函数, 当其中有一个返回true时, 即返回true;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;filter()&lt;/code&gt;: 对数组的每一项运行给定函数, 并返回能够返回true的项组成的数组;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;forEach()&lt;/code&gt;: 对数组的每一项运行给定函数, 不返回内容;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;map()&lt;/code&gt;: 对数组的每一项运行给定函数, 并返回函数返回结果组成的数组;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;test_iter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;array&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nx"&gt;item&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;array&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="nx"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nx"&gt;array&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;every&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;test_iter&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c1"&gt;// false&lt;/span&gt;
&lt;span class="nx"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nx"&gt;array&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;some&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;test_iter&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c1"&gt;// true&lt;/span&gt;
&lt;span class="nx"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nx"&gt;array&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;test_iter&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c1"&gt;// 5,3,4,6,3,4,5&lt;/span&gt;
&lt;span class="nx"&gt;array&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;array&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
    &lt;span class="nx"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nx"&gt;index&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;,&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;item&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;   &lt;span class="c1"&gt;//&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="nx"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nx"&gt;array&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;array&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;item&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;   &lt;span class="c1"&gt;// 2,10,6,8,12,4,2,6,8,10&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;以及&lt;code&gt;reduce()&lt;/code&gt;方法和一个从右侧开始的版本&lt;code&gt;reduceRight()&lt;/code&gt;, 该方法传入的函数需要指定4个参数: 前一项, 当前项, 索引值, 数组本身, 该方法对数组做一个归并操作, 返回值将赋值给当前变量, 然后在下一个循环中作为前一项参与运算:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nx"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nx"&gt;array&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;reduce&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;prev&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;cur&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;array&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
    &lt;span class="nx"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;prev&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// 查看内部运算细节&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;prev&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;cur&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  &lt;span class="c1"&gt;// 34&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;相比python的&lt;code&gt;map()&lt;/code&gt;和&lt;code&gt;reduce()&lt;/code&gt;, JavaScript中的这两个方法暴露更加丰富的细节, 也更加容易理解;&lt;/p&gt;
&lt;h3&gt;Date&lt;/h3&gt;
&lt;p&gt;Date类型主要用于时间和日期的处理, 和其他语言不同的是, 不同的浏览器对日期的处理会很不一样, 但是基本方式大同小异;&lt;/p&gt;
&lt;p&gt;Date类可以通过两种方式实例化:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;通过传入Unix时间戳(从1970前开始的毫秒数)来实例化;&lt;/li&gt;
&lt;li&gt;Date.parse()方法可以从一个特定格式字符串来解析出时间戳;&lt;/li&gt;
&lt;li&gt;Date.UTC()通过依次传入:年份、基于0的月份、基于1的天数、小时数、分钟、秒、毫秒等值来获取时间戳, 注意该时间是GMT时间, 前两个参数为必须;&lt;/li&gt;
&lt;li&gt;Date.now()获取调用该方法时的时间戳;&lt;/li&gt;
&lt;li&gt;通过依次传入和UTC()方法的参数, 可以直接通过Date()实例化, 此时, 使用的时间是当地时间;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;date&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Nov 9 2015&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="nx"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;date&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;  &lt;span class="c1"&gt;// Mon Nov 09 2015 00:00:00 GMT+0800 (CST)&lt;/span&gt;
&lt;span class="nx"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;date&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toLocaleString&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt; &lt;span class="c1"&gt;// 2015年11月9日 GMT+8 00:00:00&lt;/span&gt;
&lt;span class="nx"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;date&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;valueOf&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt; &lt;span class="c1"&gt;// 1446998400000&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;date&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;UTC&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2015&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="nx"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;date&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// Mon Nov 09 2015 08:00:00 GMT+0800 (CST)&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;date&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;now&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;span class="nx"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;date&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// Thu Nov 12 2015 22:39:07 GMT+0800 (CST)&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;date&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2015&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;date&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// Mon Nov 09 2015 00:00:00 GMT+0800 (CST)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Date()对象的两种字符串方法: &lt;code&gt;toString()&lt;/code&gt;, &lt;code&gt;toLocaleString()&lt;/code&gt;在不同浏览器中返回的格式并不相同, 默认使用的&lt;code&gt;toString()&lt;/code&gt;方法返回GMT格式, &lt;code&gt;toLocaleString()&lt;/code&gt;则会显示浏览器设置的地区相适应的格式, &lt;code&gt;valueOf()&lt;/code&gt;方法返回时间戳, 该值可以用来比较两个时间的大小;&lt;/p&gt;
&lt;p&gt;日期类型有许多格式化方法以及获取时间组件的方法, 以下举一些例子:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;date&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;now&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
&lt;span class="nx"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;date&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toDateString&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt; &lt;span class="c1"&gt;// Thu Nov 12 2015&lt;/span&gt;
&lt;span class="nx"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;date&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toTimeString&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt; &lt;span class="c1"&gt;// 22:52:04 GMT+0800 (CST)&lt;/span&gt;
&lt;span class="nx"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;date&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getFullYear&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt; &lt;span class="c1"&gt;// 2015&lt;/span&gt;
&lt;span class="nx"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;date&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getMonth&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt; &lt;span class="c1"&gt;// 10&lt;/span&gt;
&lt;span class="nx"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;date&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getDay&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt; &lt;span class="c1"&gt;// 4&lt;/span&gt;
&lt;span class="nx"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;date&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getHours&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt; &lt;span class="c1"&gt;// 22&lt;/span&gt;
&lt;span class="nx"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;date&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getMinutes&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt; &lt;span class="c1"&gt;// 52&lt;/span&gt;
&lt;span class="c1"&gt;// More&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;RegExp&lt;/h3&gt;
&lt;p&gt;JavaScript中的正则和Perl非常相似, 可以使用和Perl一样的格式生成正则表达式, 也可以用RegExp()来生成, 但是既然支持Perl里生动的写法, 甚至沿用Perl里的若干魔术变量, 对比Perl只是缺少一些较少使用的功能, 感觉非常强大！&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;string&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Thu 2015-11-13 00:18:14&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;reg&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="sr"&gt;/thu+\s+\b(\d{4})-(\d{1,2})-(\d{1,2})\b/i&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;reg&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exec&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;string&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;  &lt;span class="c1"&gt;// Thu 2015-11-13,2015,11,13&lt;/span&gt;
&lt;span class="nx"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;reg&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exec&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;  &lt;span class="c1"&gt;// 2015&lt;/span&gt;
&lt;span class="nx"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;RegExp&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;$1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;  &lt;span class="c1"&gt;// 2015&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;reg&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;test&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)){&lt;/span&gt;
    &lt;span class="nx"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;this string is matched!&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;用Perl的方式写正则就是舒服啊~&lt;/p&gt;
&lt;h3&gt;Function&lt;/h3&gt;
&lt;p&gt;函数也是一种对象, 所以除了使用&lt;code&gt;function&lt;/code&gt;关键字后面跟上函数名称来定义函数之外, 也可以使用&lt;code&gt;var foo = function(){}&lt;/code&gt;的方式, 或者使用&lt;code&gt;new Function()&lt;/code&gt;的方式, 其中最后一个参数为代码块; 不推荐使用第三种方式, 其他两种方式示例为:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;num1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;num2&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;num1&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;num2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;sum&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;num1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;num2&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;num1&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;num2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;由于和其他动态语言一样, 函数名只是一个函数对象的指针, 所以并没有重载的概念, 同名函数将直接覆盖已有函数, 也和其他动态语言一样使用松耦合的方式传递参数和返回值; 解释器会先进行函数的申明, 但是具体的表达式则在执行时才会最终确定; 函数同样可以作为一个参数传入到其他函数中, 这些都和其他的动态语言表现一致;&lt;/p&gt;
&lt;p&gt;JavaScript中的函数比较特殊的对象:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;argument&lt;/code&gt;: 该对象保存函数的所有参数, 具有&lt;code&gt;callee&lt;/code&gt;方法, 用来调用拥有该对象的函数本身;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;this&lt;/code&gt;: 该对象保存调用该函数的对象, 如果没有指定, 则使用全局对象(网页全局域中为&lt;code&gt;window&lt;/code&gt;);&lt;/li&gt;
&lt;li&gt;&lt;code&gt;caller&lt;/code&gt;: 该对象保存调用当前函数的函数的引用, 如果在全局域中, 则为&lt;code&gt;null&lt;/code&gt;;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;color&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;red&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;obj&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;color&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;blue&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;sayColor&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
    &lt;span class="nx"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;color&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nx"&gt;sayColor&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;  &lt;span class="c1"&gt;// red&lt;/span&gt;
&lt;span class="nx"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sayColor&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;sayColor&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sayColor&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;  &lt;span class="c1"&gt;// blue&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;outer&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
    &lt;span class="nx"&gt;inner&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;inner&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
    &lt;span class="nx"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;inner&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;caller&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nx"&gt;outer&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;注意, &lt;code&gt;inner.caller&lt;/code&gt;代表一个函数对象, 如果调用该函数会产生死循环;&lt;/p&gt;
&lt;p&gt;函数的其他属性和方法:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;length&lt;/code&gt;属性: 表示函数希望接收的&lt;strong&gt;命名参数&lt;/strong&gt;的个数;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;protetype&lt;/code&gt;属性: 表示保存该函数的原型;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;apply()&lt;/code&gt;方法: 用来调用该函数, 需要传入两个参数: 运行函数的作用域、函数参数数组;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;call()&lt;/code&gt;方法: 用来调用该函数, 需要一个以上参数: 运行函数的作用域、一系列直接传入函数的参数;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;使用&lt;code&gt;apply()&lt;/code&gt;和&lt;code&gt;call()&lt;/code&gt;可以灵活调整函数的作用域:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;color&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;red&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;obj&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;color&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;blue&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;sayColor&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
    &lt;span class="nx"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;color&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nx"&gt;sayColor&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;apply&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;,[]);&lt;/span&gt;
&lt;span class="nx"&gt;sayColor&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;call&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;sayColor&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;call&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Number&lt;/h3&gt;
&lt;p&gt;和Java中一样, 除了基本类型之外, 还提供了包装类型, 由于使用了堆内存存储, 相比基本类型效率较低, 相比基本类型提供更长的生命周期;&lt;/p&gt;
&lt;p&gt;区分转型函数&lt;code&gt;Number()&lt;/code&gt;以及创建引用类型&lt;code&gt;new Number()&lt;/code&gt;; 不是必要情况下, 不应该使用&lt;code&gt;new Number()&lt;/code&gt;的方式;&lt;/p&gt;
&lt;p&gt;Number类型主要提供以下属性和方法:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;toFixed()&lt;/code&gt;方法, 接受一个参数用于控制显示的小数位数, 将使用四舍五入的方式取近似值;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;toExponential()&lt;/code&gt;方法, 接受一个参数用于显示科学计数法显示时的小数位数;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;toPrecision()&lt;/code&gt;方法, 接受一个参数表示有效数字, 根据有效数字位数选择显示方式;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;num&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;99.333333&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;num&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toFixed&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;  &lt;span class="c1"&gt;// 99.33&lt;/span&gt;
&lt;span class="nx"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;num&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toExponential&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;  &lt;span class="c1"&gt;// 9.93e+1&lt;/span&gt;
&lt;span class="nx"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;num&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toPrecision&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;  &lt;span class="c1"&gt;// 99&lt;/span&gt;
&lt;span class="nx"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;num&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toPrecision&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;  &lt;span class="c1"&gt;// 1e+2&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;String&lt;/h3&gt;
&lt;p&gt;String包装类型的基本属性和方法有:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;charAt()&lt;/code&gt;、&lt;code&gt;charCodeAt()&lt;/code&gt;、&lt;code&gt;[ ]&lt;/code&gt;通过这三种方式可以访问字符串的某个字符; 其中第一个和第三个方法直接返回指定位置的字符, 第二个方法返回字符的编码;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;concat()&lt;/code&gt;: 接受多个参数, 将参数拼接到字符串后面, 大多数情况下使用&lt;code&gt;+&lt;/code&gt;操作符更加方便;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;slice()&lt;/code&gt;、&lt;code&gt;substr()&lt;/code&gt;、&lt;code&gt;substring()&lt;/code&gt;通过这三个方法创建子字符串, &lt;code&gt;slice()&lt;/code&gt;切片方法和Python中表现相同; &lt;code&gt;substr()&lt;/code&gt;接受一个参数时, 表示从该位置开始到字符串末尾的子字符串, 可选第二个参数表示子字符串的长度; &lt;code&gt;substring()&lt;/code&gt;方法和&lt;code&gt;slice()&lt;/code&gt;方法区别在于会将负数转为&lt;code&gt;0&lt;/code&gt;, 并自动使用两个参数中的较小值作为开始;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;indexOf()&lt;/code&gt;、&lt;code&gt;lastIndexOf()&lt;/code&gt;方法用于查找子字符串在字符串中的位置; 可以接受第二个参数表示开始搜索的位置;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;trim()&lt;/code&gt;: 删除字符串头尾的空白;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;toLowerCase()&lt;/code&gt;、&lt;code&gt;toUpperCase()&lt;/code&gt;等大小写转换方法;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;match()&lt;/code&gt;、&lt;code&gt;search()&lt;/code&gt;、&lt;code&gt;replace()&lt;/code&gt;、&lt;code&gt;split()&lt;/code&gt;等字符串常用方法使用时, 都支持正则表达式;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;localeComopare()&lt;/code&gt;: 字符串比较方法, 即Perl中的&lt;code&gt;cmp&lt;/code&gt;;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;fromCharCode()&lt;/code&gt;: 传入一系列编码, 返回组成的字符串;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;下面是一些示例:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;str&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;hello world, it is 2015-11-18 20:29:04 +0800&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;str&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;charAt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;  &lt;span class="c1"&gt;// e&lt;/span&gt;
&lt;span class="nx"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;str&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;charCodeAt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;  &lt;span class="c1"&gt;// 101&lt;/span&gt;
&lt;span class="nx"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;str&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;  &lt;span class="c1"&gt;// e&lt;/span&gt;
&lt;span class="nx"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;str&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;concat&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;!&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;  &lt;span class="c1"&gt;// hello world, it is 2015-11-18 20:29:04 +0800!&lt;/span&gt;
&lt;span class="nx"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;str&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;slice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;  &lt;span class="c1"&gt;// el&lt;/span&gt;
&lt;span class="nx"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;str&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;slice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;  &lt;span class="c1"&gt;// ello world, it is 2015-11-18 20:29:04 +0&lt;/span&gt;
&lt;span class="nx"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;str&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;substr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;  &lt;span class="c1"&gt;// ell&lt;/span&gt;
&lt;span class="nx"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;str&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;substr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;  &lt;span class="c1"&gt;// 800&lt;/span&gt;
&lt;span class="nx"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;str&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;substr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;  &lt;span class="c1"&gt;//&lt;/span&gt;
&lt;span class="nx"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;str&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;substring&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;  &lt;span class="c1"&gt;// el&lt;/span&gt;
&lt;span class="nx"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;str&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;substring&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;  &lt;span class="c1"&gt;// h&lt;/span&gt;
&lt;span class="nx"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;str&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;  &lt;span class="c1"&gt;// hello world, it is 2015-11-18 20:29:04 +0800&lt;/span&gt;
&lt;span class="nx"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;str&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;indexOf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;i&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;  &lt;span class="c1"&gt;// 13&lt;/span&gt;
&lt;span class="nx"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;str&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;lastIndexOf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;i&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;  &lt;span class="c1"&gt;// 16&lt;/span&gt;
&lt;span class="nx"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;str&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;trim&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;  &lt;span class="c1"&gt;// hello world, it is 2015-11-18 20:29:04 +0800&lt;/span&gt;
&lt;span class="nx"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;str&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toLowerCase&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;  &lt;span class="c1"&gt;// hello world, it is 2015-11-18 20:29:04 +0800&lt;/span&gt;
&lt;span class="nx"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;str&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toUpperCase&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;  &lt;span class="c1"&gt;// HELLO WORLD, IT IS 2015-11-18 20:29:04 +0800&lt;/span&gt;

&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;pattern&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="sr"&gt;/it is (\d{4}-\d{1,2}-\d{1,2})/&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;matches&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;str&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;match&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;pattern&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;matches&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;  &lt;span class="c1"&gt;//  it is 2015-11-18&lt;/span&gt;
&lt;span class="nx"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;matches&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;  &lt;span class="c1"&gt;//  2015-11-18&lt;/span&gt;
&lt;span class="nx"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;matches&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;  &lt;span class="c1"&gt;// 13&lt;/span&gt;
&lt;span class="nx"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;str&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;search&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;pattern&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;  &lt;span class="c1"&gt;// 13&lt;/span&gt;
&lt;span class="nx"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;str&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;pattern&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;$1&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;  &lt;span class="c1"&gt;// hello world, 2015-11-18 20:29:04 +0800&lt;/span&gt;
&lt;span class="nx"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;str&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sr"&gt;/\s+/&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;  &lt;span class="c1"&gt;// hello,world,,it,is,2015-11-18,20:29:04,+0800&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;htmlEscape&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sr"&gt;/[&amp;lt;&amp;gt;&amp;quot;&amp;amp;]/g&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;match&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;pos&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;originalText&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
        &lt;span class="k"&gt;switch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;match&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;lt;&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
                &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;amp;lt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;gt;&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
                &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;amp;gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;amp;&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
                &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;amp;amp;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;quot;&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
                &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nx"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;htmlEscape&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;lt;p class=&amp;quot;paragraph&amp;quot;&amp;gt; Hello world! &amp;lt;/p&amp;gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;  &lt;span class="c1"&gt;// &amp;lt;p class=&amp;quot;paragraph&amp;quot;&amp;gt; Hello world! &amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;最后使用之前定义的&lt;code&gt;print&lt;/code&gt;函数会再次将内容做转换;&lt;/p&gt;
&lt;h3&gt;Global&lt;/h3&gt;
&lt;p&gt;不属于任何其他对象的属性和方法都是全局对象的属性和方法, 许多不需要其他对象便可以使用的函数都是全局对象的方法, 在全局作用域中定义的函数和变量也是全局对象的方法和属性; 在浏览器中, 一般将全局对象作为&lt;code&gt;window&lt;/code&gt;对象的一部分加以实现, 即全局对象的属性和方法都是&lt;code&gt;window&lt;/code&gt;对象的属性和方法&lt;/p&gt;
&lt;p&gt;全局变量主要有以下常用属性和方法:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;encodeURL()&lt;/code&gt;、&lt;code&gt;encodeURLComponent()&lt;/code&gt;方法用于URL的编码;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;eval()&lt;/code&gt;方法用于执行某段字符串表示的代码, 慎用该方法, 避免&lt;strong&gt;代码注入攻击&lt;/strong&gt;;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Math&lt;/h3&gt;
&lt;p&gt;Math对象提供一些简单的数学功能, 包括一些常用的常量以及常用计算方法, 如Math.E、Math.PI、min()、ceil()、floor()、round()、random()、sin()、sqrt()等等;&lt;/p&gt;</summary><category term="javascript"></category></entry><entry><title>urllib.request模块中的三大组件</title><link href="http://www.lyon0804.com/urllibrequestmo-kuai-zhong-de-san-da-zu-jian.html" rel="alternate"></link><updated>2015-10-31T00:00:00+08:00</updated><author><name>lyon</name></author><id>tag:www.lyon0804.com,2015-10-31:urllibrequestmo-kuai-zhong-de-san-da-zu-jian.html</id><summary type="html">&lt;h2&gt;Request类&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;Request&lt;/code&gt;类用于生成请求对象，描述一个的URL请求的相关信息。其构造方法为：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;Request&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;headers&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{},&lt;/span&gt; &lt;span class="n"&gt;origin_req_host&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;unverifiable&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;method&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;各个参数依次为：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;url&lt;/code&gt; : 包含一个有效URL，该URL不一定是真实的URL，urllib会自动处理重定向过程，并将真实url返回，可以被&lt;code&gt;Response&lt;/code&gt;对象获取到，并通过&lt;code&gt;geturl()&lt;/code&gt;方法返回真实URL；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;data&lt;/code&gt; : 必须是字节码数据，如果是&lt;code&gt;unicode&lt;/code&gt;，应该先&lt;code&gt;encode&lt;/code&gt;成字节码；当该参数被设定时，请求方法将会变成POST，并且只能被当前Request对象使用；&lt;code&gt;data&lt;/code&gt;应该作为标准&lt;code&gt;application/x-www-form-urlencoded&lt;/code&gt;格式的缓存，可以通过&lt;code&gt;urllib.parse.urlencode()&lt;/code&gt;函数生成该格式；使用&lt;code&gt;data&lt;/code&gt;时，应该正确设置&lt;code&gt;Content-Type&lt;/code&gt;首部，确保服务器正确识别；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;headers&lt;/code&gt; : 是一个&lt;code&gt;dict&lt;/code&gt;对象，该按照键值对的形式，添加到首部中，除了通过&lt;code&gt;headers&lt;/code&gt;参数，还可以使用&lt;code&gt;add_header()&lt;/code&gt;方法后续逐一添加首部；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;origin_req_host&lt;/code&gt; : 该值代表原始主机地址，如网页图片的原始主机地址等；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;unverifiable&lt;/code&gt; : 通过设定该值为&lt;code&gt;True&lt;/code&gt;，可以获取一些无法被自动获取的资源；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;method&lt;/code&gt; : 指定使用的HTTP方法，如果不指定该参数，则使用默认方法，当&lt;code&gt;data&lt;/code&gt;为空时，该参数默认为&lt;code&gt;GET&lt;/code&gt;，当&lt;code&gt;data&lt;/code&gt;不为空时，该参数默认为&lt;code&gt;POST&lt;/code&gt;；可以通过&lt;code&gt;get_method()&lt;/code&gt;方法获取实际使用的方法；&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;code&gt;Request()&lt;/code&gt;对象是一个基本对象，该对象包括&lt;code&gt;方法&lt;/code&gt;、&lt;code&gt;数据&lt;/code&gt;、&lt;code&gt;首部&lt;/code&gt;、&lt;code&gt;代理&lt;/code&gt;等各种URL基本信息，当使用该请求时，使用这些已经配置好的信息来完成请求。该对象的常规属性方法不再赘述，有几个比较特殊的方法：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;add_unredirected_header(key,header)&lt;/code&gt; : 和普通的首部不同，由该方法指定的首部将不会被添加到重定向的请求中；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;set_proxy(host,type)&lt;/code&gt; : 该方法设定请求的代理，发送请求前先连接到代理服务器；&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;OpenerDirector类&lt;/h2&gt;
&lt;p&gt;通过&lt;code&gt;OpenerDirector&lt;/code&gt;类实例化的对象(以下称&lt;code&gt;opener&lt;/code&gt;)，是句柄(&lt;code&gt;handlers&lt;/code&gt;)链和异常恢复的管理器，模块中的&lt;code&gt;urlopen()&lt;/code&gt;函数就是一个&lt;code&gt;opener&lt;/code&gt;的具体方法，通过模块中的&lt;code&gt;install_opener()&lt;/code&gt;函数，可以改变默认的&lt;code&gt;urlopen()&lt;/code&gt;，更加好的办法是，通过&lt;code&gt;build_opener()&lt;/code&gt;函数来新建一个&lt;code&gt;opener&lt;/code&gt;；&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;如果说Request是演员的话，Opener是一个导演的角色负责统筹规划，而Handler则是场工包揽粗活重活，但是三者联合才能做出作品。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;该对象包含以下方法：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;add_handler(handler)&lt;/code&gt; : 添加一个句柄，该句柄是BaseHandler()对象，该方法将搜索该对象的以下方法: protocol_open()、http_error_type()、protocol_error()、protocal_request()、protocol_response()，并将其添加到句柄链中。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;open(url, data=None[, timeout])&lt;/code&gt; : 打开一个url，更加常用的是一个&lt;code&gt;Request()&lt;/code&gt;对象。该方法的返回值和异常值和&lt;code&gt;urlopen()&lt;/code&gt;函数类似；可选参数&lt;code&gt;timeout&lt;/code&gt;仅在HTTP、HTTPS、FTP协议中有效，指定连接超时的时间，默认由套接字(socket)的默认超时时间指定；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;error(proto, *args)&lt;/code&gt; : 指定协议的错误，如果是HTTP协议，则可以使用错误代码来指定，如：&lt;code&gt;http_error_404&lt;/code&gt;等；&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;一个opener打开一个URL，需要通过以下三个阶段：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;所有的handler执行&lt;code&gt;protocal_request()&lt;/code&gt;方法，完成请求的初始化操作；&lt;/li&gt;
&lt;li&gt;所有的handler执行&lt;code&gt;protocal_open()&lt;/code&gt;方法，如果有一个handler接收到&lt;code&gt;None&lt;/code&gt;或者引发异常，都会终止该阶段；该算法首先尝试&lt;code&gt;default_open()&lt;/code&gt;方法，当其返回空时，再循环调用&lt;code&gt;protocal_open()&lt;/code&gt;方法(该方法名根据不同的handler会不同)，如果这些方法仍然返回空，则再循环调用&lt;code&gt;unknown_open()&lt;/code&gt;方法；&lt;/li&gt;
&lt;li&gt;所有handler执行&lt;code&gt;protocal_response()&lt;/code&gt;方法，处理响应结果；&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;BaseHandler类&lt;/h2&gt;
&lt;p&gt;该类中定义基本的handler方法和属性，并被具体的Handler类继承，这些类定义了具体的请求的处理方式。&lt;/p&gt;
&lt;p&gt;常用的HTTP子类有：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;HTTPDefaultErrorHandler&lt;/code&gt; : 定义HTTP错误码的默认处理；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;HTTPRedirectHanlder&lt;/code&gt; : 重定向句柄，该句柄处理返回码为&lt;code&gt;30*&lt;/code&gt;的HTTP请求，并重定向到新的URL；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;HTTPCookieProcessor(cookiejar=None)&lt;/code&gt; : Cookie管理句柄，需要传入一个&lt;code&gt;cookiejar&lt;/code&gt;对象，该对象可由&lt;code&gt;http.cookiejar.CookieJar()&lt;/code&gt;类实例化；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ProxyHandler(proxies=None)&lt;/code&gt; : 代理管理句柄，会自动读取系统环境变量中的代理；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;HTTPHandler&lt;/code&gt; : HTTP处理句柄&lt;/li&gt;
&lt;li&gt;&lt;code&gt;HTTPSHandler&lt;/code&gt; : HTTPS处理句柄&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;通过以上这一些句柄定义具体的请求操作，并使用opener管理统筹整个过程的进行。&lt;/p&gt;
&lt;h2&gt;补充实验&lt;/h2&gt;</summary><category term="python"></category><category term="urllib"></category><category term="http"></category></entry><entry><title>urllib初探</title><link href="http://www.lyon0804.com/urllibchu-tan.html" rel="alternate"></link><updated>2015-10-28T00:00:00+08:00</updated><author><name>lyon</name></author><id>tag:www.lyon0804.com,2015-10-28:urllibchu-tan.html</id><summary type="html">&lt;p&gt;&lt;code&gt;urllib&lt;/code&gt;是一个Python的内置库，用来完成url相关的相关处理，最主要的功能就是使用通过url来完成请求。常用但不限于HTTP协议。&lt;/p&gt;
&lt;h2&gt;Python2.x和Python3.x的区别&lt;/h2&gt;
&lt;p&gt;在Python2.x中，有两个不同的模块：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;urllib : 只能通过一个url来发出请求，提供urlencode函数生成GET的查询字符串；&lt;/li&gt;
&lt;li&gt;urllib2 : 可以通过Request对象来发出请求，支持添加各种头部，意味着可以伪装成各种浏览器。没有urlencode函数；&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;而在Python3.x中，这两个模块以及urlparse、robotparser一共四个模块合并为一个urllib模块，并且按照不同的功能分成5个子模块：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;urllib.error : 定义一些异常类；&lt;/li&gt;
&lt;li&gt;urllib.parse : 完成url的解析工作，将一个url分解成不同部分；&lt;/li&gt;
&lt;li&gt;urllib.request : 通过Request对象发出请求，另外一个请求方式被废除；&lt;/li&gt;
&lt;li&gt;urllib.response : 针对获取到的响应设计的文件类接口，可以用处理文件的形式处理响应；&lt;/li&gt;
&lt;li&gt;urllib.robotparser : 解析robotstxt，文件相关定义参考&lt;a href="http://www.robotstxt.org/orig.html"&gt;官方文档&lt;/a&gt;；&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;使用urllib发送HTTP请求&lt;/h2&gt;
&lt;p&gt;使用Python3.x的urllib模块来发送简单的HTTP请求，Python2.x对应之前的各个模块，以&lt;code&gt;GET&lt;/code&gt;和&lt;code&gt;POST&lt;/code&gt;为例；&lt;/p&gt;
&lt;h2&gt;1. 发送GET请求获取weibo主页&lt;/h2&gt;
&lt;p&gt;先看代码:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;#!/usr/bin/env python&lt;/span&gt;
&lt;span class="c"&gt;# -*- coding: utf-8 -*- #&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;urllib&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;

&lt;span class="n"&gt;req&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Request&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;http://weibo.com&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;method&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;GET&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;req&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_header&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="s"&gt;&amp;#39;Content-Type&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;application/x-www-form-urlencoded;charset=utf-8&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;req&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_header&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="s"&gt;&amp;#39;User-Agent&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s"&gt;&amp;#39;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_0) AppleWebKit/601.1.56 (KHTML, like Gecko) Version/9.0 Safari/601.1.56&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;urlopen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;req&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;sina_index.html&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;wb&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;out&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;head_line&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;HTTP/&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s"&gt; &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s"&gt; &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="se"&gt;\r\n&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;version&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;status&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;reason&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;real_url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;
    &lt;span class="n"&gt;headers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;info&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;head_line&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;headers&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;其中进行的一些主要步骤为：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;新建&lt;code&gt;Request()&lt;/code&gt;对象，指定url以及需要使用的方法，可以通过header参数来传递HTTP首部；&lt;/li&gt;
&lt;li&gt;使用&lt;code&gt;add_header()&lt;/code&gt;方法，逐一添加需要的HTTP首部，主要是&lt;code&gt;User-Agent&lt;/code&gt;必须指定一个浏览器类型，否则容易被网站屏蔽；&lt;/li&gt;
&lt;li&gt;使用&lt;code&gt;request.urlopen()&lt;/code&gt;方法，发送请求，并将响应作为文件形式进行操作；&lt;/li&gt;
&lt;li&gt;打印响应的首部，并将响应实体写入到文件中；&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;使用&lt;code&gt;Safari&lt;/code&gt;的用户代理工具可以轻松获取浏览器类型代码：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;选择一个浏览器类型；&lt;/li&gt;
&lt;li&gt;再选择其他，Safari会将当前浏览器的类型代码显示出来；&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;最后打印的响应首部为：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kr"&gt;HTTP&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="m"&gt;1.1&lt;/span&gt; &lt;span class="m"&gt;200&lt;/span&gt; &lt;span class="ne"&gt;OK&lt;/span&gt;
&lt;span class="na"&gt;Server&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="l"&gt;nginx&lt;/span&gt;
&lt;span class="na"&gt;Date&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="l"&gt;Tue, 27 Oct 2015 17:30:08 GMT&lt;/span&gt;
&lt;span class="na"&gt;Content-Type&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="l"&gt;text/html&lt;/span&gt;
&lt;span class="na"&gt;Transfer-Encoding&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="l"&gt;chunked&lt;/span&gt;
&lt;span class="na"&gt;Connection&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="l"&gt;close&lt;/span&gt;
&lt;span class="na"&gt;Vary&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="l"&gt;Accept-Encoding&lt;/span&gt;
&lt;span class="na"&gt;Cache-Control&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="l"&gt;no-cache, must-revalidate&lt;/span&gt;
&lt;span class="na"&gt;Expires&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="l"&gt;Sat, 26 Jul 1997 05:00:00 GMT&lt;/span&gt;
&lt;span class="na"&gt;Pragma&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="l"&gt;no-cache&lt;/span&gt;
&lt;span class="na"&gt;Pragma&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="l"&gt;no-cache&lt;/span&gt;
&lt;span class="na"&gt;DPOOL_HEADER&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="l"&gt;dryad39&lt;/span&gt;
&lt;span class="na"&gt;SINA-LB&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="l"&gt;aGEuOTEuZzEucXhnLmxiLnNpbmFub2RlLmNvbQ==&lt;/span&gt;
&lt;span class="na"&gt;SINA-TS&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="l"&gt;ZDZjYTk0Y2UgMCAwIDAgNiAxMQo=&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;2. 使用Cookie登陆&lt;/h2&gt;
&lt;p&gt;由于HTTP是无状态协议，网页服务如果需要管理一个&lt;code&gt;Session&lt;/code&gt;(会话)，则势必要使用&lt;code&gt;Cookie&lt;/code&gt;，以弥补HTTP的无状态缺点，利用这个特点，只需要在借助浏览器先完成一次登陆，然后获取Cookie，并使用Cookie来完成登陆。&lt;/p&gt;
&lt;p&gt;获取Cookie的方式非常简单，通过&lt;code&gt;Chrome&lt;/code&gt;浏览器自带的开发者工具就可以完成。&lt;/p&gt;
&lt;p&gt;首先成功登陆微博，等待一会，完成本次连接的全部内容，然后调出开发者工具，并且选择Network选项卡：&lt;/p&gt;
&lt;p&gt;&lt;img alt="步骤1" src="http://ww3.sinaimg.cn/large/95202659gw1exh7w0ayjzj21ha0rcjwe.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;接下来刷新页面，此时，浏览器发送Cookie来完成验证：&lt;/p&gt;
&lt;p&gt;&lt;img alt="步骤2" src="http://ww4.sinaimg.cn/large/95202659gw1exh7w1ark9j21hc0u0gwd.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;在Network选项卡中，会把本次浏览器的连接过程按照时间先后排序后列出，第一个时间点但是是重新登陆验证了，所以右击这次连接，可以看到复制Request头以及Response头等各种选项，获取Cookie需要Request头，复制并且粘贴：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nf"&gt;GET&lt;/span&gt; &lt;span class="nn"&gt;/lyon0804/&lt;/span&gt; &lt;span class="kr"&gt;HTTP&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="m"&gt;1.1&lt;/span&gt;
&lt;span class="na"&gt;Host&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="l"&gt;weibo.com&lt;/span&gt;
&lt;span class="na"&gt;Connection&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="l"&gt;keep-alive&lt;/span&gt;
&lt;span class="na"&gt;Accept&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="l"&gt;text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8&lt;/span&gt;
&lt;span class="na"&gt;Upgrade-Insecure-Requests&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="l"&gt;1&lt;/span&gt;
&lt;span class="na"&gt;User-Agent&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="l"&gt;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_0) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/46.0.2490.80 Safari/537.36&lt;/span&gt;
&lt;span class="na"&gt;Accept-Encoding&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="l"&gt;gzip, deflate, sdch&lt;/span&gt;
&lt;span class="na"&gt;Accept-Language&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="l"&gt;zh-CN,zh;q=0.8,en;q=0.6,zh-TW;q=0.4&lt;/span&gt;
&lt;span class="na"&gt;Cookie&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="l"&gt;*****&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;由于Cookie包含会话的认证信息，所以不要向他人公开Cookie，将上述请求头写到程序中，再次发送请求。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;#!/usr/bin/env python&lt;/span&gt;
&lt;span class="c"&gt;# -*- coding: utf-8 -*- #&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;urllib&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;

&lt;span class="n"&gt;header&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="s"&gt;&amp;#39;Host&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;weibo.com&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s"&gt;&amp;#39;Connection&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;keep-alive&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s"&gt;&amp;#39;Accept&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="s"&gt;&amp;#39;text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s"&gt;&amp;#39;Upgrade-Insecure-Requests&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s"&gt;&amp;#39;User-Agent&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="s"&gt;&amp;#39;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_0) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/46.0.2490.80 Safari/537.36&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s"&gt;&amp;#39;Accept-Encoding&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;gzip, deflate, sdch&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s"&gt;&amp;#39;Accept-Language&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;zh-CN,zh;q=0.8,en;q=0.6,zh-TW;q=0.4&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s"&gt;&amp;#39;Cookie&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;*****&amp;#39;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="n"&gt;req&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Request&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;http://weibo.com&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;method&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;GET&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;headers&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;header&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;urlopen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;req&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;sina_home.html.gz&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;wb&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;out&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;注意本次连接时，为了减轻IO压力，传输了压缩的内容，下载后，需要通过&lt;code&gt;gzip -cd sina_home.html.gz &amp;gt;sina_home.html&lt;/code&gt;命令解压该文件，登陆成功，但是注意下载的只是个人首页的网页框架，并不是全部内容，新鲜事这类的，需要通过解析其他的内容才能完成。&lt;/p&gt;
&lt;h2&gt;3. 使用POST命令模拟微博表单登陆&lt;/h2&gt;
&lt;p&gt;pc端的微博登陆页面有些复杂，先看相对简单的&lt;a href="https://passport.weibo.cn/signin/login"&gt;移动端微博登陆页面&lt;/a&gt;，参考&lt;a href="http://www.liaoxuefeng.com/wiki/0014316089557264a6b348958f449949df42a6d3a2e542c000/001432688314740a0aed473a39f47b09c8c7274c9ab6aee000"&gt;廖雪峰的Python教程&lt;/a&gt;：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;urllib&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;parse&lt;/span&gt;

&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;Login to weibo.cn...&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;email&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;input&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;Email: &amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;passwd&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;input&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;Password: &amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;login_data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;parse&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;urlencode&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;username&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;email&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;password&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;passwd&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;entry&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;mweibo&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;client_id&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;savestate&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;1&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;ec&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;pagerefer&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;https://passport.weibo.cn/signin/welcome?entry=mweibo&amp;amp;r=http%3A&lt;/span&gt;&lt;span class="si"&gt;%2F%2F&lt;/span&gt;&lt;span class="s"&gt;m.weibo.cn&lt;/span&gt;&lt;span class="si"&gt;%2F&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;])&lt;/span&gt;

&lt;span class="n"&gt;req&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Request&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;https://passport.weibo.cn/sso/login&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;req&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_header&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;Origin&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;https://passport.weibo.cn&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;req&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_header&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;User-Agent&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;Mozilla/6.0 (iPhone; CPU iPhone OS 8_0 like Mac OS X) AppleWebKit/536.26 (KHTML, like Gecko) Version/8.0 Mobile/10A5376e Safari/8536.25&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;req&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_header&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;Referer&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;https://passport.weibo.cn/signin/login?entry=mweibo&amp;amp;res=wel&amp;amp;wm=3349&amp;amp;r=http%3A&lt;/span&gt;&lt;span class="si"&gt;%2F%2F&lt;/span&gt;&lt;span class="s"&gt;m.weibo.cn&lt;/span&gt;&lt;span class="si"&gt;%2F&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;urlopen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;req&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;login_data&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;encode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;utf-8&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;Status:&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;status&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;reason&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getheaders&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s"&gt;: &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;Data:&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;decode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;utf-8&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这一个过程没有弄很明白，先记录一下，等待之后解决：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;如何获取表单所需要的信息；&lt;/li&gt;
&lt;li&gt;该表单中密码使用了明文的方式，是否存在安全问题；&lt;/li&gt;
&lt;li&gt;使用了Referer头部来指定原始URI，是否存在安全问题，和上一条一样，是否是由&lt;code&gt;HTTPS&lt;/code&gt;来保证安全出传输；&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;问题解决(持续更新)&lt;/h2&gt;
&lt;p&gt;首先解决之前留下的三个问题：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;如何获取表单内容，使用Firefox浏览器，并安装HTTPfox插件，即可跟踪消息记录，获取到POST的内容，其中就有表单信息；&lt;/li&gt;
&lt;li&gt;明文密码的安全问题，还没有搞清楚，但是可以肯定的是建立在SSL或者TSL的安全通道基础上，防止被第三方截获；&lt;/li&gt;
&lt;li&gt;Referer首部，使用POST方法时，该首部不含有账号密码的信息，更加重要的是，网站为了验证是否由站点自身发起，加入首部可以伪装成站点自身；&lt;/li&gt;
&lt;/ol&gt;</summary><category term="python"></category><category term="urllib"></category><category term="http"></category></entry><entry><title>HTTP初探及python实现</title><link href="http://www.lyon0804.com/httpchu-tan-ji-pythonshi-xian.html" rel="alternate"></link><updated>2015-10-26T00:00:00+08:00</updated><author><name>lyon</name></author><id>tag:www.lyon0804.com,2015-10-26:httpchu-tan-ji-pythonshi-xian.html</id><summary type="html">&lt;h2&gt;HTTP协议&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;HTTP&lt;/code&gt;协议(&lt;em&gt;HyperText Transfer Protocol&lt;/em&gt; 超文本转移协议，常又被称为超文本传输协议)是TCP/IP协议簇中的其中一种应用层协议，广泛应用于网页服务器和浏览器之间的通信。HTTP协议建立在&lt;code&gt;TCP&lt;/code&gt;协议的基础上，所以在建立HTTP通信之前必须建立TCP连接，HTTP的请求和响应必须符合协议规范，是比TCP更高层次的具体规定。&lt;/p&gt;
&lt;p&gt;HTTP的请求和响应都由几个部分组成：&lt;code&gt;请求行/状态行&lt;/code&gt;、&lt;code&gt;请求首部/响应首部&lt;/code&gt;、&lt;code&gt;请求实体/响应实体&lt;/code&gt;，前两个部分统称&lt;code&gt;报文首部&lt;/code&gt;，和&lt;code&gt;报文实体&lt;/code&gt;通过&lt;code&gt;\r\n&lt;/code&gt;分割（有一些服务器支持只由&lt;code&gt;\n&lt;/code&gt;分割）。&lt;/p&gt;
&lt;p&gt;一个HTTP请求实例：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nf"&gt;POST&lt;/span&gt; &lt;span class="nn"&gt;/uniform/resource/identifier&lt;/span&gt; &lt;span class="kr"&gt;HTTP&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="m"&gt;1.1&lt;/span&gt;
&lt;span class="na"&gt;Host&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="l"&gt;www.sina.com&lt;/span&gt;
&lt;span class="na"&gt;Content-Length&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="l"&gt;1024&lt;/span&gt;
&lt;span class="err"&gt;(空行\r\n)&lt;/span&gt;
//实体内容
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;上面的例子中，第一行由三个部分组成：&lt;code&gt;方法名&lt;/code&gt;、&lt;code&gt;URI&lt;/code&gt;、&lt;code&gt;协议版本&lt;/code&gt;，第二行开始一直到&lt;code&gt;\r\n&lt;/code&gt;位置，都是HTTP的首部字段，定义一系列关于本次请求的详细信息，&lt;code&gt;\r\n&lt;/code&gt;开始到结束是请求的实体部分。通过这样的格式告诉服务器这次请求想干什么。&lt;/p&gt;
&lt;p&gt;一个HTTP响应实例：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kr"&gt;HTTP&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="m"&gt;1.1&lt;/span&gt; &lt;span class="m"&gt;200&lt;/span&gt; &lt;span class="ne"&gt;OK&lt;/span&gt;
&lt;span class="na"&gt;Server&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="l"&gt;Apache&lt;/span&gt;
&lt;span class="err"&gt;(空行\r\n)&lt;/span&gt;
//实体内容
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;服务器收到请求之后，返回类似于上面的响应，第一行一样由三个部分组成：&lt;code&gt;协议版本&lt;/code&gt;、&lt;code&gt;状态码&lt;/code&gt;、&lt;code&gt;原因短语&lt;/code&gt;，以及第二行开始到空行的各种响应头，最后是响应的实体。&lt;/p&gt;
&lt;p&gt;更多关于HTTP的内容，可以参考&lt;em&gt;《图解HTTP》&lt;/em&gt;。&lt;/p&gt;
&lt;h2&gt;Python发送HTTP请求&lt;/h2&gt;
&lt;p&gt;使用&lt;code&gt;httplib&lt;/code&gt;以及&lt;code&gt;httplib2&lt;/code&gt;等库，都可以发送HTTP请求，以&lt;code&gt;httplib2&lt;/code&gt;为例：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;#!/usr/bin/env python&lt;/span&gt;
&lt;span class="c"&gt;# -*- coding: utf-8 -*- #&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;httplib2&lt;/span&gt;

&lt;span class="n"&gt;http&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;httplib2&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Http&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="n"&gt;headers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="s"&gt;&amp;#39;Host&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;127.0.0.1&amp;#39;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="n"&gt;uri&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;http://127.0.0.1:8080/index.html&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;content&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;uri&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;GET&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;headers&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;headers&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__dict__&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;content&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;上述过程实现从本机的&lt;code&gt;8080&lt;/code&gt;端口的HTTP服务器上访问主页内容，这个过程是每次访问网页时，浏览器做的基本工作，但是浏览器还需要做的工作非常多。&lt;/p&gt;
&lt;p&gt;上述实现中，使用了有关http的类库，将连接的过程封装了起来，这样做对于使用是非常有好处的，但是为了更好理解HTTP工作的过程，应该有更底层的考察：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;#!/usr/bin/env python&lt;/span&gt;
&lt;span class="c"&gt;# -*- coding: utf-8 -*- #&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;socket&lt;/span&gt;

&lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;socket&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;socket&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;connect&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;127.0.0.1&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;8080&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="n"&gt;head_line&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;GET /index.html HTTP/1.1&lt;/span&gt;&lt;span class="se"&gt;\r\n&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;headers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;Host : 127.0.0.1&lt;/span&gt;&lt;span class="se"&gt;\r\n&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;head_line&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;headers&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;&lt;/span&gt;&lt;span class="se"&gt;\r\n&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;recv&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1024&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Python搭建HTTP服务器&lt;/h2&gt;
&lt;p&gt;建立连接光有客户端还不够，还需要一个服务器，下面将用三种方法建立一个简单的HTTP服务器，都是基于Python。&lt;/p&gt;
&lt;p&gt;最简单的方法，只需要一个命令即可：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;python&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt; &lt;span class="n"&gt;SimpleHTTPServer&lt;/span&gt; &lt;span class="mi"&gt;8080&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;更加详细地如下：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;#!/usr/bin/env python&lt;/span&gt;
&lt;span class="c"&gt;# -*- coding: utf-8 -*- #&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;BaseHTTPServer&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;HTTPServer&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;SimpleHTTPServer&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;SimpleHTTPRequestHandler&lt;/span&gt;

&lt;span class="n"&gt;server_class&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;HTTPServer&lt;/span&gt;
&lt;span class="n"&gt;handler_class&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;SimpleHTTPRequestHandler&lt;/span&gt;
&lt;span class="n"&gt;Protocol&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;HTTP/1.1&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;Hostname&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;127.0.0.1&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;Port&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;8080&lt;/span&gt;
&lt;span class="n"&gt;server_address&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Hostname&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;Port&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;handler_class&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;protocol_version&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Protocol&lt;/span&gt;
&lt;span class="n"&gt;httpd&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;server_class&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;server_address&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;handler_class&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;httpd&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;handle_request&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;上述两种方法都是一样的方式，都是通过Python内置的简单服务来搭建最简单的HTTP服务器，然而这个过程封装了一些东西，并不是特别直观，最直观的服务应该从TCP连接开始，从TCP到HTTP的转换过程可以更加利于理解：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;#!/usr/bin/env python&lt;/span&gt;
&lt;span class="c"&gt;# -*- coding: utf-8 -*- #&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;socket&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;threading&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Thread&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;activeCount&lt;/span&gt;
&lt;span class="n"&gt;CWD&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getcwd&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;parse_head_line&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;head_line&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;pos_a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;head_line&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;find&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39; &amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;pos_b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;head_line&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;rfind&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39; &amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;method&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;head_line&lt;/span&gt;&lt;span class="p"&gt;[:&lt;/span&gt;&lt;span class="n"&gt;pos_a&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="n"&gt;protocol&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;head_line&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;pos_b&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:]&lt;/span&gt;
    &lt;span class="n"&gt;url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;head_line&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;pos_a&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;pos_b&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;strip&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;CWD&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;url&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;method&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;protocol&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;tcplink&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sock&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;add&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sock&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;recv&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1024&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;space_line&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;find&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;&lt;/span&gt;&lt;span class="se"&gt;\r\n&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;head&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[:&lt;/span&gt;&lt;span class="n"&gt;space_line&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;space_line&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:]&lt;/span&gt;
        &lt;span class="n"&gt;head_line&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;head&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;&lt;/span&gt;&lt;span class="se"&gt;\r\n&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pop&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;method&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;protocol&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;parse_head_line&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;head_line&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="c"&gt;# do something about method&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;method&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;protocol&lt;/span&gt;
        &lt;span class="n"&gt;request_content&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;&amp;#39;&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;method&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;GET&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;fp&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="n"&gt;request_content&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;fp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="n"&gt;head_line&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;HTTP/1.1 200 OK&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;&lt;/span&gt;
        &lt;span class="n"&gt;head&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;Content-Type: text/html&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;&lt;/span&gt;
        &lt;span class="n"&gt;request&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;head_line&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;head&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;&lt;/span&gt;&lt;span class="se"&gt;\r\n&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;request_content&lt;/span&gt;
        &lt;span class="n"&gt;sock&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;finally&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;sock&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;


&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;__main__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;socket&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;socket&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;bind&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;127.0.0.1&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;8080&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;listen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;sock&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;add&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;accept&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Thread&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;target&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;tcplink&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sock&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;add&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;start&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;activeCount&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="k"&gt;break&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;上面的过程反应了HTTP协议的内部细节，也是各种HTTP服务实现的基础，但是如果到实际应用上，并发、IO等各种问题需要解决，使用一个成熟的服务器软件是比较好的选择，例如nginx，搭建nginx服务器非常简单：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;brew install nginx
nginx -h  &lt;span class="c"&gt;# 查看帮助信息，里面有一个配置文件，修改配置文件可以改变监听端口、根目录等配置&lt;/span&gt;
nginx     &lt;span class="c"&gt;# 使用默认配置文件启动&lt;/span&gt;
nginx -p &lt;span class="nv"&gt;$PWD&lt;/span&gt;  &lt;span class="c"&gt;# 以当前路径为前缀路径启动（根目录根据设置不同，可能为prefix/html等）&lt;/span&gt;
nginx -c user.conf &lt;span class="c"&gt;# 使用自定义配置启动&lt;/span&gt;
nginx -s stop &lt;span class="c"&gt;# 发送以下四个命令控制服务：stop, quit, reopen, reload&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;HTTP协议中的认证方式&lt;/h2&gt;
&lt;p&gt;HTTP协议内的认证方式有两种：&lt;code&gt;BASIC&lt;/code&gt;认证、&lt;code&gt;DIGEST&lt;/code&gt;认证，这两种方式都是通过客户端请求-&amp;gt;服务器认证请求-&amp;gt;客户端发送认证信息这样三步完成，不同的是DIGEST认证增加了质询码的加密方式，但是总体来说，这两种方式都不安全且不灵活。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;SSL&lt;/code&gt;(Secure Socket Layer)客户端认证：该认证并不属于HTTP协议内容。通过值得信赖的第三方证书来完成认证过程，在SSL建立的安全线路基础上进行的HTTP通信，称为&lt;code&gt;HTTPS&lt;/code&gt;，这种方式HTTP并不直接和TCP对接，而是和SSL协议对接，由于第三方介入以及双因素认证等更加安全的措施，是一种比较安全的认证方式。但是向第三方证书发行机构购买证书会产生客观的额外费用。&lt;/p&gt;
&lt;p&gt;表单认证是通常网页采取的认证方式，通过表单将用户名和密码与服务器的信息做匹配来完成。表单验证实际上是服务器的一个应用，所以安全性取决于服务器应用的设计，但是不会产生多余费用，基本上的网页都会采取表单认证的方式。&lt;/p&gt;</summary><category term="python"></category><category term="http"></category></entry><entry><title>Python2.x中的编码</title><link href="http://www.lyon0804.com/python2xzhong-de-bian-ma.html" rel="alternate"></link><updated>2015-10-24T00:00:00+08:00</updated><author><name>lyon</name></author><id>tag:www.lyon0804.com,2015-10-24:python2xzhong-de-bian-ma.html</id><summary type="html">&lt;h2&gt;unicode和UTF&lt;/h2&gt;
&lt;p&gt;Python2.x中的字符串编码经常会引起一些困扰，根本原因往往是搞混了UTF-8和unicode的关系。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;unicode&lt;/code&gt;(&lt;em&gt;Universal Multiple-Octet Coded Character Set&lt;/em&gt;)是一种国际标准的字符集，是一张字符和编码的一张表格，用来表示世界上所有的语言。该字符集有两张表：&lt;code&gt;UCS-2&lt;/code&gt;和&lt;code&gt;UCS-4&lt;/code&gt;。这两张表的区别是使用多少个字节来表示一个字符，前者使用两个字节，后者使用四个字节，字节数越多说明可以表示的总字符量越大，下文中，将使用&lt;strong&gt;对照码&lt;/strong&gt;来表示这两张字符集中的码，用以区分实际存储的&lt;strong&gt;字节码&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;如果编译过Python的话，就会知道有一个编译选项：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;--enable-unicode&lt;span class="o"&gt;[=&lt;/span&gt;ucs&lt;span class="o"&gt;[&lt;/span&gt;24&lt;span class="o"&gt;]&lt;/span&gt; Enable Unicode strings &lt;span class="o"&gt;(&lt;/span&gt;default is ucs2&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;python默认使用&lt;code&gt;UCS-2&lt;/code&gt;这张表来对unicode进行解读，不是十分必要下，不应该修改这个配置。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;UTF&lt;/code&gt;(&lt;em&gt;UCS Transformation Format&lt;/em&gt;)则是具体的一种编码存储方案，unicode是一张字符对应的表，而UTF则是这张表在计算机内部存储时的编码，说人话就是UTF是UCS的实现方式，同样也有两种方式：&lt;code&gt;UTF-16&lt;/code&gt;和&lt;code&gt;UTF-8&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;UTF-16&lt;/code&gt;是最直观的方式，就是直接用UCS的对照码来存储，如&lt;code&gt;汉&lt;/code&gt;字的unicode码字为：&lt;code&gt;\u6c49&lt;/code&gt;，该码字是&lt;code&gt;汉&lt;/code&gt;这个字在&lt;code&gt;UCS-2&lt;/code&gt;的&lt;strong&gt;对照码&lt;/strong&gt;，&lt;code&gt;UTF-16&lt;/code&gt;有两种编码方式：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;一种是&lt;code&gt;UTF-16-BE&lt;/code&gt;，这种编码完全按照对照码顺序作为字节码，表示为：&lt;code&gt;\x6c\x49&lt;/code&gt;；&lt;/li&gt;
&lt;li&gt;另外一种&lt;code&gt;UTF-16-LE&lt;/code&gt;，则是将对照码顺序颠倒作为字节码，表示为&lt;code&gt;\x49\x6c&lt;/code&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这种方式比较直观，但是有一个问题是，由于直接使用了对照码作为字节码，原本只需要一个字节的英文字符，也统一为使用两个字节，而且和&lt;code&gt;ASCII&lt;/code&gt;码无法兼容，又有两种编码的顺序问题，所以使用比较少，并且应该避免使用。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;UTF-8&lt;/code&gt;则是为了解决上述问题的另外一种编码，根据UCS的范围使用不同的编码方式，利用这种分段编码的方式，兼容&lt;code&gt;ASCII&lt;/code&gt;，对应关系如下：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;UCS-2对照码范围&lt;/th&gt;
&lt;th align="right"&gt;UTF8字节编码&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;0000 0000-0000 007F&lt;/td&gt;
&lt;td align="right"&gt;0xxxxxxx&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;0000 0080-0000 07FF&lt;/td&gt;
&lt;td align="right"&gt;110xxxxx 10xxxxxx&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;0000 0800-0000 FFFF&lt;/td&gt;
&lt;td align="right"&gt;1110xxxx 10xxxxxx 10xxxxxx&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;0001 0000-0010 FFFF&lt;/td&gt;
&lt;td align="right"&gt;11110xxx 10xxxxxx 10xxxxxx 10xxxxxx&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;可以看到，虽然可以做到兼容ASCII，但是比较大的对照码则需要更多的字节来表示，如中文需要三个字节来存储。观察UTF8的编码规则，可以看到，当首子为&lt;code&gt;0&lt;/code&gt;时，会被立即解码，当头部有若干个&lt;code&gt;1&lt;/code&gt;时，则会被识别本次解码需要多少字节。&lt;/p&gt;
&lt;h2&gt;Python2.x中的编码&lt;/h2&gt;
&lt;h3&gt;1. python源代码的编码&lt;/h3&gt;
&lt;p&gt;Python2.x中，默认的编码方式是&lt;code&gt;ASCII&lt;/code&gt;，也就是说，Python的整个脚本文件都是以ASCII码来编码的，这就意味着除了ASCII码以外的字符，都不能出现在脚本文件中，包括&lt;em&gt;注释中也不能出现诸如中文等字符&lt;/em&gt;，否则都会得到类似的错误：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;SyntaxError: Non-ASCII character &lt;span class="s1"&gt;&amp;#39;\xe6&amp;#39;&lt;/span&gt; in file coder.py on line 8, but no encoding declared&lt;span class="p"&gt;;&lt;/span&gt; see http://python.org/dev/peps/pep-0263/ &lt;span class="k"&gt;for&lt;/span&gt; details
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;解决这个问题，就要改变Python的脚本的编码格式，方法是在Python脚本的头部加入一个&lt;code&gt;magic comment&lt;/code&gt;：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# -*- coding: utf-8 -*- #&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;事实上，python的解释器将通过&lt;code&gt;coding[:=]\s*([-\w.]+)&lt;/code&gt;这个正则表达式来获取脚本文件的编码内容，具体规则参考&lt;a href="https://www.python.org/dev/peps/pep-0263/"&gt;PEP 0263&lt;/a&gt;。加上该头之后，Python2.x的脚本中就可以使用中文，但是要注意，在字符串中直接使用中文时，内容是字节码，根据UTF-8的规则，每个中文都是三个字节的码字。&lt;/p&gt;
&lt;h3&gt;2. python中字符串的编码&lt;/h3&gt;
&lt;p&gt;python中的字符串可以通过两个方法实现编码和解码：&lt;code&gt;encode()&lt;/code&gt;、&lt;code&gt;decode()&lt;/code&gt;，通过指定不同的编码格式，可以对字符串进行编码和解码。编码过程就是将字节码转换成实际的字符，而解码则是将实际的字符转换成存储时的字节码。看起来不会有任何问题，但是如果我们对一个字节码进行编码时，就会出现很大的问题：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# -*- coding: utf-8 -*- #&lt;/span&gt;
&lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;中文&amp;#39;&lt;/span&gt;   &lt;span class="c"&gt;# 注意，s是一个用utf-8表示的字节码，一个6个字节，每个汉字一个字节&lt;/span&gt;
&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;decode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;utf-8&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;   &lt;span class="c"&gt;# 将字节码按照utf-8解码成unicode字符，正确&lt;/span&gt;
&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;encode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;utf-8&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;   &lt;span class="c"&gt;# 对字节码按照utf-8进行编码，错误！&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;其实是一个很简单的逻辑问题，字节码怎么可以再次被编码呢？在python中确实可以这样做，但是事实上，在Python的内部，是这样进行的：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# -*- coding: utf-8 -*- #&lt;/span&gt;
&lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;中文&amp;#39;&lt;/span&gt;
&lt;span class="c"&gt;# s.encode(&amp;#39;utf-8&amp;#39;)  # 错误&lt;/span&gt;
&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;decode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;ascii&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;encode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;utf-8&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c"&gt;# 真实发生的过程&lt;/span&gt;
&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;decode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;utf-8&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;encode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;utf-8&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c"&gt;# 正确的处理过程&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;python中的str进行编码时，会先将其按照默认的编码方式：ascii码解码成相应的字符，然后再把该字符按照指定的格式进行编码。这样问题就来了，一个字节能表示的范围远远大于ascii码的范围，当这个字节超过ascii吗范围后，再用ascii码解码时，自然就无法进行解码。&lt;/p&gt;
&lt;p&gt;需要通过&lt;code&gt;sys&lt;/code&gt;模块中的两个函数可以获取默认编码方式：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# -*- coding: utf-8 -*- #&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt;
&lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getdefaultencoding&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;  &lt;span class="c"&gt;# 获取默认编码，python2.x中为ascii&lt;/span&gt;
&lt;span class="nb"&gt;reload&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c"&gt;# reload之后才能调用setdefaultencoding()&lt;/span&gt;
&lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setdefaultencoding&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;utf-8&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c"&gt;# 将默认编码改为&amp;#39;utf-8&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;如果不调用&lt;code&gt;encode()&lt;/code&gt;方法，或者在调用之前按照正确的解码方式事先解码为字符串，上述更改没有必要进行，但是在python中，有一些方法并不提供另外的编码方法，只能调用系统默认编码方法时，就必须修改这个设置，如datetime.strptime。&lt;/p&gt;
&lt;h2&gt;Python2.x中的str和unicode&lt;/h2&gt;
&lt;p&gt;Python2.x中，&lt;code&gt;basestring&lt;/code&gt;有两个子类：&lt;code&gt;str&lt;/code&gt;和&lt;code&gt;unicode&lt;/code&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;一般的字符串为&lt;code&gt;str&lt;/code&gt;对象，表示的就是字节码，默认编码方式为&lt;code&gt;ascii&lt;/code&gt;；&lt;/li&gt;
&lt;li&gt;前面加&lt;code&gt;u&lt;/code&gt;的对象为&lt;code&gt;unicode&lt;/code&gt;对象，表示的是unicode字符，使用&lt;code&gt;magic comment&lt;/code&gt;头部定义的方式解码；&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;unicode对象有两种实例化方式，一种是常见的，直接用&lt;code&gt;u'汉字'&lt;/code&gt;来直接表示一个unicode字符串，这种方式一般不会有任何问题；另外一种方式是通过&lt;code&gt;unicode()&lt;/code&gt;方法传入一个待转换的对象，并调用该对象的&lt;code&gt;__unicode__&lt;/code&gt;方法，如果该对象没有这个方法，则会调用其&lt;code&gt;__str__&lt;/code&gt;将其转变为字符串，如果该字符串是unicode字符串则直接返回，如果不是，则为了识别不同的编码字符串，将会按照默认的编码方式解码，然后再编码为unicode，这里就会出现上面说的编码问题。注意，unicode()接收的对象并不是字节码，而是字符串。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# -*- coding: utf-8 -*- #&lt;/span&gt;
&lt;span class="n"&gt;u&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;u&amp;#39;中文&amp;#39;&lt;/span&gt;  &lt;span class="c"&gt;# 表示一个unicode字符串：u&amp;#39;\u4e2d\u6587&amp;#39;&lt;/span&gt;
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;A&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__unicode__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;decode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;utf-8&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;中文&amp;#39;&lt;/span&gt;  &lt;span class="c"&gt;# 表示utf-8编码的字节串，&amp;#39;\xe4\xb8\xad\xe6\x96\x87&amp;#39;&lt;/span&gt;
&lt;span class="nb"&gt;unicode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c"&gt;# 错误，相当于unicode(s,defaultencoding)，内部过程为 s.encode(defaultencoding).decode(&amp;#39;utf-8&amp;#39;)，发生上文提到的编码问题&lt;/span&gt;
&lt;span class="nb"&gt;unicode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;utf-8&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c"&gt;# 相当于unicode(s,&amp;#39;utf-8&amp;#39;)，正确&lt;/span&gt;
&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nb"&gt;unicode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;    &lt;span class="c"&gt;# 调用a对象的__unicode__方法，正确&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;常见问题以及推荐解决方案&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;读写文件时，都应该对编码后的字节码操作，读入文件后应该解码，写入文件前应该编码；&lt;/li&gt;
&lt;li&gt;调用&lt;code&gt;datetime.strptime()&lt;/code&gt;方法时，将会使用默认编码方式解码，如果格式中有中文，如&lt;code&gt;datetime.strptime(u'2015年10月25日', "%Y年%m月%d日")&lt;/code&gt;，则只能修改系统默认编码方式为&lt;code&gt;utf-8&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;正则表达式中，如果使用了unicode对象，则其pattern应该也应该使用unicode对象，如：&lt;code&gt;re.search(u'中',u'中文')&lt;/code&gt;；&lt;/li&gt;
&lt;li&gt;其他涉及到encode和decode的方法时，都应该检查是否使用了正确的编码方法，而不是调用默认方法，或者修改系统的默认编码方法；&lt;/li&gt;
&lt;li&gt;为了减少编码带来的问题，应该在每一个脚本的头部添加&lt;code&gt;magic comment&lt;/code&gt;；&lt;/li&gt;
&lt;li&gt;尽可能使用python3.x&lt;/li&gt;
&lt;/ol&gt;</summary><category term="python"></category><category term="编码"></category></entry><entry><title>TCP/IP协议及Python实现</title><link href="http://www.lyon0804.com/tcpipxie-yi-ji-pythonshi-xian.html" rel="alternate"></link><updated>2015-10-24T00:00:00+08:00</updated><author><name>lyon</name></author><id>tag:www.lyon0804.com,2015-10-24:tcpipxie-yi-ji-pythonshi-xian.html</id><summary type="html">&lt;h2&gt;OSI参考模型与TCP/IP协议&lt;/h2&gt;
&lt;p&gt;OSI参考模型是由ISO提出的作为通信协议设计的模型。该模型将通信过程分成7个部分，又称OSI七层模型，通过这七层模型，将通信过程中的不同功能进行划分，每层仅需要对其上一层提供特定的接口，以及接收下一层提供的特定接口，从而对复杂的通信过程进行简化，只需要关注某一层的实现以及保持其接口统一即可。这七层模型为：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;物理层 : 该层决定数字电路中的0、1对应的电压状态，并且规定连接器和网线的规格，在物理层面上确保连接的畅通有效；&lt;/li&gt;
&lt;li&gt;数据链路层 : 该层确保不同设备之间的数据传送以及识别，将0、1的比特流转换为真实的数据，并保证设备之间通过物理地址(MAC地址)互相识别；&lt;/li&gt;
&lt;li&gt;网络层 : 该层决定每个设备的在网络中的地址，以及路由的规则；&lt;/li&gt;
&lt;li&gt;传输层 : 该层确保数据在两个设备之间可靠传输，检查是否有数据丢失以及是否到达正确的目标；&lt;/li&gt;
&lt;li&gt;会话层 : 该层负责建立通信后的管理，何时建立通信，何时断开通信，每次连接保持多长时间等等；&lt;/li&gt;
&lt;li&gt;表示层 : 该层负责将真实的信息内容，如文字、图像、声音、影片等，转换为网络传输中的标准格式，确保网络中每台设备可以正确解读这些信息；&lt;/li&gt;
&lt;li&gt;应用层 : 该层包含各种网络应用协议，如电子邮件协议、文件传输协议、超文本传输协议等等；&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;OSI参考模型仅仅是ISO为了不同设备之间建立相互通信的标准化建议，每一层模型都代表了通信过程中应该实现的功能。OSI协议则是满足OSI七层模型的协议，由于各种原因，虽然ISO做了很多标准化工作，OSI协议并没有得到流行，而真正流行的协议则是TCP/IP协议。&lt;/p&gt;
&lt;p&gt;TCP/IP协议同样有一套参考模型，该模型和OSI参考模型不同，只有四层：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;链路层 : 负责各种数据传输的硬件，如网线、网卡、交换机、中继、路由器等等网络硬件设备，包含OSI参考模型中的1、2两层，TCP/IP模型并没有对这一层做出详细的描述；&lt;/li&gt;
&lt;li&gt;网络层 : 该层和OSI参考模型的网络层对应，包含网络地址协议: &lt;code&gt;IP&lt;/code&gt;(Internet Protocol)协议，以及为了识别该地址的辅助协议，如:DNS、ARP、ICMP、DHCP等等；&lt;/li&gt;
&lt;li&gt;传输层 : 该层和OSI参考模型的传输层对应，建立两个设置之间的连接，包含可靠传输协议: &lt;code&gt;TCP&lt;/code&gt;(Transmission Control Protocol)协议，以及不可靠数据报协议: &lt;code&gt;UDP&lt;/code&gt;(User Datagram Protocol)协议。识别IP协议提供的地址以及上一层应用提供的端口号；&lt;/li&gt;
&lt;li&gt;应用层 : 该层包括OSI参考模型中的5、6、7层，包含具体的应用程序提供的协议，如: URL、HTTP、TLS/SSL、SSH、FTP、SMTP、POP、IMAP等等；&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;TCP/IP协议在上述四层模型的基础上提出具体协议内容，并且随着UNIX系统的普及得到广泛流行，和OSI模型关注每一层实现的功能不同，TCP/IP模型更加关注的是功能的实现。&lt;/p&gt;
&lt;p&gt;在TCP/IP的制定过程中，就是先有了这一系列的协议，再通过RFC(Request For Comment)文档作为标准传播开来。在协议的制定过程中，往往先实现了某一功能，然后对其进行实验，所以有着&lt;strong&gt;开放性&lt;/strong&gt;和&lt;strong&gt;实用性&lt;/strong&gt;两大特点。&lt;/p&gt;
&lt;h2&gt;建立连接&lt;/h2&gt;
&lt;p&gt;使用TCP协议作为连接协议，在建立连接的过程中，既要对下层协议传递的IP地址进行设备识别，也要通过上层协议传递的端口号识别具体的应用程序，通过IP地址和端口号，才可以在两个应用程序建立连接。而结合这两个地址，需要使用&lt;code&gt;socket&lt;/code&gt;(套接字)的接口，应用程序通过该接口，设置目标IP地址和端口号，TCP协议获取该套接字，并且实现相应的连接过程。&lt;/p&gt;
&lt;p&gt;在TCP连接的建立过程中，发起连接的设备成为客户端，响应连接的设备成为服务器。&lt;/p&gt;
&lt;p&gt;首先需要一台服务器，服务器的功能是监听本设备的某个端口，当有客户端请求访问该端口时，做出响应的回应。&lt;/p&gt;
&lt;p&gt;服务端程序：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;#!/usr/bin/env python&lt;/span&gt;
&lt;span class="c"&gt;# -*- coding: utf-8 -*- #&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;socket&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;threading&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Thread&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;activeCount&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;tcplink&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sock&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;add&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Accept a connection from &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s"&gt;:&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;add&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;sock&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Hello, there! you are from &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s"&gt;:&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;add&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;is_sweet&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;
        &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sock&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;recv&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1024&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;exit&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;is_sweet&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                    &lt;span class="n"&gt;sock&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Bye, sweet!&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                    &lt;span class="n"&gt;sock&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;funcking away!&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="k"&gt;break&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;find&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;fuck&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="n"&gt;is_sweet&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;
                &lt;span class="n"&gt;sock&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;funcking back!&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="n"&gt;sock&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;You say &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s"&gt;, yeah?&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;finally&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;sock&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Connection from &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s"&gt;:&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s"&gt; is closed&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;add&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;__main__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;socket&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;socket&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;bind&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;127.0.0.1&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;9000&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;listen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;sock&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;add&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;accept&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Thread&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;target&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;tcplink&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sock&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;add&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;start&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;activeCount&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="k"&gt;break&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;在上面的程序中，首先使用默认参数创建一个套接字，并使用该套接字监听本地设备的&lt;code&gt;9000&lt;/code&gt;端口，客户端通过和该端口建立连接。&lt;/p&gt;
&lt;p&gt;客户端程序：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;#!/usr/bin/env python&lt;/span&gt;
&lt;span class="c"&gt;# -*- coding: utf-8 -*- #&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;socket&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;input&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sock&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;accept&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sock&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;accept&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;next&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;msg&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;raw_input&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="n"&gt;accept&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;msg&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;exit&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;break&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sock&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;msg&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;yield&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;sock&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;sock&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;recv&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1024&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;__main__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;socket&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;socket&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;connect&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;127.0.0.1&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;9000&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;recv&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1024&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="nb"&gt;input&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;finally&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;该客户端通过连接服务器，就可以和自己聊聊天(这么认真肯定不是自动回复)：&lt;/p&gt;
&lt;p&gt;&lt;img alt="演示" src="http://ww2.sinaimg.cn/large/95202659gw1exbke60f3aj218o11iqa3.jpg" /&gt;&lt;/p&gt;
&lt;h2&gt;实现细节&lt;/h2&gt;
&lt;h3&gt;1. 端口&lt;/h3&gt;
&lt;p&gt;上述例子中的&lt;code&gt;9000&lt;/code&gt;就是一个端口，每一台设备都会有很多端口，有些端口具有特殊的用途，如&lt;code&gt;22&lt;/code&gt;端口用于&lt;code&gt;ssh&lt;/code&gt;登陆协议，&lt;code&gt;80&lt;/code&gt;端口用于&lt;code&gt;http&lt;/code&gt;协议等等，不能使用已经被占用的端口，小于1024的端口是Internet标准端口，不能被随意使用。&lt;/p&gt;
&lt;p&gt;IP地址和端口的元组可以确定应用程序在网络上的具体位置，&lt;code&gt;127.0.0.1&lt;/code&gt;表示本地IP地址，而&lt;code&gt;0.0.0.0&lt;/code&gt;则表示所有的IP地址。&lt;/p&gt;
&lt;h3&gt;2. 套接字&lt;/h3&gt;
&lt;p&gt;通过socket.socket()实例化一个套接字，默认使用&lt;code&gt;IPv4&lt;/code&gt;协议，以及面向流的TCP协议，通过传入其他可用协议更改。&lt;/p&gt;
&lt;p&gt;在服务器程序上，套接字实例化后完成以下任务：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;使用&lt;code&gt;bind()&lt;/code&gt;方法和本地(&lt;code&gt;127.0.0.1&lt;/code&gt;)的&lt;code&gt;9000&lt;/code&gt;绑定&lt;/li&gt;
&lt;li&gt;使用&lt;code&gt;listen()&lt;/code&gt;方法监听该端口，并设置最大等待连接数为&lt;code&gt;5&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;使用&lt;code&gt;accept()&lt;/code&gt;方法接收来自客户端的连接请求，并获取相应的&lt;code&gt;socket&lt;/code&gt;以及地址信息&lt;/li&gt;
&lt;li&gt;开启线程来获取客户端请求&lt;code&gt;recv()&lt;/code&gt;方法(每次最多接收1024个字节)，以及作出相应的响应&lt;code&gt;send()&lt;/code&gt;方法&lt;/li&gt;
&lt;li&gt;保持连接状态，直到客户端发送&lt;code&gt;exit&lt;/code&gt;消息或者客户端关闭连接&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;在客户端程序上，套接字实例化后的任务为：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;通过&lt;code&gt;connect()&lt;/code&gt;方法连接服务器：&lt;code&gt;127.0.0.1:9000&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;当控制台有输入内容且不是&lt;code&gt;exit&lt;/code&gt;的时候，向服务器发送输入内容&lt;/li&gt;
&lt;li&gt;使用&lt;code&gt;recv()&lt;/code&gt;方法，接收服务器返回的消息，每次最多接收1024字节&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;有关socket的内容详见&lt;a href="https://docs.python.org/2/library/socket.html?highlight=socket#module-socket"&gt;官方文档&lt;/a&gt;。&lt;/p&gt;
&lt;h3&gt;3. TCP连接过程&lt;/h3&gt;
&lt;p&gt;TCP通过套接字进行连接，为了保证连接的可靠性，需要进行&lt;strong&gt;三次握手&lt;/strong&gt;:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;客户端发送一个建立连接的请求&lt;code&gt;SYN&lt;/code&gt;(Synchronize)数据包，并处于&lt;code&gt;SYN_SENT&lt;/code&gt;状态；&lt;/li&gt;
&lt;li&gt;出于&lt;code&gt;LISTEN&lt;/code&gt;状态的服务器端接受到&lt;code&gt;SYN&lt;/code&gt;包，并且返回&lt;code&gt;ACK&lt;/code&gt;(Acknowledge)确认应答以及&lt;code&gt;SYN&lt;/code&gt;包请求建立连接，并出于&lt;code&gt;SYN_RECV&lt;/code&gt;状态，等待客户端返回&lt;code&gt;ACK&lt;/code&gt;；&lt;/li&gt;
&lt;li&gt;客户端收到服务器端返回的&lt;code&gt;ACK&lt;/code&gt;以及&lt;code&gt;SYN&lt;/code&gt;，收到&lt;code&gt;ACK&lt;/code&gt;进入待命状态&lt;code&gt;ESTABLISHED&lt;/code&gt;，对&lt;code&gt;SYN&lt;/code&gt;返回&lt;code&gt;ACK&lt;/code&gt;确认包；&lt;/li&gt;
&lt;li&gt;服务器端收到&lt;code&gt;ACK&lt;/code&gt;并且进入待命状态&lt;code&gt;ESTABLISHED&lt;/code&gt;，三次握手成功；&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;这个过程非常有趣，博弈论里有一个著名的协同攻击难题，是格莱斯（J. Gray）于1978年提出的:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;有两个将军占据两个山头等候敌人，将军A得到情报敌人刚刚到达，立足未稳，如果两军一起进攻，就能获得胜利，而如果只有一方进攻的话，就会失败。于是将军A遇到一个难题：如何与将军B协同进攻？当时没有电报，只能派出通信兵。将军A派出通信兵告诉将军B：黎明一起进攻！但是情报员在中途可能会失踪或者被抓捕，将军A并不能确定将军B是否收到了消息。然而事实上情报员回来了，但是将军A又陷入了困境：他不知道将军B知不知道情报员已经回来了。于是将军A又派情报员去将军B那里，但是这次还是不能确定情报员一定能够达。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;格莱斯提出这个问题，并且被证明无论该情报员来回多少次都不能让将军一起进攻，原因是黎明前一起进攻这件事情无法形成公共知识。&lt;/p&gt;
&lt;p&gt;那么在TCP连接的的第三步，客户端其实也无法确保服务端可以收到来自客户端的&lt;code&gt;ACK&lt;/code&gt;确认包，这个包可能会产生丢包，服务器就无法从&lt;code&gt;SYN_RECV&lt;/code&gt;状态进入到&lt;code&gt;ESTABLISHED&lt;/code&gt;状态，当服务器等待获取的时间大于&lt;code&gt;重发超时&lt;/code&gt;时间时，会尝试重新发送&lt;code&gt;SYN&lt;/code&gt;以及&lt;code&gt;ACK&lt;/code&gt;包，当时间超过&lt;code&gt;SYN Timeout&lt;/code&gt;时间后，本次连接失败。&lt;/p&gt;
&lt;p&gt;建立连接之后，为了保证数据可靠性，TCP协议还需要在传输的过程中进行一些工作来保证数据的可靠性：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;客户端给服务器端发送数据时，会添加一个首部字段，该字段包含发送数据的编号以及数据的长度信息；&lt;/li&gt;
&lt;li&gt;服务器端接收客户端发来的数据，检查首部字段是否已经被接收，以及数据长度是否一致，并且返回确认或者不确认的应答；&lt;/li&gt;
&lt;li&gt;客户端等待接收服务器端的应答，如果收到不确认的应答或者超过&lt;code&gt;重发超时&lt;/code&gt;的时间(1s的整数倍)，则重新发送之前的数据；&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;在数据传输以及确认应答的过程中，完成数据的传输，由于上述三个步骤的保证，在传输过程中，即使出现丢包(发送时丢包或者确认应答丢包)，都可以保证数据的准确性。&lt;/p&gt;
&lt;p&gt;同样的，在完成连接传输之后，切断连接也需要进行握手，客户端发送&lt;code&gt;FIN&lt;/code&gt;的切断连接请求，而客户端则需要分别发送两个包：&lt;code&gt;ACK&lt;/code&gt;和&lt;code&gt;FIN&lt;/code&gt;(因为一旦切断确认就不能发送切断请求了，和连接时有所不同)，然后客户端再次发送&lt;code&gt;ACK&lt;/code&gt;确认切断连接。&lt;/p&gt;
&lt;p&gt;也就是说，一次正常完整的TCP连接，除了发送的数据之外，需要额外的&lt;strong&gt;7&lt;/strong&gt;个数据包才能完成。&lt;/p&gt;
&lt;p&gt;更多协议细节可以参考&lt;em&gt;《图解TCP/IP》&lt;/em&gt;中的内容。&lt;/p&gt;</summary><category term="python"></category><category term="TCP/IP"></category></entry><entry><title>Jinja2初探之api</title><link href="http://www.lyon0804.com/jinja2chu-tan-zhi-api.html" rel="alternate"></link><updated>2015-10-18T00:00:00+08:00</updated><author><name>lyon</name></author><id>tag:www.lyon0804.com,2015-10-18:jinja2chu-tan-zhi-api.html</id><summary type="html">&lt;h2&gt;加载模板&lt;/h2&gt;
&lt;p&gt;最简单的模板使用方式是从字符串中导入模板，如：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;jinja2&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Template&lt;/span&gt;
&lt;span class="n"&gt;template&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Template&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;this is a {{ value }}&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;text&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;template&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;hello&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;text&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__class__&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;可以看到模板的使用分为两个部分，首先要加载，然后对其进行渲染，渲染其实就是对模板中的一些变量进行赋值，和自带的模板不同，这里的变量赋值传递的是变量对象本身，而不仅仅是一个字符串。如果对模板中未定义的变量进行赋值，则会直接忽略；如果模板中有未赋值的变量，则默认为空（但是要注意空行）。&lt;/p&gt;
&lt;p&gt;同时注意到，渲染后的字符串类型是&lt;code&gt;unicode&lt;/code&gt;，不仅返回的是unicode，在渲染时，传递的对象也需要是&lt;code&gt;unicode&lt;/code&gt;（向下兼容&lt;code&gt;ASCII&lt;/code&gt;），并且需要使用UNIX的换行符&lt;code&gt;\n&lt;/code&gt;，而事实上，&lt;code&gt;\n&lt;/code&gt;、&lt;code&gt;\r&lt;/code&gt;、&lt;code&gt;\r\n&lt;/code&gt;都会在渲染后变成&lt;code&gt;\n&lt;/code&gt;，并且如果最后一个字符为&lt;code&gt;\n&lt;/code&gt;则会默认忽略：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;template&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Template&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="se"&gt;\r&lt;/span&gt;&lt;span class="s"&gt; &lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt; &lt;/span&gt;&lt;span class="se"&gt;\r\n&lt;/span&gt;&lt;span class="s"&gt; &lt;/span&gt;&lt;span class="se"&gt;\n\r&lt;/span&gt;&lt;span class="s"&gt; &lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;text&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;template&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;render&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="nb"&gt;ord&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;结果为：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;10
32
10
32
10
32
10
10
32
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;在很多情况下，模板渲染的结果需要输出到文件中，则使用&lt;code&gt;stream&lt;/code&gt;方法创建&lt;code&gt;TemplateStream()&lt;/code&gt;对象，调用其&lt;code&gt;dump&lt;/code&gt;方法是一种比较好的方式，并且该对象提供了生成器方法，用以一些较大模板的渲染：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;template&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stream&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;hello&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dump&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;out.txt&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;更好的方式&lt;/h2&gt;
&lt;p&gt;一个模板往往存在与模板文件中，如果使用&lt;code&gt;Template&lt;/code&gt;类直接去构造模板对象，则应该先读取模板文件的内容，并且进行一些IO上的处理，而这些处理jiaja2的&lt;code&gt;Loader&lt;/code&gt;加载器已经帮我们完成了，在&lt;em&gt;loader.py&lt;/em&gt;源码文件中，可以看到诸如下面的类：&lt;code&gt;FileSystemLoader&lt;/code&gt;、&lt;code&gt;PackageLoader&lt;/code&gt;、&lt;code&gt;DictLoader&lt;/code&gt;、&lt;code&gt;FunctionLoader&lt;/code&gt;等等，这些类的工作是提供一个模板名字和模板文件真实路径的对应关系，加载文件时的IO操作等等，也可以编写自己的加载器，只需要继承&lt;code&gt;BaseLoader&lt;/code&gt;类，并且实现其&lt;code&gt;get_source()&lt;/code&gt;方法，具体实现方式可以参考源码中其他加载器的实现方式。&lt;/p&gt;
&lt;p&gt;更加好的模板加载方式，是通过&lt;code&gt;Environment&lt;/code&gt;类来构建一个模板，&lt;code&gt;Environment()&lt;/code&gt;对象是一个环境控制的对象，说白了就是将jinja2里面的各种功能组合在一起，通过&lt;code&gt;Environment()&lt;/code&gt;对象可以使用加载器加载模板，也可以使用扩展，添加过滤器等等，使用该对象来管理环境内容（如各种标识符，是否使用行语句等）的同时，可以将各个功能更好地结合在一起，如使用一个加载器来加载模板：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;jinja2&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;FileSystemLoader&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;Environment&lt;/span&gt;
&lt;span class="n"&gt;env&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Environment&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;loader&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;FileSystemLoader&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;template&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="n"&gt;template&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;env&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_template&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;one_template.txt&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;template&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;some value&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;使用扩展&lt;/h2&gt;
&lt;p&gt;当已经有一个&lt;code&gt;Environment()&lt;/code&gt;对象之后，就可以把jinja2里面的功能添加上去，扩展便是其中一种，如添加循环控制扩展：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;jinja2&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Environment&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;FileSystemLoader&lt;/span&gt;
&lt;span class="n"&gt;env&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Environment&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;loader&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;FileSystemLoader&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;template&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
                      &lt;span class="n"&gt;extension&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;jinja2.ext.loopcontrols&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;或者在已有对象上添加扩展：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;env&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_extension&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;jinja2.ext.loopcontrols&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;个人感觉第二种方式更好，关于jinja2中自带的一些扩展参考&lt;a href="http://www.pythonfan.org/docs/python/jinja2/zh/extensions.html"&gt;扩展说明文档&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;编写自己的扩展时，应该继承&lt;code&gt;jinja2.ext.Extension&lt;/code&gt;基类，具体实现参考&lt;a href="http://www.pythonfan.org/docs/python/jinja2/zh/extensions.html#module-jinja2.ext"&gt;模板接口说明&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;自定义过滤器&lt;/h2&gt;
&lt;p&gt;过滤器的本质是一个函数，该函数至少接收一个位置参数，如：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;datetimeformat&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;%H:%M / &lt;/span&gt;&lt;span class="si"&gt;%d&lt;/span&gt;&lt;span class="s"&gt;-%m-%y&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;strftime&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;该函数对一个datetime对象进行格式化，在模板中通过过滤器即可快速实现时间格式的统一，使用自定义的过滤器需要在环境对象中添加绑定：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;env&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;filters&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;datetimeformat&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;datetimeformat&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;绑定定义的函数到名为&lt;code&gt;datetimeformat&lt;/code&gt;的过滤器上，此时即可在解析模板中的同名过滤器。&lt;/p&gt;
&lt;p&gt;为了在过滤器中获取上下文环境，jinja2提供三个装饰器：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;@environmentfilter&lt;/code&gt; : 传递环境变量为第一个参数，可以在过滤器中获取环境内容&lt;/li&gt;
&lt;li&gt;&lt;code&gt;@contextfilter&lt;/code&gt; : 这种过滤器一般接受通用参数&lt;code&gt;(*args, **kwargs)&lt;/code&gt; ,并通过检查参数的名字做出更灵活的操作，如&lt;code&gt;map&lt;/code&gt;过滤器&lt;/li&gt;
&lt;li&gt;&lt;code&gt;@evalcontextfilter&lt;/code&gt; : 传递上下文为第一个参数，通过识别该上下文是否开启自动转义操作，进行更加安全地操作&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;自定义测试&lt;/h2&gt;
&lt;p&gt;测试和过滤器一样是一个函数，但是测试更加简单，因为其返回值只能是&lt;code&gt;True&lt;/code&gt;或者&lt;code&gt;False&lt;/code&gt;，测试往往用来做类型和一致性的检查，所以不能像过滤器一样获取环境以及上下文。如文档中的一个例子：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;math&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;is_prime&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;xrange&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;math&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ceil&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;math&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sqrt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;并且通过环境添加该测试的绑定：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;env&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;tests&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;prime&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;is_prime&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</summary><category term="python"></category><category term="jinja2"></category></entry><entry><title>Jinja2初探之模板语法</title><link href="http://www.lyon0804.com/jinja2chu-tan-zhi-mo-ban-yu-fa.html" rel="alternate"></link><updated>2015-10-17T00:00:00+08:00</updated><author><name>lyon</name></author><id>tag:www.lyon0804.com,2015-10-17:jinja2chu-tan-zhi-mo-ban-yu-fa.html</id><summary type="html">&lt;p&gt;在使用模板之前，首先要有一个模板，最常见的就是网页模板，因为这是Jinja2的起源(我觉得在脚本生成和组织上肯定也能够有很好地应用)，详细的模板语法可以参考&lt;a href="http://www.pythonfan.org/docs/python/jinja2/zh/templates.html"&gt;模板设计者文档&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;Jinja2默认规定了几个分割符：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;变量插入分隔符：&lt;code&gt;{{ ... }}&lt;/code&gt;，里面的内容会被直接插入到模板中；&lt;/li&gt;
&lt;li&gt;语句声明分隔符：&lt;code&gt;{% ... %}&lt;/code&gt;，&lt;/li&gt;
&lt;li&gt;注释分隔符：&lt;code&gt;{# ... #}&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;相关内容在&lt;em&gt;default.py&lt;/em&gt;中可以看到，如果有必要，可以修改。&lt;/p&gt;
&lt;p&gt;变量插入分隔符中的变量将会直接被插入到模板中，与最简单的模板功能一样。模板中的变量定义保留他们在Python中的对象属性，而块定义中则可以使用Jinja2的各种语句。&lt;/p&gt;
&lt;p&gt;同样在&lt;em&gt;parser.py&lt;/em&gt;中，可以看到支持的几个关键字：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;_statement_keywords&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;frozenset&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;for&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;if&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;block&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;extends&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;print&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                                 &lt;span class="s"&gt;&amp;#39;macro&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;include&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;from&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;import&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                                 &lt;span class="s"&gt;&amp;#39;set&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="n"&gt;_compare_operators&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;frozenset&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;eq&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;ne&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;lt&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;lteq&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;gt&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;gteq&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;1. 变量&lt;/h2&gt;
&lt;p&gt;jinja2中的变量在渲染时，可以将变量的属性同时传递进来，并且可以和python中一样使用&lt;code&gt;.&lt;/code&gt;来访问属性，或者也可以用下标的方式来访问属性，如：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="cp"&gt;{{&lt;/span&gt; &lt;span class="nv"&gt;foo.bar&lt;/span&gt; &lt;span class="cp"&gt;}}&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;{{&lt;/span&gt; &lt;span class="nv"&gt;foo&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;bar&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="cp"&gt;}}&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;上面两种方式执行的效果是一样的，这很容易带来困惑，因为这种做法将变量的属性和一个字典变量混合了，而在jinja2内部中，这两种方式的区别仅仅是首先寻找属性还是首先寻找项，为了区分真正的属性，jinja2提供一个&lt;code&gt;attr()&lt;/code&gt;的过滤器，该过滤器只会取出变量的属性，而会忽略同名的项。如：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="cp"&gt;{{&lt;/span&gt; &lt;span class="nv"&gt;foo&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="nf"&gt;attr&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;bar&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="cp"&gt;}}&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;{{&lt;/span&gt; &lt;span class="nv"&gt;foo&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;bar&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="cp"&gt;}}&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;上面两种方式则有些区别，第一种只会寻找&lt;code&gt;foo&lt;/code&gt;的&lt;code&gt;bar&lt;/code&gt;，而第二种则先寻找&lt;code&gt;foo['bar']&lt;/code&gt;，如果找不到，再寻找&lt;code&gt;foo&lt;/code&gt;的&lt;code&gt;bar&lt;/code&gt;属性。关于过滤器的内容见下文。&lt;/p&gt;
&lt;p&gt;jinja2中可以通过&lt;code&gt;set&lt;/code&gt;来定义一个变量，该变量可以是数值、字符串、列表、元组、字典等。&lt;/p&gt;
&lt;h2&gt;2. 逻辑控制&lt;/h2&gt;
&lt;p&gt;如使用for关键字可以对一个可遍历的对象进行遍历，其用法为：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nv"&gt;item&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="nv"&gt;items&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;span class="x"&gt;# do something&lt;/span&gt;
&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;span class="x"&gt;# do something else&lt;/span&gt;
&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;endfor&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;真实操作后可以发现，在&lt;code&gt;{% for item in items %}&lt;/code&gt;的后面和&lt;code&gt;{% endfor %}&lt;/code&gt;的前面会多加一个空行，可以通过在&lt;code&gt;%&lt;/code&gt;前加&lt;code&gt;-&lt;/code&gt;去掉，如：&lt;code&gt;{% for item in items -%}&lt;/code&gt;以及&lt;code&gt;{%- endfor %}&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Jinja2中，可以在循环中使用一些特殊的对象，如：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;loop.index&lt;/code&gt; : 当前循环迭代的次数，从1开始&lt;/li&gt;
&lt;li&gt;&lt;code&gt;loop.index0&lt;/code&gt; : 当前循环迭代的次数，从0开始&lt;/li&gt;
&lt;li&gt;&lt;code&gt;loop.revindex&lt;/code&gt; : 到当前循环结束需要迭代的次数，从1开始&lt;/li&gt;
&lt;li&gt;&lt;code&gt;loop.revindex0&lt;/code&gt; : 到当前循环结束需要迭代的次数，从0开始&lt;/li&gt;
&lt;li&gt;&lt;code&gt;loop.first&lt;/code&gt; : 是否是第一次迭代&lt;/li&gt;
&lt;li&gt;&lt;code&gt;loop.last&lt;/code&gt; : 是否是最后一次迭代&lt;/li&gt;
&lt;li&gt;&lt;code&gt;loop.length&lt;/code&gt; : 序列中的项目数&lt;/li&gt;
&lt;li&gt;&lt;code&gt;loop.cycle&lt;/code&gt; : 使用辅助函数取值&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在默认的for语句中，并没有&lt;code&gt;continue&lt;/code&gt;、&lt;code&gt;break&lt;/code&gt;等循环控制，可以使用开启扩展来支持该功能，如：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nv"&gt;item&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="nv"&gt;items&lt;/span&gt; -&lt;span class="cp"&gt;%}&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;span class="x"&gt;    &lt;/span&gt;&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;loop&lt;/span&gt;&lt;span class="nv"&gt;.first&lt;/span&gt; -&lt;span class="cp"&gt;%}&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;span class="x"&gt;        &lt;/span&gt;&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;continue&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;span class="x"&gt;    &lt;/span&gt;&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;endif&lt;/span&gt; -&lt;span class="cp"&gt;%}&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;span class="x"&gt;    &lt;/span&gt;&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;loop&lt;/span&gt;&lt;span class="nv"&gt;.index&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="m"&gt;5&lt;/span&gt; -&lt;span class="cp"&gt;%}&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;span class="x"&gt;        &lt;/span&gt;&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;break&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;span class="x"&gt;    &lt;/span&gt;&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;endif&lt;/span&gt; -&lt;span class="cp"&gt;%}&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;span class="x"&gt;    &lt;/span&gt;&lt;span class="cp"&gt;{{&lt;/span&gt; &lt;span class="nv"&gt;item&lt;/span&gt; -&lt;span class="cp"&gt;}}&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;endfor&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;使用过程为：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;jinja2&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;FileSystemLoader&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;Environment&lt;/span&gt;
&lt;span class="n"&gt;env&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Environment&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;loader&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;FileSystemLoader&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;template&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="n"&gt;extensions&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;jinja2.ext.loopcontrols&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="n"&gt;template&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;env&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_template&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;template.txt&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;items&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;template&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;items&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;items&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;有关其他的内置扩展，以及扩展的编写参考&lt;a href="http://www.pythonfan.org/docs/python/jinja2/zh/extensions.html#module-jinja2.ext"&gt;扩展说明文档&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;3. 宏&lt;/h2&gt;
&lt;p&gt;宏可以看做是程序语言中的函数，使用&lt;code&gt;macor&lt;/code&gt;关键字定义一个宏：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;macro&lt;/span&gt; &lt;span class="nv"&gt;foo&lt;/span&gt;&lt;span class="o"&gt;(*&lt;/span&gt;&lt;span class="nv"&gt;args&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="nv"&gt;kwargs&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;span class="x"&gt;    # do something&lt;/span&gt;
&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;endmacro&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;在宏的内部，可以使用以下变量：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;varargs : 该变量以列表形式保存超出宏定义中位置参数个数之外的参数&lt;/li&gt;
&lt;li&gt;kwargs : 该变量以字典形式保存未使用的关键字参数&lt;/li&gt;
&lt;li&gt;caller : 该变量表示以call关键字被调用时，调用对象中的内容&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;同时，宏对象也提供一些属性：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;name : 宏的名称&lt;/li&gt;
&lt;li&gt;arguments : 宏接受的参数名的元组&lt;/li&gt;
&lt;li&gt;defaults : 默认值的元组&lt;/li&gt;
&lt;li&gt;catch_kwargs : 是否有未使用的关键字参数&lt;/li&gt;
&lt;li&gt;catch_varargs : 是否有超出个数的位置参数&lt;/li&gt;
&lt;li&gt;caller : 是否有caller变量，且由call标签调用&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;以下是两种调用方式的例子：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;macro&lt;/span&gt; &lt;span class="nv"&gt;with_caller&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;string&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; -&lt;span class="cp"&gt;%}&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;span class="x"&gt;    get a &lt;/span&gt;&lt;span class="cp"&gt;{{&lt;/span&gt; &lt;span class="nv"&gt;string&lt;/span&gt; &lt;span class="cp"&gt;}}&lt;/span&gt;&lt;span class="x"&gt;,&lt;/span&gt;
&lt;span class="x"&gt;    This is a caller &lt;/span&gt;&lt;span class="cp"&gt;{{&lt;/span&gt; &lt;span class="nv"&gt;caller&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="cp"&gt;}}&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;{%&lt;/span&gt;- &lt;span class="k"&gt;endmacro&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;call&lt;/span&gt; &lt;span class="nv"&gt;with_caller&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;hello&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;span class="x"&gt;    from caller&lt;/span&gt;
&lt;span class="x"&gt;    &lt;/span&gt;&lt;span class="cp"&gt;{{&lt;/span&gt; &lt;span class="nv"&gt;with_caller.caller&lt;/span&gt; &lt;span class="cp"&gt;}}&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;{%&lt;/span&gt;- &lt;span class="k"&gt;endcall&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;

&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;macro&lt;/span&gt; &lt;span class="nv"&gt;without_caller&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;string&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; -&lt;span class="cp"&gt;%}&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;span class="x"&gt;    This is a &lt;/span&gt;&lt;span class="cp"&gt;{{&lt;/span&gt; &lt;span class="nv"&gt;string&lt;/span&gt; &lt;span class="cp"&gt;}}&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;{%&lt;/span&gt;- &lt;span class="k"&gt;endmacro&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;{{&lt;/span&gt; &lt;span class="nv"&gt;without_caller&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;hello&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="cp"&gt;}}&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;{{&lt;/span&gt; &lt;span class="nv"&gt;without_caller.caller&lt;/span&gt; &lt;span class="cp"&gt;}}&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;4. 过滤器&lt;/h2&gt;
&lt;p&gt;过滤器很像是*&lt;em&gt;nix&lt;/em&gt;中的管道，可以快速地对变量进行一些格式化操作，如对一个句子的每个单词首字母大写：&lt;code&gt;{{ title|title }}&lt;/code&gt;，其过程为返回&lt;code&gt;title(title)&lt;/code&gt;的值，外面的&lt;code&gt;title&lt;/code&gt;对应&lt;code&gt;|&lt;/code&gt;之后的&lt;code&gt;title&lt;/code&gt;，可以看到过滤器的名字不会和变量名冲突。&lt;/p&gt;
&lt;p&gt;另外一种过滤器的用法：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;filter&lt;/span&gt; &lt;span class="nf"&gt;title&lt;/span&gt; -&lt;span class="cp"&gt;%}&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;{{&lt;/span&gt; &lt;span class="nv"&gt;title&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="nf"&gt;lower&lt;/span&gt; &lt;span class="cp"&gt;}}&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;{%&lt;/span&gt;- &lt;span class="k"&gt;endfilter&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;以语句方式的过滤器会在最后执行，上面的过程和&lt;code&gt;title|lower|title&lt;/code&gt;表示相同的含义。&lt;/p&gt;
&lt;p&gt;过滤器中接受参数，当过滤器使用参数时，被过滤的内容会作为第二个参数传入，如：&lt;code&gt;{{ ['a','b','c']|join(',') }}&lt;/code&gt;表示的内容为&lt;code&gt;a,b,c&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;Jinja2内置了很多过滤器，详细可以参考&lt;a href="http://www.pythonfan.org/docs/python/jinja2/zh/templates.html#builtin-filters"&gt;内置过滤器清单&lt;/a&gt;，使用过滤器可以对字符串做出快速的格式化操作，在模板的层面就可以保证一些字符串格式的一致性。&lt;/p&gt;
&lt;h2&gt;5. 测试&lt;/h2&gt;
&lt;p&gt;jinja2中可以使用&lt;code&gt;if&lt;/code&gt;和&lt;code&gt;is&lt;/code&gt;进行测试，测试的含义是&lt;code&gt;if&lt;/code&gt;后面的变量是否能够使&lt;code&gt;is&lt;/code&gt;后面的函数返回&lt;code&gt;True&lt;/code&gt;，如：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nv"&gt;value&lt;/span&gt; &lt;span class="k"&gt;is&lt;/span&gt; &lt;span class="nf"&gt;defined&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;span class="x"&gt;# do something with value&lt;/span&gt;
&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;endif&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;测试的作用和过滤器比较类似，但是测试决定的是&lt;strong&gt;是&lt;/strong&gt;与&lt;strong&gt;否&lt;/strong&gt;，而过滤器则是将一个变量通过若干的运算变成新的变量来完成格式化。&lt;/p&gt;
&lt;p&gt;更多的测试可以参考&lt;a href="http://www.pythonfan.org/docs/python/jinja2/zh/templates.html#builtin-tests"&gt;内置测试清单&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;6. 模板组合&lt;/h2&gt;
&lt;p&gt;和编程语言一样，jinja2的模板语言也提供两种代码复用方式：组合、继承。jinja2中有两种组合的方式：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;使用&lt;code&gt;include&lt;/code&gt;语句可以将一个模板包含到当前的模板中，并且返回该模板的渲染结果&lt;/li&gt;
&lt;li&gt;使用&lt;code&gt;import&lt;/code&gt;语句可以将一个模板导入到当前模板中，使得当前模板可以使用被导入模板中的内容，如宏以及一些通过&lt;code&gt;set&lt;/code&gt;关键字设定的变量等&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;include&lt;/code&gt;更像是将两个模板文件拼接在一起，并且默认可以访问到当前的一些变量，如：&lt;/p&gt;
&lt;p&gt;有一个&lt;em&gt;small.txt&lt;/em&gt;模板：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="x"&gt;this is &lt;/span&gt;&lt;span class="cp"&gt;{{&lt;/span&gt; &lt;span class="nv"&gt;value&lt;/span&gt; &lt;span class="cp"&gt;}}&lt;/span&gt;&lt;span class="x"&gt; in small.txt&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;另外一个&lt;em&gt;big.txt&lt;/em&gt;模板：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="x"&gt;this is in big.txt&lt;/span&gt;
&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;set&lt;/span&gt; &lt;span class="nv"&gt;values&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nv"&gt;value&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="nv"&gt;values&lt;/span&gt; -&lt;span class="cp"&gt;%}&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;span class="x"&gt;    &lt;/span&gt;&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;include&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;small.txt&amp;#39;&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;endfor&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;从jinja2.1开始，被包含的模板可以访问模板定义中的变量。&lt;/p&gt;
&lt;p&gt;而&lt;code&gt;import&lt;/code&gt;则和Python中的&lt;code&gt;import&lt;/code&gt;行为类似，将一个模板中的一些可复用的宏导入到当前模板中，并且被当前模板使用。如：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;macros.txt&amp;#39;&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nv"&gt;macro&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;span class="x"&gt;# do something using function in macro&lt;/span&gt;
&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;macros.txt&amp;#39;&lt;/span&gt; &lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nv"&gt;foo&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nv"&gt;footest&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;span class="x"&gt;# do something&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;而名称以一个或者更多的下划线开头的宏和变量是私有的，不能被导入。&lt;/p&gt;
&lt;p&gt;包含和导入在某个角度看，更加像是一个相反的过程：包含用当前的名称空间对被包含的模板进行渲染并且拼接，而导入则是使得当前模板可以使用被导入模板中定义的宏和变量，而被导入模板中的其他内容则不会被当前模板拼接。&lt;/p&gt;
&lt;p&gt;包含默认会传递上下文，而导入不会，这一点可以通过&lt;code&gt;with context&lt;/code&gt;或者&lt;code&gt;without context&lt;/code&gt;来改变，如：&lt;code&gt;{% from 'macros.txt' import foo with context %}&lt;/code&gt;或者&lt;code&gt;{% include 'header.txt' without context %}&lt;/code&gt;&lt;/p&gt;
&lt;h2&gt;7. 模板继承&lt;/h2&gt;
&lt;p&gt;模板继承指的是子模板继承基本模板的骨架，并且针对更加特殊的情况，对骨架进行填充。而需要被填充的内容，则由&lt;code&gt;block&lt;/code&gt;标签定义，没有在&lt;code&gt;block&lt;/code&gt;中的内容会原样复制到子模板中。&lt;/p&gt;
&lt;p&gt;如：&lt;/p&gt;
&lt;p&gt;有一个&lt;em&gt;base.txt&lt;/em&gt;模板：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="x"&gt;this is from base&lt;/span&gt;
&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;block&lt;/span&gt; &lt;span class="nv"&gt;head&lt;/span&gt; -&lt;span class="cp"&gt;%}&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;span class="x"&gt;    block content from base&lt;/span&gt;
&lt;span class="x"&gt;    &lt;/span&gt;&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;block&lt;/span&gt; &lt;span class="nv"&gt;inside&lt;/span&gt; -&lt;span class="cp"&gt;%}&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;span class="x"&gt;    &lt;/span&gt;&lt;span class="cp"&gt;{%&lt;/span&gt;- &lt;span class="k"&gt;endblock&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;{%&lt;/span&gt;- &lt;span class="k"&gt;endblock&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;span class="x"&gt;end string from base&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;另外一个&lt;em&gt;sub.txt&lt;/em&gt;模板：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;extends&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;base.txt&amp;#39;&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;block&lt;/span&gt; &lt;span class="nv"&gt;head&lt;/span&gt; -&lt;span class="cp"&gt;%}&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;span class="x"&gt;    &lt;/span&gt;&lt;span class="cp"&gt;{{&lt;/span&gt; &lt;span class="nb"&gt;super&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="cp"&gt;}}&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;{%&lt;/span&gt;- &lt;span class="k"&gt;endblock&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;block&lt;/span&gt; &lt;span class="nv"&gt;inside&lt;/span&gt; -&lt;span class="cp"&gt;%}&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;span class="x"&gt;    this is from sub.txt&lt;/span&gt;
&lt;span class="cp"&gt;{%&lt;/span&gt;- &lt;span class="k"&gt;endblock&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;em&gt;sub.txt&lt;/em&gt;渲染的结果为：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;this is from base
block content from base
    this is from sub.txt
end string from base
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;注意，在&lt;em&gt;sub.txt&lt;/em&gt;中，每一个&lt;code&gt;block&lt;/code&gt;都应该是独立填充的，并且不应该有重复填充，如果使用沿用&lt;em&gt;base.txt&lt;/em&gt;中的嵌套方式，则会发生重复填充的情况，如：&lt;/p&gt;
&lt;p&gt;&lt;em&gt;sub.txt&lt;/em&gt;中内容为：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;extends&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;base.txt&amp;#39;&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;block&lt;/span&gt; &lt;span class="nv"&gt;head&lt;/span&gt; -&lt;span class="cp"&gt;%}&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;span class="x"&gt;    &lt;/span&gt;&lt;span class="cp"&gt;{{&lt;/span&gt; &lt;span class="nb"&gt;super&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="cp"&gt;}}&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;span class="x"&gt;    &lt;/span&gt;&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;block&lt;/span&gt; &lt;span class="nv"&gt;inside&lt;/span&gt; -&lt;span class="cp"&gt;%}&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;span class="x"&gt;        this is from sub.txt&lt;/span&gt;
&lt;span class="x"&gt;    &lt;/span&gt;&lt;span class="cp"&gt;{%&lt;/span&gt;- &lt;span class="k"&gt;endblock&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;{%&lt;/span&gt;- &lt;span class="k"&gt;endblock&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;则渲染的结果为&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;this is from base
block content from base
    this is from sub.txt
    this is from sub.txt
end string from base
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;在继承的过程中，由于&lt;code&gt;super()&lt;/code&gt;已经包含了一个&lt;code&gt;inside&lt;/code&gt;块，所以&lt;code&gt;head&lt;/code&gt;块被继承为具有两个&lt;code&gt;inside&lt;/code&gt;块的块。&lt;/p&gt;
&lt;p&gt;上面的过程中，使用到了&lt;code&gt;super()&lt;/code&gt;，即调用父级块定义内容，类似地，&lt;code&gt;self&lt;/code&gt;则表示当前模块对象，&lt;code&gt;self.header()&lt;/code&gt;可以在当前位置调用&lt;code&gt;header&lt;/code&gt;块。&lt;/p&gt;
&lt;p&gt;注意&lt;em&gt;base.txt&lt;/em&gt;决定了整个骨架，&lt;em&gt;sub.txt&lt;/em&gt;只是对其中的一些&lt;code&gt;block&lt;/code&gt;定义，但是不能改变整个骨架，就像是用&lt;em&gt;sub.txt&lt;/em&gt;中定义的&lt;code&gt;block&lt;/code&gt;来填充&lt;em&gt;base.txt&lt;/em&gt;一样。如果一些块没有被重新定义，则使用父级中的块定义。&lt;/p&gt;
&lt;p&gt;如果父级模板中使用了嵌套块，如：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nv"&gt;item&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="nv"&gt;items&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;span class="x"&gt;    &lt;/span&gt;&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;block&lt;/span&gt; &lt;span class="nv"&gt;loop_item&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;span class="x"&gt;        &lt;/span&gt;&lt;span class="cp"&gt;{{&lt;/span&gt; &lt;span class="nv"&gt;item&lt;/span&gt; &lt;span class="cp"&gt;}}&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;span class="x"&gt;    &lt;/span&gt;&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;endblock&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;endfor&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;上述写法并不能有任何作用，原因是&lt;code&gt;loop_item&lt;/code&gt;默认情况下不能访问作用域外的变量，理由是如果该块被子模板替换，则该变量无法被传递。Jinja2.2开始，可以通过&lt;code&gt;scoped&lt;/code&gt;修饰词将块设定到作用域中，如：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nv"&gt;item&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="nv"&gt;items&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;span class="x"&gt;    &lt;/span&gt;&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;block&lt;/span&gt; &lt;span class="nv"&gt;loop_item&lt;/span&gt; &lt;span class="k"&gt;scoped&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;span class="x"&gt;        &lt;/span&gt;&lt;span class="cp"&gt;{{&lt;/span&gt; &lt;span class="nv"&gt;item&lt;/span&gt; &lt;span class="cp"&gt;}}&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;span class="x"&gt;    &lt;/span&gt;&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;endblock&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;endfor&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</summary><category term="python"></category><category term="jinja2"></category></entry><entry><title>我的vim配置</title><link href="http://www.lyon0804.com/wo-de-vimpei-zhi.html" rel="alternate"></link><updated>2015-10-14T00:00:00+08:00</updated><author><name>lyon</name></author><id>tag:www.lyon0804.com,2015-10-14:wo-de-vimpei-zhi.html</id><summary type="html">&lt;blockquote&gt;
&lt;p&gt;『工欲善其事，必先利其器。』&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;自己家的配置才是最好的配置&lt;/h2&gt;
&lt;p&gt;vim作为一个高度定制的文本编辑工具，怎么配置好vim决定了vim的功能是否强大，但是同样作为文本编辑工具本身，过多不必要的配置不仅会让使用者无所适从，而且还拖慢了编辑器的速度，如何在这之间找到平衡完全取决于使用者的需求。&lt;/p&gt;
&lt;p&gt;所以，和&lt;em&gt;别人家的孩子都是好孩子&lt;/em&gt;不同，&lt;strong&gt;自己家的配置才是最好的配置&lt;/strong&gt;。所以并不推荐直接使用github上其他人的配置，但是他人的推荐却可以帮助了解更多可能有效的配置。我现在使用的配置是参考&lt;a href="https://github.com/wklken/k-vim"&gt;&lt;strong&gt;k-vim&lt;/strong&gt;&lt;/a&gt;的配置，并且修改不适合自己的内容后（比如使用方向键等）最终感觉最顺手的配置，如果有需要，可以参考。&lt;/p&gt;
&lt;h2&gt;搜索、折叠、缩进、注释&lt;/h2&gt;
&lt;p&gt;这些操作都是比较刚需的操作，并且vim已经自带这些功能。下面是一个针对python的设置示例，以及每条功能的注解：&lt;/p&gt;
&lt;h3&gt;1. 搜索&lt;/h3&gt;
&lt;p&gt;在普通模式下输入&lt;code&gt;/&lt;/code&gt;即可搜索，以下配置可以更加方便地搜索：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;set&lt;/span&gt; &lt;span class="nb"&gt;showcmd&lt;/span&gt;     &lt;span class="c"&gt;&amp;quot; 在右下角显示输入的命令&lt;/span&gt;
&lt;span class="k"&gt;set&lt;/span&gt; &lt;span class="nb"&gt;showmode&lt;/span&gt;        &lt;span class="c"&gt;&amp;quot; 在左下角显示当前的模式&lt;/span&gt;
&lt;span class="k"&gt;set&lt;/span&gt; &lt;span class="nb"&gt;hlsearch&lt;/span&gt;        &lt;span class="c"&gt;&amp;quot; 高亮搜索结果&lt;/span&gt;
&lt;span class="k"&gt;set&lt;/span&gt; &lt;span class="nb"&gt;ignorecase&lt;/span&gt;      &lt;span class="c"&gt;&amp;quot; 忽略大小写&lt;/span&gt;
&lt;span class="k"&gt;set&lt;/span&gt; &lt;span class="nb"&gt;smartcase&lt;/span&gt;       &lt;span class="c"&gt;&amp;quot; 当输入的内容有一个以上大写字母时，不忽略大小写&lt;/span&gt;
&lt;span class="k"&gt;set&lt;/span&gt; &lt;span class="nb"&gt;incsearch&lt;/span&gt;       &lt;span class="c"&gt;&amp;quot; 设置该参数后，输入的同时会即使显示搜索结果，个人感觉看着晕&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;2. 折叠&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;&amp;quot; 折叠相关命令&lt;/span&gt;
&lt;span class="c"&gt;&amp;quot; zM 折叠所有&lt;/span&gt;
&lt;span class="c"&gt;&amp;quot; zR 打开所有&lt;/span&gt;
&lt;span class="c"&gt;&amp;quot; zc 折叠当前&lt;/span&gt;
&lt;span class="c"&gt;&amp;quot; zo 打开当前&lt;/span&gt;
&lt;span class="k"&gt;set&lt;/span&gt; &lt;span class="nb"&gt;foldenable&lt;/span&gt;      &lt;span class="c"&gt;&amp;quot; 开启折叠&lt;/span&gt;
&lt;span class="k"&gt;set&lt;/span&gt; &lt;span class="nb"&gt;foldmethod&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;indent       &lt;span class="c"&gt;&amp;quot; 使用缩进折叠&lt;/span&gt;
&lt;span class="k"&gt;set&lt;/span&gt; &lt;span class="nb"&gt;foldlevel&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="m"&gt;10&lt;/span&gt;        &lt;span class="c"&gt;&amp;quot; 打开文件时只折叠超过10层以上的&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;更加详细的设置方法，比如其他折叠类型等，很容易在网上可以查到。&lt;/p&gt;
&lt;h3&gt;3. 缩进&lt;/h3&gt;
&lt;p&gt;Python的缩进非常重要，所以下面的设置也非常重要：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;set&lt;/span&gt; &lt;span class="nb"&gt;smartindent&lt;/span&gt;     &lt;span class="c"&gt;&amp;quot; 智能缩进&lt;/span&gt;
&lt;span class="k"&gt;set&lt;/span&gt; &lt;span class="nb"&gt;autoindent&lt;/span&gt;      &lt;span class="c"&gt;&amp;quot; 自动缩进&lt;/span&gt;
&lt;span class="k"&gt;set&lt;/span&gt; &lt;span class="nb"&gt;smarttab&lt;/span&gt;
&lt;span class="k"&gt;set&lt;/span&gt; &lt;span class="nb"&gt;expandtab&lt;/span&gt;       &lt;span class="c"&gt;&amp;quot; 将tab转为空格，重要！建议看下文说明&lt;/span&gt;
&lt;span class="k"&gt;set&lt;/span&gt; &lt;span class="nb"&gt;tabstop&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="m"&gt;4&lt;/span&gt;       &lt;span class="c"&gt;&amp;quot; 设置tab键宽度为4&lt;/span&gt;
&lt;span class="k"&gt;set&lt;/span&gt; &lt;span class="nb"&gt;softtabstop&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="m"&gt;4&lt;/span&gt;       &lt;span class="c"&gt;&amp;quot; 设置退格键删除4个空格&lt;/span&gt;
&lt;span class="k"&gt;set&lt;/span&gt; &lt;span class="nb"&gt;shiftwidth&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="m"&gt;4&lt;/span&gt;        &lt;span class="c"&gt;&amp;quot; 设置每次缩进对应4个空格&lt;/span&gt;
&lt;span class="k"&gt;set&lt;/span&gt; &lt;span class="nb"&gt;shiftround&lt;/span&gt;      &lt;span class="c"&gt;&amp;quot; 缩进时取整&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;在Python中，使用4个空格比使用tab更加可靠（见PEP8），但是在编辑其他文件，特别是csv文件时，将tab自动转成空格将会导致更多错误，所以，更加可靠的做法是，只在编辑Python文件时，才启用&lt;code&gt;expandtab&lt;/code&gt;，如：&lt;code&gt;autocmd FileType python set expandtab&lt;/code&gt;，默认配置下，vim检查文件类型只会用默认后缀来识别，如果希望添加更多的后缀或者其他正则等，可以使用如下配置：&lt;code&gt;autocmd BufRead,BufNew *.cpy set filetype=python&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;在其他编辑器中，往往有比较好用的块缩进功能，在vim中也一样，按一下&lt;code&gt;v&lt;/code&gt;键进入&lt;em&gt;visual&lt;/em&gt;模式，然后选中你想要选中的行，按&lt;code&gt;&amp;gt;&lt;/code&gt;即可块缩进，按&lt;code&gt;&amp;lt;&lt;/code&gt;则取消一层块缩进，但是默认设置中，每次操作都会退出&lt;em&gt;visual&lt;/em&gt;模式，设置下面两项，保持&lt;em&gt;visual&lt;/em&gt;模式：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nb"&gt;vnoremap&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;gv
&lt;span class="nb"&gt;vnoremap&lt;/span&gt; &lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;&amp;gt;&lt;/span&gt;gv
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;4. 注释&lt;/h3&gt;
&lt;p&gt;无论什么代码，方便的注释功能都是非常重要的，vim中使用块注释的方法为：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;块注释 &lt;code&gt;Ctrl+v&lt;/code&gt;，选中多行后，按&lt;code&gt;I&lt;/code&gt;，在第一行输入&lt;code&gt;#&lt;/code&gt;等内容，然后按&lt;code&gt;Esc&lt;/code&gt;，即可看到所有行都进行了注释。&lt;/li&gt;
&lt;li&gt;取消注释，和注释的原理一样，不过这次不是按&lt;code&gt;I&lt;/code&gt;输入内容，而是选中多行的注释符号后，按&lt;code&gt;d&lt;/code&gt;统一删除。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;插件管理&lt;/h2&gt;
&lt;p&gt;除了vim自带的设置之外，vim社区提供了非常丰富的插件，选择对自己有用的插件安装，插件多了之后，插件管理则显得非常重要。Vundle是比较常用的插件管理工具，其本身也是插件。&lt;/p&gt;
&lt;p&gt;从github上clone并且安装或者升级：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt; ! -e ~/bundle/vundle &lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="k"&gt;then&lt;/span&gt;
    git clone https://github.com/gmarik/vundle.git ~/bundle/vundle
&lt;span class="k"&gt;else&lt;/span&gt;
    &lt;span class="nb"&gt;cd&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;~/bundle/vundle&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; git pull
&lt;span class="k"&gt;fi&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;设置以下内容，建议和vimrc分离，单独弄一个文件管理插件：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;filetype&lt;/span&gt; off        &lt;span class="c"&gt;&amp;quot; 暂时关闭文件类型，必须设置&lt;/span&gt;
&lt;span class="k"&gt;set&lt;/span&gt; &lt;span class="nb"&gt;rtp&lt;/span&gt;&lt;span class="p"&gt;+=~&lt;/span&gt;&lt;span class="sr"&gt;/.vim/&lt;/span&gt;bundle/vundle
&lt;span class="k"&gt;call&lt;/span&gt; vundle#rc&lt;span class="p"&gt;()&lt;/span&gt;
Bundle &lt;span class="s1"&gt;&amp;#39;gmarik/vundle&amp;#39;&lt;/span&gt;      &lt;span class="c"&gt;&amp;quot; 类似于这样，在Bundle 后面跟需要安装的插件名称&lt;/span&gt;
&lt;span class="c"&gt;&amp;quot; 在用vim编辑该文件时，使用下面的相关命令管理插件&lt;/span&gt;
&lt;span class="c"&gt;&amp;quot; :BundleInstall        安装配置中的插件&lt;/span&gt;
&lt;span class="c"&gt;&amp;quot; :BundleInstall!   跟新配置中的插件&lt;/span&gt;
&lt;span class="c"&gt;&amp;quot; :BundleClean      删除本地无用的插件&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;语法高亮、语法检查、格式化&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;hdima/python-syntax&lt;/strong&gt;插件提供了更加完善的语法高亮功能，&lt;strong&gt;kevinw/pyflakes-vim&lt;/strong&gt;插件则提供了完善地Python语法检查，不过语法检查插件更加建议选择&lt;strong&gt;scrooloose/syntastic&lt;/strong&gt;，不过不论选择哪一个，都必须安装一个python模块：&lt;code&gt;pip install pyflakes&lt;/code&gt;，另外，&lt;strong&gt;mindroit101/vim-yapf&lt;/strong&gt;插件可以对Python代码进行快速格式化，一键满足PEP8要求，同样需要安装一个python模块：&lt;code&gt;pip install yapf&lt;/code&gt;。这三个模块的配置如下：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;&amp;quot; 安装使用python-syntax&lt;/span&gt;
Bundle &lt;span class="s1"&gt;&amp;#39;hdima/python-syntax&amp;#39;&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; python_highlight_all &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;        &lt;span class="c"&gt;&amp;quot; 所有关键词高亮&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;&amp;quot; 安装使用syntastic&lt;/span&gt;
Bundle &lt;span class="s1"&gt;&amp;#39;scrooloose/syntastic&amp;#39;&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;g&lt;/span&gt;:syntastic_error_symbol&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;gt;&amp;gt;&amp;#39;&lt;/span&gt;       &lt;span class="c"&gt;&amp;quot; 错误行使用&amp;#39;&amp;gt;&amp;gt;&amp;#39; 标记&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;g&lt;/span&gt;:syntastic_warning_symbol&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;gt;&amp;#39;&lt;/span&gt;      &lt;span class="c"&gt;&amp;quot; 警告行使用&amp;#39;&amp;gt;&amp;#39; 标记&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;g&lt;/span&gt;:syntastic_check_on_open&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;     &lt;span class="c"&gt;&amp;quot; 打开文件时即开启语法检查&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;g&lt;/span&gt;:syntastic_check_on_wq&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;       &lt;span class="c"&gt;&amp;quot; 保存时进行语法检查&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;g&lt;/span&gt;:syntastic_enable_highlighting&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;   &lt;span class="c"&gt;&amp;quot; 提示内容高亮显示&lt;/span&gt;
&lt;span class="c"&gt;&amp;quot; 设置Python检查规则为pyflakes和pep8&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;g&lt;/span&gt;:syntastic_python_checkers&lt;span class="p"&gt;=&lt;/span&gt;[&lt;span class="s1"&gt;&amp;#39;pyflakes&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;pep8&amp;#39;&lt;/span&gt;]
&lt;span class="c"&gt;&amp;quot; 提示内容显示相关&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;g&lt;/span&gt;:syntastic_always_populate_loc_list &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;g&lt;/span&gt;:syntastic_auto_loc_list &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;g&lt;/span&gt;:syntastic_loc_list_height &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="m"&gt;5&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;&amp;quot; 安装使用vim-yapf&lt;/span&gt;
Bundle &lt;span class="s1"&gt;&amp;#39;mindriot101/vim-yapf&amp;#39;&lt;/span&gt;
&lt;span class="k"&gt;scriptencoding&lt;/span&gt; utf&lt;span class="m"&gt;-8&lt;/span&gt;        &lt;span class="c"&gt;&amp;quot; 设置编码为utf-8&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;g&lt;/span&gt;:yapf_style &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;pep8&amp;quot;&lt;/span&gt;       &lt;span class="s2"&gt;&amp;quot; 设置主题为pep8，或者&amp;quot;&lt;/span&gt;google&amp;quot;
&lt;span class="nb"&gt;nnoremap&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;leader&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="k"&gt;y&lt;/span&gt; :&lt;span class="k"&gt;call&lt;/span&gt; Yapf&lt;span class="p"&gt;()&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;cr&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;     &lt;span class="c"&gt;&amp;quot; 设置格式化快捷键为：&amp;#39;,y&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;其中，&lt;/p&gt;
&lt;p&gt;&lt;code&gt;nnoremap&lt;/code&gt; 指在普通模式下的键位映射，这里将&lt;code&gt;:call Yapf()&lt;/code&gt;映射为&lt;code&gt;&amp;lt;leader&amp;gt;y&lt;/code&gt;,&lt;/p&gt;
&lt;p&gt;&lt;leader&gt;表示在普通模式下的命令头，如设置&lt;code&gt;let mapleader=','&lt;/code&gt;将其设置为&lt;code&gt;,&lt;/code&gt;，则，在普通模式下输入&lt;code&gt;,y&lt;/code&gt;即可将Python文件按照PEP8的建议格式化。&lt;/p&gt;
&lt;h2&gt;导航&lt;/h2&gt;
&lt;p&gt;使用&lt;strong&gt;scrooloose/nerdtree&lt;/strong&gt;插件，可以在vim中方便地使用导航功能，快速打开其他的文件等：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;Bundle &lt;span class="s1"&gt;&amp;#39;scrooloose/nerdtree&amp;#39;&lt;/span&gt;
&lt;span class="c"&gt;&amp;quot; 一些常用的键位&lt;/span&gt;
&lt;span class="c"&gt;&amp;quot; &amp;lt;leader&amp;gt;n : 打开导航&lt;/span&gt;
&lt;span class="c"&gt;&amp;quot; Ctrl + ww : 窗口键切换&lt;/span&gt;
&lt;span class="c"&gt;&amp;quot; &amp;lt;leader&amp;gt;o : 打开选中的文件&lt;/span&gt;
&lt;span class="c"&gt;&amp;quot; &amp;lt;leader&amp;gt;m : 根据提示新建或者删除文件&lt;/span&gt;
map &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;leader&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="k"&gt;n&lt;/span&gt; :NERDTreeToggle&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;CR&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; NERDTreeHighlightCursorline&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; NERDTreeIgnore&lt;span class="p"&gt;=&lt;/span&gt;[&lt;span class="s1"&gt;&amp;#39;\.pyc$&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;\.pyo$&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;\.o$&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;\.so$&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;\.egg$&amp;#39;&lt;/span&gt;] &lt;span class="c"&gt;&amp;quot; 设置需要忽略的文件&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;自动补全&lt;/h2&gt;
&lt;p&gt;自动补全是一项比较复杂的工作，所以需要设置的东西也相对比较多。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;vim编译时，必须添加python或者相关语言库；&lt;/li&gt;
&lt;li&gt;编译安装&lt;strong&gt;YouCompleteMe&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;在vim中配置&lt;strong&gt;Valloric/YouCompleteMe&lt;/strong&gt;插件&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;以下是配置内容：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;Bundle &lt;span class="s1"&gt;&amp;#39;Valloric/YouCompleteMe&amp;#39;&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;g&lt;/span&gt;:ycm_key_list_select_completion &lt;span class="p"&gt;=&lt;/span&gt; [&lt;span class="s1"&gt;&amp;#39;&amp;lt;Down&amp;gt;&amp;#39;&lt;/span&gt;]
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;g&lt;/span&gt;:ycm_key_list_previous_completion &lt;span class="p"&gt;=&lt;/span&gt; [&lt;span class="s1"&gt;&amp;#39;&amp;lt;Up&amp;gt;&amp;#39;&lt;/span&gt;] &lt;span class="c"&gt;&amp;quot;使用上下方向键来选择补全列表中的内容&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;g&lt;/span&gt;:ycm_complete_in_comments &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;  &lt;span class="c"&gt;&amp;quot;在注释中使用补全&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;g&lt;/span&gt;:ycm_complete_in_strings &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;       &lt;span class="c"&gt;&amp;quot;在字符串使用补全&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;g&lt;/span&gt;:ycm_use_ultisnips_completer &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;   &lt;span class="c"&gt;&amp;quot; 使用ultisnips提示&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;g&lt;/span&gt;:ycm_collect_identifiers_from_comments_and_strings &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt; &lt;span class="c"&gt;&amp;quot; 将注释和字符串中的内容收入到补全&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;g&lt;/span&gt;:ycm_collect_identifiers_from_tags_files &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt; &lt;span class="c"&gt;&amp;quot; 从tags文件中导入补全&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;g&lt;/span&gt;:ycm_seed_identifiers_with_syntax &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt; &lt;span class="c"&gt;&amp;quot; 打开关键字补全&lt;/span&gt;
&lt;span class="c"&gt;&amp;quot; 在新窗口跳转到定义，设置快捷键为 &amp;lt;leader&amp;gt;jd&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;g&lt;/span&gt;:ycm_goto_buffer_command &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;horizontal-split&amp;#39;&lt;/span&gt;
&lt;span class="nb"&gt;nnoremap&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;leader&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;jd :YcmCompleter GoToDefinitionElseDeclaration&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;CR&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;g&lt;/span&gt;:ycm_global_ycm_extra_conf &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;~/.vim/bundle/YouCompleteMe/third_party/ycmd/cpp/ycm/.ycm_extra_conf.py&amp;quot;&lt;/span&gt; &lt;span class="c"&gt;&amp;quot;补全三方python包&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;设置完上面的配置后，基本的补全功能就实现了，效率着实可以提升不少。更多功能参考：&lt;strong&gt;UltiSnips&lt;/strong&gt;。&lt;/p&gt;</summary><category term="python"></category><category term="vim"></category></entry><entry><title>Python的上下文管理器</title><link href="http://www.lyon0804.com/pythonde-shang-xia-wen-guan-li-qi.html" rel="alternate"></link><updated>2015-10-10T00:00:00+08:00</updated><author><name>lyon</name></author><id>tag:www.lyon0804.com,2015-10-10:pythonde-shang-xia-wen-guan-li-qi.html</id><summary type="html">&lt;h2&gt;首先想到的&lt;/h2&gt;
&lt;p&gt;看到上下文管理器的时候，立马闪进我脑海的是《&lt;em&gt;Ruby元编程&lt;/em&gt;》中使用ruby实现&lt;em&gt;C#&lt;/em&gt;中的using关键字的那段：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;RemoteConnection&lt;/span&gt; &lt;span class="n"&gt;conn&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;RemoteConnection&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;my_server&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;stuff&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;conn&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;readStuff&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="n"&gt;conn&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dispose&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;上面这段代码在连接的过程中如果发生异常，则连接不会被正确的释放，&lt;em&gt;C#&lt;/em&gt;通过&lt;code&gt;using&lt;/code&gt;关键字来保证正确释放：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;RemoteConnection&lt;/span&gt; &lt;span class="n"&gt;conn&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;RemoteConnection&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;some_remote_server&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="n"&gt;using&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;conn&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
  &lt;span class="n"&gt;conn&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;readSomeData&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="n"&gt;doSomeMoreStuff&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;在&lt;code&gt;using&lt;/code&gt;关键字会保证在大括号中的代码执行后，&lt;code&gt;conn&lt;/code&gt;对象不管有没有异常都会调用&lt;code&gt;dispose()&lt;/code&gt;方法；&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Ruby&lt;/em&gt;实现为：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;module&lt;/span&gt; &lt;span class="nn"&gt;Kernel&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;using&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;resource&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;begin&lt;/span&gt;
      &lt;span class="k"&gt;yield&lt;/span&gt;
    &lt;span class="k"&gt;ensure&lt;/span&gt;
      &lt;span class="n"&gt;resource&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dispose&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;em&gt;ps: ruby 基本忘记了，强烈想复习一回&lt;/em&gt;&lt;/p&gt;
&lt;h2&gt;什么是上下文&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;using&lt;/code&gt;关键字的作用类似于&lt;code&gt;finally&lt;/code&gt;，将&lt;code&gt;finally&lt;/code&gt;中相同的执行内容作为关键字，比反复使用&lt;code&gt;try-except&lt;/code&gt;要优雅得多，而&lt;code&gt;using&lt;/code&gt;作用的对象是代码块（&lt;em&gt;block&lt;/em&gt;），而所谓的上下文，就是代码块在执行前后进行的操作，前面的例子中，&lt;code&gt;using&lt;/code&gt;代码块执行完毕后调用&lt;code&gt;dispose&lt;/code&gt;方法，就是&lt;em&gt;下文&lt;/em&gt;了。&lt;/p&gt;
&lt;p&gt;一个普通的python实现：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;conn&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;RemoteConnection&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;some_remote_server&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;conn&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;readSomeData&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;doSomeMoreStuff&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="k"&gt;finally&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;conn&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dispose&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;是不是很像&lt;em&gt;Ruby&lt;/em&gt;的实现过程，可是要知道&lt;em&gt;Ruby&lt;/em&gt;修改的是内核模块，所以想象空间其实更多，而对应&lt;em&gt;Ruby&lt;/em&gt;的实现过程，可以看到：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;try&lt;/code&gt;到&lt;code&gt;finally&lt;/code&gt;之间的内容即需要执行的代码块，而&lt;code&gt;finally&lt;/code&gt;之后的内容即代码块的&lt;em&gt;下文&lt;/em&gt;，这样的写法很直观，是个普通青年，虽然知道每次&lt;code&gt;conn&lt;/code&gt;结束的动作都是&lt;code&gt;dispose&lt;/code&gt;，但是还是不厌其烦地亲自执行，并且确保不会有哪天突然忘记。&lt;/p&gt;
&lt;p&gt;Python当然不会局限于此，而是拥有非常易用的上下文管理，以及更加易用的上下文管理库：&lt;code&gt;contextlib&lt;/code&gt;。&lt;/p&gt;
&lt;h2&gt;Python的上下文管理器&lt;/h2&gt;
&lt;p&gt;Python中使用两个&lt;em&gt;魔术方法&lt;/em&gt;来实现上下文管理：&lt;code&gt;__enter__&lt;/code&gt;和&lt;code&gt;__exit__&lt;/code&gt;，拥有这两个方法的对象，会自动拥有上下文管理的功能，而实现该功能需要用到&lt;code&gt;with&lt;/code&gt;关键字，说起来有点复杂，看一个例子：&lt;/p&gt;
&lt;p&gt;另外一种比较文艺的Python实现：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;MyRemoteConnection&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;RemoteConnection&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__enter__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__exit__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;exception_type&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;exception_val&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;trace&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dispose&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;MyRemoteConnection&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;some_remote_server&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;conn&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;conn&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;readSomeData&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;doSomeMoreStuff&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;似乎代码更多了，但是有很多是对类进行一次性的修改。&lt;/p&gt;
&lt;p&gt;首先要使用上下文，就必须有&lt;code&gt;__enter__&lt;/code&gt;和&lt;code&gt;__exit__&lt;/code&gt;方法，分别表示上下文的内容，当&lt;code&gt;with&lt;/code&gt;语句开始前，上文会被自动调用，由于代码块使用了该类的对象，所以需要返回&lt;code&gt;self&lt;/code&gt;，而当&lt;code&gt;with&lt;/code&gt;语句结束时，不论是正常结束还是异常结束，都会调用&lt;code&gt;__exit__&lt;/code&gt;方法中的下文。&lt;/p&gt;
&lt;p&gt;上面的例子代码块用到了具有上下文类的对象，所以&lt;code&gt;__enter__&lt;/code&gt;中需要返回&lt;code&gt;self&lt;/code&gt;，但是代码块可以和对象没有任何关系，比如用上下文实现的定时器，其上下文是代码块执行和结束时的时间记录。&lt;/p&gt;
&lt;p&gt;同时，&lt;code&gt;__exit__&lt;/code&gt;接受三个参数，由于该方法是自动调用的，所以参数也是自动传入，通过参数名可以看到，&lt;code&gt;__exit__&lt;/code&gt;会自动接受异常信息，所以在其中也可以做异常的处理操作。&lt;/p&gt;
&lt;p&gt;这种上下文管理的方式是对&lt;code&gt;using&lt;/code&gt;关键字的提升，因为不再局限于某一种上下文(如dispose)，而是将上下文管理定义到类中，由类来决定上下文的内容，更加灵活并且强大。&lt;/p&gt;
&lt;p&gt;Python的上下文在文件操作时尤其常见，文件对象都有一个下文：&lt;code&gt;close()&lt;/code&gt;，所以使用&lt;code&gt;with&lt;/code&gt;关键字打开操作文件是一种好习惯，保证了句柄的正常释放；同时，&lt;code&gt;with&lt;/code&gt;关键字在Python2.7之后，支持同时管理多个上下文，如同时读写两个文件：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;file_to_read&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;r&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;reader&lt;/span&gt;\
        &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;file_to_write&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;w&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;writer&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;writer&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;reader&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;更加方便的上下文管理&lt;/h2&gt;
&lt;p&gt;什么，听了那么多，还是在怀念&lt;code&gt;using&lt;/code&gt;关键字？好吧，那就用Python来实现&lt;code&gt;using&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;还有一种更加高(zhuang)级(bi)的实现方式：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;contextlib&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;contextmanager&lt;/span&gt;
&lt;span class="nd"&gt;@contextmanager&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;using&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;resource&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;yield&lt;/span&gt;
    &lt;span class="n"&gt;resource&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dispose&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;使用起来是这样的：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;conn&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;RemoteConnection&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;some_remote_server&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;using&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;conn&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;conn&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;readSomeData&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;doSomeMoreStuff&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;虽然没有变成关键字，并且需要借助&lt;code&gt;with&lt;/code&gt;，但是总算是看起来极其相像了吧？这里就用到了Python提供的更加方面的上下文管理库：&lt;strong&gt;contextlib&lt;/strong&gt;，有了它，就可以避免创建一个新的具有上下文管理的新类，而是在外部对其进行管理。&lt;/p&gt;
&lt;p&gt;这里虽然用了&lt;em&gt;更加方便&lt;/em&gt;作为标题，但是并没有绝对的哪种方式更加好。当使用一个其他已有的类时，后面的方式避免创建继承的子类就完成了相应工作，更加直接，但是没有异常处理等功能；而当编写一个新的类时，如果需要用到上下文管理，则在类定义中直接添加，提供最基本的支持，就是更加好的方案。&lt;/p&gt;</summary><category term="python"></category></entry><entry><title>PEP8</title><link href="http://www.lyon0804.com/pep8.html" rel="alternate"></link><updated>2015-09-27T00:00:00+08:00</updated><author><name>lyon</name></author><id>tag:www.lyon0804.com,2015-09-27:pep8.html</id><summary type="html">&lt;p&gt;&lt;a href="https://www.python.org/dev/peps/"&gt;&lt;strong&gt;PEP&lt;/strong&gt;&lt;/a&gt;(Python Enhancement Proposals)，是一系列关于Python的改进建议，其中的第8篇建议，即&lt;strong&gt;PEP8&lt;/strong&gt;（Title: Style Guide for Python Code），则是针对Python的代码编写规范提出的一些建议。本文记录一些比较个人比较在意的点。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Readability Counts&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;一份编码建议旨在提高编码的可读性，统一的代码编写规范对代码可读性来说非常重要，而且从PEP中，可以看出Python的设计哲学，从而更好地理解Python。&lt;/p&gt;
&lt;h2&gt;代码编排&lt;/h2&gt;
&lt;h4&gt;1. 使用4个空格缩进，避免使用tab缩进&lt;/h4&gt;
&lt;p&gt;强制使用缩进是Python代码的一大特点，但是同时也是很多人对Python绝望的特性，这是由于很多不好的缩进习惯造成的，甚至在一些知名实验室中的代码都存在这些问题（如The Huttenhower Lab的LEfSe的&lt;a href="https://bitbucket.org/nsegata/lefse"&gt;源码&lt;/a&gt;中，混合使用了空格和tab的缩进，如果只从代码角度上讲，这份源码是烂透了)。&lt;/p&gt;
&lt;p&gt;为什么不使用tab（制表符）进行缩进呢？这是因为不同环境下，对制表符的转换有所不同，而空格则可以永远保持相同的外观。使用tab键作为缩进的代码，如果对其做复制操作，则多半会出缩进问题。&lt;/p&gt;
&lt;p&gt;使用tab缩进的好处是，只需要按一次键盘，但是基本上主流IDE和编辑器都支持expand tab，如：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;vim中，设置&lt;code&gt;expandtab&lt;/code&gt;、&lt;code&gt;softtabstop=4&lt;/code&gt;即可在输入tab时自动转换为4个空格，使用&lt;code&gt;autocmd FileType python setlocal&lt;/code&gt;设置，只在编辑python文件时生效。&lt;/li&gt;
&lt;li&gt;sublime中，设置   &lt;code&gt;"tab_size": 4&lt;/code&gt;,&lt;code&gt;"translate_tabs_to_spaces": true&lt;/code&gt;这两项，即可在输入tab时进行转换。&lt;/li&gt;
&lt;li&gt;pycharm等IDE在设置中都有indent选项，pycharm默认为4个空格。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在python3中，混合使用tab和空格将会报错，python2中，使用-t选项可以显示警告，使用-tt选项可以直接报错。&lt;/p&gt;
&lt;h4&gt;2. 代码一行最大长度为79&lt;/h4&gt;
&lt;p&gt;在编程时，应该注意以下两点，来保证代码一行长度不过长：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;避免在一行中写出复杂的生成式或者列表推导式，有时候为了显示能够熟练使用一些技巧，会写出很长的推导式，这样的代码可读性较差，在性能上也不一定具有提升，这种写法是&lt;strong&gt;complicated&lt;/strong&gt;的，为了代码可读性，平凡的&lt;strong&gt;simple&lt;/strong&gt;要比装逼的&lt;strong&gt;complicated&lt;/strong&gt;好的多。&lt;/li&gt;
&lt;li&gt;不要使用&lt;code&gt;;&lt;/code&gt;将多条语句强行写到同一行上。&lt;/li&gt;
&lt;li&gt;不可避免地需要较长代码时，应该使用&lt;code&gt;\&lt;/code&gt;符号进行分隔，分隔的同时应该注意缩进规则，不可使用和下一级相同的缩进，参考：&lt;a href="https://www.python.org/dev/peps/pep-0008/#indentation"&gt;https://www.python.org/dev/peps/pep-0008/#indentation&lt;/a&gt;；&lt;/li&gt;
&lt;li&gt;参数列表过长时，应该换行，并且遵守上述缩进规则。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;对一行代码的最大长度做出限制，看似是比较顽固保守的，但是其中透露出&lt;code&gt;The Zen of Python&lt;/code&gt;中的重要思想：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Simple is better than complex.&lt;/p&gt;
&lt;p&gt;Complex is better than complicated.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4&gt;3. 空行与空格的使用&lt;/h4&gt;
&lt;p&gt;空行的含义在于分割逻辑，空行使用原则为：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;类和顶级元素之间空两行&lt;/li&gt;
&lt;li&gt;方法定义之间空一行&lt;/li&gt;
&lt;li&gt;同一个函数内逻辑上无关的段落空一行，并且尽量避免这种情况，一个函数应该实现最小功能&lt;/li&gt;
&lt;li&gt;其他地方不要使用空行&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;空格用来在一个句子中，分隔独立含义的元素。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;避免不必要的空格，如：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;在括号后面不要使用空格，如：&lt;del&gt;spam( ham[ 1 ], { eggs: 2 } )&lt;/del&gt;，正确的写法为：&lt;code&gt;spam(ham[1], {eggs: 2})&lt;/code&gt;；&lt;/li&gt;
&lt;li&gt;在分割符号（&lt;code&gt;,&lt;/code&gt;，&lt;code&gt;;&lt;/code&gt;，&lt;code&gt;:&lt;/code&gt;）前面不要用空格，如：&lt;del&gt;if x == 4 : print x , y ; x , y = y , x&lt;/del&gt;，正确的写法为：&lt;code&gt;if x == 4: print x, y; x, y = y, x&lt;/code&gt;；&lt;/li&gt;
&lt;li&gt;在具有独立含义的元素中，不使用空格，如在切片操作中，两个冒号两侧都不应该使用空格；&lt;/li&gt;
&lt;li&gt;在函数调用的小括号前、索引的中括号前不应该使用空格；&lt;/li&gt;
&lt;li&gt;不要为了让&lt;code&gt;=&lt;/code&gt;对齐，而在&lt;code&gt;=&lt;/code&gt;两侧添加多余的空格；&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在操作符两侧使用一个空格，当操作符有优先级关系时，只再低优先级的操作符两侧添加空格，如：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;i = i + 1&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;submitted += 1&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;x = x*2 - 1&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;hypot2 = x*x + y*y&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;c = (a+b) * (a-b)&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在表示字典参数时，&lt;code&gt;=&lt;/code&gt;两侧不添加空格，如：&lt;code&gt;complex(real, imag=0.0)&lt;/code&gt;，但是，当出现&lt;code&gt;:&lt;/code&gt;的参数注释以及&lt;code&gt;-&amp;gt;&lt;/code&gt;的返回值注释时，则应该使用空格，如：&lt;code&gt;def munge(sep: AnyStr = None):&lt;/code&gt;，&lt;code&gt;def munge() -&amp;gt; AnyStr:&lt;/code&gt;；&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;不论&lt;code&gt;if&lt;/code&gt;、&lt;code&gt;try&lt;/code&gt;后面有几条语句，都应该分行显示；不论语句多么简短，不同的语句都应该分行显示，而不要使用&lt;code&gt;;&lt;/code&gt;连接，如：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;foo&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;blah&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;do_blah_thing&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;do_one&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;do_two&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;do_three&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;而不能写作&lt;del&gt;if foo == 'blah': do_blah_thing()&lt;/del&gt;，&lt;del&gt;do_one(); do_two(); do_three()&lt;/del&gt;等；&lt;/p&gt;
&lt;h2&gt;文档编排&lt;/h2&gt;
&lt;h4&gt;1. 编排顺序&lt;/h4&gt;
&lt;p&gt;按照：&lt;em&gt;docstring&lt;/em&gt; -&amp;gt; &lt;em&gt;import&lt;/em&gt; -&amp;gt; &lt;em&gt;globals&lt;/em&gt; &amp;amp; &lt;em&gt;constance&lt;/em&gt; -&amp;gt; 其他定义的顺序编排。&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.python.org/dev/peps/pep-0257"&gt;PEP257&lt;/a&gt;给出了文档描述编写时的建议，只需要为&lt;code&gt;public&lt;/code&gt;的模块、类、方法添加文档描述，非&lt;code&gt;public&lt;/code&gt;的内容不需要添加描述，意味着不希望使用者使用或者修改这部分代码，以免更新后的代码不可控，虽然Python没有提供直接&lt;code&gt;private&lt;/code&gt;，在提供了更大使用空间的同时，对使用者也有了更高的要求。&lt;/p&gt;
&lt;p&gt;在import部分，应当以&lt;em&gt;标准库&lt;/em&gt; -&amp;gt; &lt;em&gt;三方库&lt;/em&gt; -&amp;gt; &lt;em&gt;自己编写的库&lt;/em&gt;的顺序导入，并在中间以空行隔开，python2中如果需要导入&lt;code&gt;__future__&lt;/code&gt;，则应该写在最开头；在import时，每个独立的模块都应该使用单独的&lt;code&gt;import&lt;/code&gt;，而不要使用&lt;code&gt;,&lt;/code&gt;一次导入多个模块，如：&lt;del&gt;import sys, os&lt;/del&gt;，但是同一个模块的不同类、方法则可以使用&lt;code&gt;,&lt;/code&gt;一次导入多个，如正确的写法示例：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;subprocess&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Popen&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;PIPE&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;2. 注释&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;Comments that contradict the code are worse than no comments&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;不要添加过多不必要的注释，在代码更新时，必须更新注释内容。注释的内容必须使用完整的英文句子。&lt;/p&gt;
&lt;p&gt;块注释时，应该以&lt;code&gt;#&lt;/code&gt;并且紧跟一个空格开头，空行应该以单独的&lt;code&gt;#&lt;/code&gt;表示，如：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# It is a block comment.&lt;/span&gt;
&lt;span class="c"&gt;#&lt;/span&gt;
&lt;span class="c"&gt;# Something else.&lt;/span&gt;
&lt;span class="c"&gt;#&lt;/span&gt;
&lt;span class="c"&gt;# It is the end line.&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;单行注释应该&lt;strong&gt;尽量避免&lt;/strong&gt;，如确实要使用，则在代码和注释之间添加至少两个空格。&lt;/p&gt;
&lt;p&gt;注释的内容不应该是语句的翻译，而是解释语句的意义，如：&lt;/p&gt;
&lt;p&gt;这是一个无谓的注释，这种注释不如没有：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;                 &lt;span class="c"&gt;# Increment x&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这是一个有意义的注释，解释该语句的意义：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;                 &lt;span class="c"&gt;# Compensate for border&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;命名规范&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;没有必要给同一个模块的函数添加统一的前缀，因为Python中函数将始终受到模块的名称保护，同样的方法也受到所在对象的名称保护；&lt;/li&gt;
&lt;li&gt;使用单个下划线&lt;code&gt;_&lt;/code&gt;开头的方法，表示不建议直接使用，有些模块中习惯使用单个下划线&lt;code&gt;_&lt;/code&gt;结尾，用以区分关键字；使用双下划线&lt;code&gt;__&lt;/code&gt;开头，无法正常直接导入，如果非要使用，则需要用&lt;code&gt;_ClassName__boo&lt;/code&gt;这种方式；在开头和结尾使用双下划线&lt;code&gt;__&lt;/code&gt;表示一些魔术方法，如&lt;code&gt;__str__&lt;/code&gt;、&lt;code&gt;__class__&lt;/code&gt;等等；&lt;/li&gt;
&lt;li&gt;避免单独使用小写&lt;code&gt;l&lt;/code&gt;、大写&lt;code&gt;O&lt;/code&gt;、大写&lt;code&gt;I&lt;/code&gt;等容易搞错的字母；&lt;/li&gt;
&lt;li&gt;模块名称应该使用简短的、全小写的单词，可以使用下划线来增加可读性，而包名中则不应该使用下划线；由于模块名称对应文件名称，应该考虑多平台下的文件命名规范；&lt;/li&gt;
&lt;li&gt;类名应该使用&lt;code&gt;CapWords&lt;/code&gt;的方式，如果是内部类，则使用&lt;code&gt;_CapWords&lt;/code&gt;;&lt;/li&gt;
&lt;li&gt;异常类的命名，应该使用：&lt;code&gt;CapWordsError&lt;/code&gt;的方式；&lt;/li&gt;
&lt;li&gt;函数和变量命名应该全部使用小写字母，用下划线来增加可读性；&lt;/li&gt;
&lt;li&gt;常量命名应该全部使用大写字母，用下划线来增加可读性；&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;编码优化建议&lt;/h2&gt;
&lt;p&gt;PEP8给出了很多具体的建议，详细可以参考&lt;a href="https://www.python.org/dev/peps/pep-0008/#programming-recommendations"&gt;官方文档&lt;/a&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;对于不同的Python，应该考虑到实现的过程，从而使用最好的代码来编写，如字符串连接操作时：在CPython(标准Python解释器)中，&lt;code&gt;+&lt;/code&gt;的效率非常高，而Jython中使用&lt;code&gt;.join()&lt;/code&gt;效率比较高；&lt;/li&gt;
&lt;li&gt;使用&lt;code&gt;is&lt;/code&gt;、&lt;code&gt;is not&lt;/code&gt;来代替&lt;code&gt;==&lt;/code&gt;、&lt;code&gt;!=&lt;/code&gt;；避免对非布尔变量直接判断，而应该使用&lt;code&gt;if x is not None&lt;/code&gt;的形式；避免使用&lt;code&gt;if not x is None&lt;/code&gt;这种容易混肴的语句；如果是布尔变量，则应该直接用来判断，而不要再和布尔值比较，如当&lt;code&gt;greeting&lt;/code&gt;是布尔变量时，应该使用&lt;code&gt;if greeting&lt;/code&gt;而不是&lt;code&gt;if greeting == True&lt;/code&gt;或者更差的&lt;code&gt;if greeting is True&lt;/code&gt;；&lt;/li&gt;
&lt;li&gt;尽量避免使用匿名函数&lt;code&gt;lambda&lt;/code&gt;，而对每个函数都进行定义；&lt;/li&gt;
&lt;li&gt;使用模块和包中的异常类，避免直接使用&lt;code&gt;Exception&lt;/code&gt;；更加不要使用裸露的&lt;code&gt;except&lt;/code&gt;来获取所有的异常，而应该紧跟具体的异常；&lt;code&gt;try&lt;/code&gt;的中的代码应该尽量少，从而利于异常的准确定位，不要在&lt;code&gt;try&lt;/code&gt;后面直接&lt;code&gt;return&lt;/code&gt;一个过程,应该将计算的过程代码独立出来；&lt;/li&gt;
&lt;li&gt;使用&lt;code&gt;raise ValueError('message')&lt;/code&gt;来代替&lt;code&gt;raise ValueError,'message'&lt;/code&gt;；&lt;/li&gt;
&lt;li&gt;应该避免空的&lt;code&gt;return&lt;/code&gt;，而使用&lt;code&gt;return None&lt;/code&gt;；并且在分支结构中，确保每个分支都有返回值，而不应该置空一些可能不重要的分支；&lt;/li&gt;
&lt;li&gt;检查对象类型时，应该使用&lt;code&gt;isinstanceof(obj,int)&lt;/code&gt;，而不是&lt;code&gt;type(obj) is type(1)&lt;/code&gt;，这样会造成一次额外的运算；&lt;/li&gt;
&lt;li&gt;同样的，检查序列是否为空时，应该直接判断，如&lt;code&gt;if seq&lt;/code&gt;,而不要使用&lt;code&gt;if len(seq)&lt;/code&gt;先求长度；&lt;/li&gt;
&lt;li&gt;使用内置的方法，而不是另外重新实现，如判断字符串的后缀时，应该使用&lt;code&gt;if foo.endswith('gz')&lt;/code&gt;而不应该使用&lt;code&gt;if foo[:-2] == 'gz'&lt;/code&gt;；&lt;/li&gt;
&lt;/ol&gt;</summary><category term="python"></category><category term="PEP8"></category></entry><entry><title>SGE集群流程设计</title><link href="http://www.lyon0804.com/sgeji-qun-liu-cheng-she-ji.html" rel="alternate"></link><updated>2015-09-18T00:00:00+08:00</updated><author><name>lyon</name></author><id>tag:www.lyon0804.com,2015-09-18:sgeji-qun-liu-cheng-she-ji.html</id><summary type="html">&lt;blockquote&gt;
&lt;p&gt;由于华大基因等公司的大量使用，SGE计算集群在生物信息领域仍然有比较广泛的应用；生物大数据时代的到来，可靠、易维护的分析流程也日益重要。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;本文阐述本人在一次16S/ITS流程设计与搭建时的心得，大体思路如下：&lt;/p&gt;
&lt;h2&gt;流程整体思路&lt;/h2&gt;
&lt;p&gt;&lt;img alt="pipeline" src="http://ww3.sinaimg.cn/mw1024/95202659gw1ew6qpe8f4ej21a413atf7.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;其中：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;src中的程序，包含比较复杂的逻辑实现（包含基于string.Tempelate的R语言脚本模板）；&lt;/li&gt;
&lt;li&gt;script中脚本，规定程序的调用接口，默认值设置，帮助文档等内容；&lt;/li&gt;
&lt;li&gt;bin中的功能模块，规定了脚本的调用顺序，以及读取和写出功能的配置文件，一个功能中的脚本之间不应该同时存在两个资源需求较大的脚本，并且不应该存在功能逻辑上明显可以区分的脚本；&lt;/li&gt;
&lt;li&gt;Pipeline中是对功能模块的具体调用，以及针对不同集群系统的任务投递规则，功能模块之间串并行调用的选择，以及每个功能的资源分配等实现；&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;其他来源的程序（如&lt;a href="http://qiime.org"&gt;qiime&lt;/a&gt;、&lt;a href="https://github.com/rdpstaff"&gt;RDPTools&lt;/a&gt;等），也必须通过script重新定义接口，以符合当前流程的需要，并且在script中调用。&lt;/p&gt;
&lt;h2&gt;R和Python的交叉开发&lt;/h2&gt;
&lt;p&gt;R语言中有大量可靠的统计分析函数，以及强大的科学作图功能，结合python更加强大的组织能力，两种语言（以及perl语言）结合开发是生物信息分析过程中较为常见的行为。&lt;/p&gt;
&lt;p&gt;在python中使用r语言有rpy2等方式，但是这种方式并不是特别容易理解，利用python中的字符串模板，将R语言的实现逻辑和python的组织架构分离，并调用系统命令运行R语言，这样的好处是直接调用系统环境的R，方便更换R语言环境；&lt;/p&gt;
&lt;p&gt;为了避免R中的&lt;code&gt;$&lt;/code&gt;符号使用和默认的模板分隔符冲突，改写Template，并将delimiter值改变为&lt;code&gt;@#&lt;/code&gt;；&lt;/p&gt;
&lt;p&gt;思路如下：&lt;/p&gt;
&lt;p&gt;&lt;img alt="python_with_R" src="http://ww1.sinaimg.cn/mw1024/95202659gw1ew6qpe521zj212y11agpg.jpg" /&gt;&lt;/p&gt;
&lt;h2&gt;流程搭建步骤&lt;/h2&gt;
&lt;p&gt;通过将四种不同逻辑分离，在易于维护的同时，搭建其他不同的流程也将会变得比较清晰；一般流程搭建的步骤为：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;设计功能模块的流程，明确需要用到的软件，以及需要开发的程序；&lt;/li&gt;
&lt;li&gt;根据具体的分析要求，对上述软件和程序进行接口包装，流程只需要对接口负责，改变软件版本或者软件具体内容并不需要重新修改流程；&lt;/li&gt;
&lt;li&gt;完成未有需要开发的程序开发，程序中尽量实现最小功能实现，避免并行处理，通过任务分配完成并行，最大限度地使用计算资源；完成单一程序的测试等；&lt;/li&gt;
&lt;li&gt;功能模块测试，资源消耗的统计；&lt;/li&gt;
&lt;li&gt;制定功能模块的调用规则，分配资源，对不产生依赖的功能之间并行投递任务，产生依赖的功能串行投递任务；&lt;/li&gt;
&lt;/ol&gt;</summary><category term="SGE"></category><category term="pipeline"></category></entry><entry><title>在pelican中使用多说</title><link href="http://www.lyon0804.com/zai-pelicanzhong-shi-yong-duo-shuo.html" rel="alternate"></link><updated>2015-09-18T00:00:00+08:00</updated><author><name>lyon</name></author><id>tag:www.lyon0804.com,2015-09-18:zai-pelicanzhong-shi-yong-duo-shuo.html</id><summary type="html">&lt;p&gt;本文记录在pelican中实现评论系统的过程&lt;/p&gt;
&lt;p&gt;&lt;a href="https://disqus.com"&gt;&lt;code&gt;disqus&lt;/code&gt;&lt;/a&gt;是pelican默认支持的评论系统，然而由于墙内的原因，访问总是会有些问题（最近ss也不行了），国内的&lt;a href="http://duoshuo.com"&gt;&lt;code&gt;多说&lt;/code&gt;&lt;/a&gt;也是不错的选择，为了使用&lt;code&gt;多说&lt;/code&gt;，首先需要在多说上创建一个账号，填写使用的站点等信息之后，多说将会自动提示复制以下js代码：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;&amp;lt;!-- 多说评论框 start --&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;ds-thread&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;data-thread-key=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;请将此处替换成文章在你的站点中的ID&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;data-title=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;请替换成文章的标题&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;data-url=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;请替换成文章的网址&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="c"&gt;&amp;lt;!-- 多说评论框 end --&amp;gt;&lt;/span&gt;
&lt;span class="c"&gt;&amp;lt;!-- 多说公共JS代码 start (一个网页只需插入一次) --&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;text/javascript&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;duoshuoQuery&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;short_name&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;lyon0804&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;ds&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createElement&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;script&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="nx"&gt;ds&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;type&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;text/javascript&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="nx"&gt;ds&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;async&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nx"&gt;ds&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;src&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;location&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;protocol&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;https:&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;?&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;https:&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;http:&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;//static.duoshuo.com/embed.js&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nx"&gt;ds&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;charset&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;UTF-8&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementsByTagName&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;head&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
         &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementsByTagName&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;body&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]).&lt;/span&gt;&lt;span class="nx"&gt;appendChild&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ds&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;})();&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class="c"&gt;&amp;lt;!-- 多说公共JS代码 end --&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;根据该代码内容的提示，需要替换以及修改部分内容，如：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;&amp;lt;!-- 多说评论框 start --&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;ds-thread&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;data-thread-key=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;{{ article.slug }}&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;data-title=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;{{ article.title }}&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;data-url=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;{{ SITEURL }}/{{ article.url }}&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="c"&gt;&amp;lt;!-- 多说评论框 end --&amp;gt;&lt;/span&gt;
&lt;span class="c"&gt;&amp;lt;!-- 多说公共JS代码 start (一个网页只需插入一次) --&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;text/javascript&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;duoshuoQuery&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;short_name&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;lyon0804&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;ds&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createElement&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;script&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="nx"&gt;ds&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;type&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;text/javascript&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="nx"&gt;ds&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;async&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nx"&gt;ds&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;src&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;location&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;protocol&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;https:&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;?&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;https:&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;http:&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;//static.duoshuo.com/embed.js&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nx"&gt;ds&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;charset&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;UTF-8&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementsByTagName&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;head&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
         &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementsByTagName&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;body&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]).&lt;/span&gt;&lt;span class="nx"&gt;appendChild&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ds&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;})();&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class="c"&gt;&amp;lt;!-- 多说公共JS代码 end --&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;在pelican网页模板中添加代码&lt;/h2&gt;
&lt;p&gt;由于每个主题生成的最终网页不同，pelican的网页模板当然是存放在每个主题中，根据下面的思路：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;找到pelican的安装地址，如：&lt;code&gt;/usr/local/Cellar/python/2.7.10_2/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/pelican&lt;/code&gt;,主题的默认安装位置在该目录下的&lt;code&gt;themes&lt;/code&gt;中，到主题目录中，找到自己使用的主题，发现有一个&lt;code&gt;templates&lt;/code&gt;文件夹，这里面肯定就是存放模板了；&lt;/li&gt;
&lt;li&gt;由于评论应该显示在文章中，所以想当然应该查看一下&lt;code&gt;article.html&lt;/code&gt;中的内容，找到显示文章主题的部分，并且在最后，发现以下内容：&lt;code&gt;{% include 'includes/comments.html' %}&lt;/code&gt;，所以应该是在该文件中加载评论信息；&lt;/li&gt;
&lt;li&gt;编辑该文件，第一行显示：&lt;code&gt;{% if DISQUS_SITENAME %}&lt;/code&gt;，应该是使用全大写的全局常量来控制是否显示评论，由于默认支持的是&lt;code&gt;Disqus&lt;/code&gt;，这里检查的也就是&lt;code&gt;DISQUS_SITENAME&lt;/code&gt;是否设置了；&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;找到模板之后就简单了，照葫芦画瓢，在相同文件下，添加以下内容：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;{% if DUOSHUO_SITENAME %}
    &lt;span class="nt"&gt;&amp;lt;hr/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;section&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;comments&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;comments&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;h2&amp;gt;&lt;/span&gt;Comments&lt;span class="nt"&gt;&amp;lt;/h2&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;ds-thread&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;data-thread-key=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;{{ article.slug }}&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;data-title=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;{{ article.title }}&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;data-url=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;{{ SITEURL }}/{{ article.url }}&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;text/javascript&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;duoshuoQuery&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;short_name&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;{{ DUOSHUO_SITENAME }}&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt;
            &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;ds&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createElement&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;script&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
                &lt;span class="nx"&gt;ds&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;type&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;text/javascript&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="nx"&gt;ds&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;async&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                &lt;span class="nx"&gt;ds&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;src&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;location&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;protocol&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;https:&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;?&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;https:&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;http:&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;//static.duoshuo.com/embed.js&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                &lt;span class="nx"&gt;ds&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;charset&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;UTF-8&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementsByTagName&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;head&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
                 &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementsByTagName&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;body&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]).&lt;/span&gt;&lt;span class="nx"&gt;appendChild&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ds&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="p"&gt;})();&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;noscript&amp;gt;&lt;/span&gt;Please enable JavaScript to view the &lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;http://duoshuo.com/&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;comments powered by
        Duoshuo.&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&amp;lt;/noscript&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;http://duoshuo.com&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;dsq-brlink&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;comments powered by &lt;span class="nt"&gt;&amp;lt;span&amp;gt;&lt;/span&gt;Duoshuo&lt;span class="nt"&gt;&amp;lt;/span&amp;gt;&amp;lt;/a&amp;gt;&lt;/span&gt;

    &lt;span class="nt"&gt;&amp;lt;/section&amp;gt;&lt;/span&gt;
{% endif %}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;其中最后第二行当用户关闭js的时候弹出提示，最后一行显示多说的链接，但是如果想要显示多说的logo，还需要在css中添加多说logo的字图；&lt;/p&gt;
&lt;p&gt;接下来，到pelicanconf.py中，添加DUOSHUO_SITENAME，让这段代码通过判断，试试效果吧~&lt;/p&gt;
&lt;h2&gt;异步加载&lt;/h2&gt;
&lt;p&gt;为了让评论模块不影响页面加载速度，使用异步加载的方式，点击显示评论的时候才加载评论框，js还没怎么学，幸好已经&lt;a href="http://liam0205.me/2014/07/22/duoshuo-delay/"&gt;有人&lt;/a&gt;已经在hexo上实现了，根据pelican的特点，模仿者写了一段js：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;text/javascript&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;toggleDuoshuoComments&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;container&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;jQuery&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;container&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;has&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;div&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
            &lt;span class="nx"&gt;jQuery&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;container&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;empty&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;el&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createElement&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;div&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="nx"&gt;el&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setAttribute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;class&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;ds-thread&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="nx"&gt;el&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setAttribute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;data-thread-key&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="nx"&gt;el&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setAttribute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;data-title&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="nx"&gt;el&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setAttribute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;data-url&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="nx"&gt;DUOSHUO&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;EmbedThread&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;el&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="nx"&gt;jQuery&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;container&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;el&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;javascript:void(0);&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;onclick=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;toggleDuoshuoComments(&amp;#39;#comment-box&amp;#39;, &amp;#39;{{ article.slug }}&amp;#39;, &amp;#39;{{ article.title }}&amp;#39; , &amp;#39;{{ SITEURL }}/{{ article.url }}&amp;#39;);&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
查看评论&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;comment-box&amp;quot;&lt;/span&gt; &lt;span class="nt"&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;hr/&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;然后将之前的评论框加载注释掉：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;&amp;lt;!--         &amp;lt;div class=&amp;quot;ds-thread&amp;quot; data-thread-key=&amp;quot;{{ article.slug }}&amp;quot; data-title=&amp;quot;{{ article.title }}&amp;quot; data-url=&amp;quot;{{ SITEURL }}/{{ article.url }}&amp;quot;&amp;gt;&amp;lt;/div&amp;gt; --&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;就完成异步加载的工作了&lt;/p&gt;
&lt;h2&gt;代码一览&lt;/h2&gt;
&lt;p&gt;最终总体代码看起来就像这样：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;{% if DUOSHUO_SITENAME %}
    &lt;span class="nt"&gt;&amp;lt;hr/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;section&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;comments&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;comments&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;h2&amp;gt;&lt;/span&gt;Comments&lt;span class="nt"&gt;&amp;lt;/h2&amp;gt;&lt;/span&gt;
&lt;span class="c"&gt;&amp;lt;!--         &amp;lt;div class=&amp;quot;ds-thread&amp;quot; data-thread-key=&amp;quot;{{ article.slug }}&amp;quot; data-title=&amp;quot;{{ article.title }}&amp;quot; data-url=&amp;quot;{{ SITEURL }}/{{ article.url }}&amp;quot;&amp;gt;&amp;lt;/div&amp;gt; --&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;text/javascript&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;duoshuoQuery&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;short_name&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;{{ DUOSHUO_SITENAME }}&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt;
            &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;ds&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createElement&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;script&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
                &lt;span class="nx"&gt;ds&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;type&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;text/javascript&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="nx"&gt;ds&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;async&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                &lt;span class="nx"&gt;ds&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;src&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;location&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;protocol&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;https:&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;?&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;https:&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;http:&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;//static.duoshuo.com/embed.js&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                &lt;span class="nx"&gt;ds&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;charset&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;UTF-8&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementsByTagName&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;head&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
                 &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementsByTagName&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;body&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]).&lt;/span&gt;&lt;span class="nx"&gt;appendChild&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ds&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="p"&gt;})();&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;text/javascript&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;toggleDuoshuoComments&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;container&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
                &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;jQuery&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;container&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;has&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;div&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
                    &lt;span class="nx"&gt;jQuery&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;container&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;empty&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
                    &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                &lt;span class="p"&gt;}&lt;/span&gt;
                &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;el&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createElement&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;div&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
                &lt;span class="nx"&gt;el&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setAttribute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;class&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;ds-thread&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
                &lt;span class="nx"&gt;el&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setAttribute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;data-thread-key&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
                &lt;span class="nx"&gt;el&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setAttribute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;data-title&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
                &lt;span class="nx"&gt;el&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setAttribute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;data-url&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
                &lt;span class="nx"&gt;DUOSHUO&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;EmbedThread&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;el&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
                &lt;span class="nx"&gt;jQuery&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;container&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;el&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;javascript:void(0);&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;onclick=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;toggleDuoshuoComments(&amp;#39;#comment-box&amp;#39;, &amp;#39;{{ article.slug }}&amp;#39;, &amp;#39;{{ article.title }}&amp;#39; , &amp;#39;{{ SITEURL }}/{{ article.url }}&amp;#39;);&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        查看评论&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;comment-box&amp;quot;&lt;/span&gt; &lt;span class="nt"&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;hr/&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;noscript&amp;gt;&lt;/span&gt;Please enable JavaScript to view the &lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;http://duoshuo.com/&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;comments powered by
        Duoshuo.&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&amp;lt;/noscript&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;http://duoshuo.com&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;dsq-brlink&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;comments powered by &lt;span class="nt"&gt;&amp;lt;span&amp;gt;&lt;/span&gt;Duoshuo&lt;span class="nt"&gt;&amp;lt;/span&amp;gt;&amp;lt;/a&amp;gt;&lt;/span&gt;

    &lt;span class="nt"&gt;&amp;lt;/section&amp;gt;&lt;/span&gt;
{% endif %}
&lt;/pre&gt;&lt;/div&gt;</summary><category term="comment"></category><category term="pelican"></category><category term="duoshuo"></category></entry><entry><title>夕阳下的西湖</title><link href="http://www.lyon0804.com/xi-yang-xia-de-xi-hu.html" rel="alternate"></link><updated>2015-09-12T00:00:00+08:00</updated><author><name>lyon</name></author><id>tag:www.lyon0804.com,2015-09-12:xi-yang-xia-de-xi-hu.html</id><summary type="html">&lt;p&gt;&lt;img alt="xihu" src="http://r.photo.store.qq.com/psb?/V10mOL2Y3NEOUh/fMx5Btpv2h0FLsH7.KFo3x162swMNAeIytpQ00OHMTM!/o/dG4AAAAAAAAA&amp;amp;bo=VQOAAkAGsAQFAAU!&amp;amp;rf=viewer_4" /&gt;&lt;/p&gt;</summary><category term="photo"></category></entry><entry><title>Hello World!</title><link href="http://www.lyon0804.com/hello-world.html" rel="alternate"></link><updated>2015-09-11T00:00:00+08:00</updated><author><name>lyon</name></author><id>tag:www.lyon0804.com,2015-09-11:hello-world.html</id><summary type="html">&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;hello world!&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;使用gitcafepages + pelican + Macdown 搭建第一个博客：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;注册使用gitcafe pages&lt;/li&gt;
&lt;li&gt;使用pelican&lt;/li&gt;
&lt;li&gt;第一篇文章！&lt;/li&gt;
&lt;li&gt;更改主题&lt;/li&gt;
&lt;li&gt;添加插件&lt;/li&gt;
&lt;li&gt;域名绑定&lt;/li&gt;
&lt;li&gt;一些好用的工具&lt;/li&gt;
&lt;li&gt;感谢&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;1. 注册使用gitcafe pages：&lt;/h2&gt;
&lt;p&gt;到&lt;code&gt;gitcafe&lt;/code&gt;上申请一个账号，如：username，新建仓库：username，gitcafe就自动识别为pages项目啦~&lt;/p&gt;
&lt;p&gt;为什么没有用github呢？github访问速度不是很稳定啊（GFW你懂的），并且虽然只是自己的博客，但是不仅仅要考虑自己，也要考虑访问者的体验，所以还是选择gitcafe了。&lt;/p&gt;
&lt;p&gt;有了仓库之后，需要添加ssh-key，这样，就可以建立ssh连接，在本地更改远程仓库了。&lt;/p&gt;
&lt;p&gt;新建ssh-key：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;ssh-keygen -t rsa -C &lt;span class="s2"&gt;&amp;quot;youremail@example.com&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;接着会提示保存的路径以及文件名，密码就留空好了，完成之后，将.pub结尾的那个公钥的内容添加到gitcafe账户中（在settings/SSH keys里面可以找到~），gitcafe pages就建立完成啦~&lt;/p&gt;
&lt;h2&gt;2. 安装pelican&lt;/h2&gt;
&lt;p&gt;Pelican是一套开源的博客生成软件，使用python编写，所以安装pelican和安装一般的python包是一样的，相信小伙伴们都有各种不同的方式安装了~&lt;/p&gt;
&lt;p&gt;比如，我的环境是macos，使用homebrew管理软件，使用pip安装python包：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;brew install python
pip install pelican
pip install markdown
pip install ghp-import
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;markdown支持包是必须的~ 这个ghp-import是可选的，如果想要使用默认的&lt;code&gt;make github&lt;/code&gt;命令，则需要安装这个包，我感觉还是自己写几行脚本容易理解...&lt;/p&gt;
&lt;p&gt;如果成功的话就太好了，不过由于某GFW的原因，pelican可能安装会有一些慢（包括其他的python包），通过使用国内的镜像可以大大提高速度，如使用豆瓣源：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;pip install pelican -i http://pypi.douban.com/simple --trusted-host pypi.douban.com
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;pelican安装好之后，选择一个目录就可以初始化博客啦：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;mkdir blog
&lt;span class="nb"&gt;cd &lt;/span&gt;blog
pelican-quickstart
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;之后会问你一系列的问题，按照要求回答就好啦，回答完成之后，会建立以下目录格式：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;blog/
┣ Makefile             #一些设置，如FTP、SSH等服务器的设置，之前的问题中也会有，如果对自己的回答不满意，也可以在这里更改
┣ content              #博客页面的源文件目录
┣ develop_server.sh    #用于开启测试服务器的脚本
┣ fabfile.py           #一些脚本的配置
┣ output               #生成的输出文件
┣ pelicanconf.py       #主要配置文件
┣ publishconf.py       #发布脚本
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;然后，到&lt;code&gt;output&lt;/code&gt;文件夹下面，添加gitcafe仓库，并且设置本地git配置，git的教程大家可以看廖雪峰的博客：&lt;a href="http://www.liaoxuefeng.com"&gt;&lt;code&gt;廖雪峰的官方网站&lt;/code&gt;&lt;/a&gt;。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;git config --local user.name &lt;span class="s1"&gt;&amp;#39;yourname&amp;#39;&lt;/span&gt;
git config --local user.email &lt;span class="s1"&gt;&amp;#39;youremail@example.com&amp;#39;&lt;/span&gt;
git init
git remote add gitcafe &lt;span class="s1"&gt;&amp;#39;git@gitcafe.com:usrname/usrname.git&amp;#39;&lt;/span&gt;
git checkout -b gh-pages
touch Readme.md
git add *
git commit -m &lt;span class="s1"&gt;&amp;#39;init repo&amp;#39;&lt;/span&gt;
git push -u gitcafe gh-pages
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;注意了，这里的分支一定要填写gh-pages，不仅可以兼容github，而且这样才可以启用gitcafe的pages服务，master是不能用pages服务的。&lt;/p&gt;
&lt;p&gt;不同的情况下，添加远程仓库的方式会不一样，但是总之这一步要正确添加远程仓库就是了~&lt;/p&gt;
&lt;p&gt;完成这些之后，就可以动手写博客啦~&lt;/p&gt;
&lt;h2&gt;3. 第一篇文章！&lt;/h2&gt;
&lt;p&gt;随便选择并且使用一款markdown编辑器，动手写吧~&lt;/p&gt;
&lt;p&gt;在你的博客开头，添加以下的内容：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;Title&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Hello&lt;/span&gt; &lt;span class="n"&gt;World&lt;/span&gt;
&lt;span class="n"&gt;Date&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2015&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;09&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;11&lt;/span&gt;
&lt;span class="n"&gt;Category&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;pages&lt;/span&gt;
&lt;span class="n"&gt;Tags&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;pelican&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;gitcafe&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;gitpages&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这些内容大家应该能猜到是什么作用了吧？&lt;/p&gt;
&lt;p&gt;再下面就是你的博客正文啦，在完成大作之后，到项目目录下，执行：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nb"&gt;cd&lt;/span&gt; ..
make html
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;此时，就在output文件夹下面成功生成了博客页面了，在项目路径下，执行：&lt;code&gt;sh develop_server.sh start&lt;/code&gt;,然后通过&lt;a href="127.0.0.1:8000"&gt;127.0.0.1:8000&lt;/a&gt;就可以看到你的页面效果啦~&lt;/p&gt;
&lt;p&gt;当然，这个时候博客还是在你的本地，如果想让其他人也访问到你的博客的话，就需要同步到gitcafe pages上，到output文件夹下面，执行：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;git add -A
git commit -m &lt;span class="s1"&gt;&amp;#39;my first page&amp;#39;&lt;/span&gt;
git push -u gitcafe gh-pages
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;然后访问&lt;code&gt;yourname.gitcafe.io&lt;/code&gt;即可成功访问第一篇文章啦~&lt;/p&gt;
&lt;p&gt;但是你一定不满足那么多的操作步骤吧？下面编辑Makefile，定制我们的工作流程：&lt;/p&gt;
&lt;p&gt;编辑Makefile，添加以下几行：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nf"&gt;gitcafe&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;publish&lt;/span&gt;
    &lt;span class="nb"&gt;cd&lt;/span&gt; &lt;span class="k"&gt;$(&lt;/span&gt;OUTPUTDIR&lt;span class="k"&gt;)&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; git add -A&lt;span class="p"&gt;;&lt;/span&gt; git commit -m &lt;span class="s1"&gt;&amp;#39;Generate Pelican site&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; git push -u gitcafe gh-pages
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;同时，修改&lt;code&gt;publishconf.py&lt;/code&gt;，将其中的&lt;code&gt;DELETE_OUTPUT_DIRECTORY&lt;/code&gt;设置为&lt;code&gt;False&lt;/code&gt;，否则每次&lt;code&gt;make publish&lt;/code&gt;的时候，都会把output目录删除掉，这对我使用自定义的make命令会造成困扰，不如自己管理&lt;code&gt;git&lt;/code&gt;仓库。&lt;/p&gt;
&lt;p&gt;做完上述工作，以后就可以通过下面的命令一键同步啦：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;make gitcafe&lt;/code&gt;&lt;/p&gt;
&lt;h2&gt;4. 更改主题&lt;/h2&gt;
&lt;p&gt;可以用一些其他人已经设计好的主题，如使用pelican-bootstrap3主题等；首先需要下载主题：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;mkdir themes
&lt;span class="nb"&gt;cd &lt;/span&gt;thems
git clone git://github.com/getpelican/pelican-themes.git ./
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;在其中挑选一个主题，并且使用下面的命令安装：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;pelican-themes -i pelican-bootstrap3
pelican-themes -l
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;第二条命令可以看到当前安装的主体列表，选择想要更改的主体，并且修改&lt;code&gt;pelicanconf.py&lt;/code&gt;，添加&lt;code&gt;THEME = 'pelican-bootstrap3'&lt;/code&gt;一行，然后重新&lt;code&gt;make html&lt;/code&gt;，试试效果吧~&lt;/p&gt;
&lt;h2&gt;5. 添加插件&lt;/h2&gt;
&lt;p&gt;首先还是先下载插件:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;mkdir plugins
cd plugins
git clone git://github.com/getpelican/pelican-plugins.git ./
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;然后在&lt;code&gt;pelicanconf.py&lt;/code&gt;中，以安装sitemap为例，修改下面的内容：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;PLUGIN_PATHS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;u&amp;#39;plugins&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;PlUGINS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;sitemap&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="n"&gt;SITEMAP&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="s"&gt;&amp;#39;format&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;xml&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s"&gt;&amp;#39;priorities&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="s"&gt;&amp;#39;articles&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;0.7&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s"&gt;&amp;#39;indexes&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;0.5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s"&gt;&amp;#39;pages&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;0.3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="s"&gt;&amp;#39;changefreqs&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:{&lt;/span&gt;
        &lt;span class="s"&gt;&amp;#39;articles&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;monthly&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s"&gt;&amp;#39;indexes&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;daily&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s"&gt;&amp;#39;pages&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;monthly&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;之后再执行&lt;code&gt;make html&lt;/code&gt;，通过&lt;a href="http://127.0.0.1:8000/sitemap.xml"&gt;http://127.0.0.1:8000/sitemap.xml&lt;/a&gt;即可看到效果啦~&lt;/p&gt;
&lt;h2&gt;6. 申请购买域名&lt;/h2&gt;
&lt;p&gt;到这里为止，博客的基本内容就完成的差不多了，但是个性化的域名还是比较重要的，到&lt;a href="https://www.godaddy.com"&gt;&lt;code&gt;Godaddy&lt;/code&gt;&lt;/a&gt;上面，注册并且申请一个域名，通过支付宝付款购买之后，就有自己的独立域名了，但是光有域名还不行，还要和空间绑定起来，这里其实就拿&lt;code&gt;gitcafe&lt;/code&gt;当做空间，做一个绑定；&lt;/p&gt;
&lt;p&gt;首先，到&lt;a href="https://www.dnspod.cn"&gt;&lt;code&gt;DNSPOD&lt;/code&gt;&lt;/a&gt;上面，注册一个账号，然后添加域名解析服务，添加刚购买的域名，会将之前的信息导入，此时，会新增两条NS记录，到&lt;code&gt;Godaddy&lt;/code&gt;上的域名管理界面，在&lt;code&gt;DNS Manager-Settings&lt;/code&gt;中，将&lt;code&gt;Nameservers&lt;/code&gt;修改为&lt;code&gt;custom&lt;/code&gt;，并且添加在DNSPOD上产生的两条NS记录；之后，解析的工作就交给&lt;code&gt;DNSPOD&lt;/code&gt;了；添加一个A记录，指向地址为：&lt;code&gt;117.79.146.98&lt;/code&gt;，添加一个CNAME记录，主机记录为&lt;code&gt;www&lt;/code&gt;，记录值：&lt;code&gt;gitcafe.io&lt;/code&gt;；到这里就完成域名部分的工作了；&lt;/p&gt;
&lt;p&gt;回到&lt;code&gt;gitcafe&lt;/code&gt;的项目管理目录，在&lt;code&gt;Pages 服务&lt;/code&gt;下面，添加购买的域名，访问你购买的域名，看看是不是有效果了~&lt;/p&gt;
&lt;h2&gt;7. 一些好用的工具&lt;/h2&gt;
&lt;p&gt;好用的markdown编辑器：MacDown，也就是我现在正在使用的编辑器，安装非常简单：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;brew cask install macdown
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;就完成啦，关键还是免费开源的，必须要赞一个~&lt;/p&gt;
&lt;p&gt;国内可用的图床：&lt;code&gt;新浪微博&lt;/code&gt;&lt;/p&gt;
&lt;h2&gt;8. 感谢&lt;/h2&gt;
&lt;p&gt;第一次搭建博客，花了整整一天时间，期间借鉴了不少前辈的经验&lt;code&gt;lizherui,cold,poem_of_sunshine&lt;/code&gt;，非常感谢~&lt;/p&gt;</summary><category term="pelican"></category><category term="gitcafe"></category><category term="gitpages"></category></entry></feed>